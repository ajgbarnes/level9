**************************************************************************
* Level 9 A-Code game dissassembly for Lords of Time (v1)
**************************************************************************

/ Created by Andy Barnes @ajgbarnes on X/Twitter

/ Location descriptions
/ ---------------------
/ Location text can be found by looking in the lords-of-time-v1-descs.txt file 
/ The code to use is 0x190 + location id
/
/ Dictionary codes
/ ----------------
/ Dictionary  text can be found by looking in the lords-of-time-v1-dict.txt file 
/ 0x01 to 0x43 - verbs e.g. say or north or wink
/ 0x44 to 0x4f - unused
/ 0x50 to 0x9f - game objects e.g. rope or sword or firefly or tin (can be put in inventory)
/ 0xa0 to 0xa0 - unused
/ 0xa1 to 0xbd - static objects that cannot be put in inventory e.g. picture, compost heap etc
/ 0xbe to 0xc8 - unused
/ 0xc9 to 0xe3 - non-player characters e.g. fairy, mammoth, tiger etc
/ 0xe4 to 0xe5 - unused
/ 0xe6 to 0xfd - other special words
/
/ Exit flags
/ ==========
/
/ When the "exits" command is called, exit flags are returned in var[0x4e]
/ 
/ In this game they have the following definition:
/
/ Bit 0 - If set, the direction can be used inversely i.e. if this is 
/         an East entry between locations A and B then the player can go 
/         West from B to A (same for all v1 games)
/ Bit 1 - If set, the direction should be hidden when the location description is printed along with exits
/ Bit 2 - If set, there is a door in this direction between the two locations
/
/ Only Snowball and Lords of Time share this common bit definition for v1
/
/ Objects
/ -------
/ 1. Objects from 0x50 to 0x9f are all objects that a player
/    can pick up
/ 2. Player cannot wear objects >= 0xa1
/ 3. Player can only wear select objects < 0xa1
/
/ Description notes
/ -----------------
/ 1. Location descriptions starts at 0x190 - to get the current location's description
/    it's 0x190 + location id
/ 2. Object descrtiptions start at 0x50 - they have the same id as the object in the dictionary
/    so no conversion is required unlike for locations
/ 3. Exit description start at 0x07 - to get the exit description, 0x07 has to be added to the exit id
/    e.g. North = 0x01 but the "north" description is at 0x08 in the descriptions
/ 4. Some objects (between 0x58 and 0x74) have additional suffixed, contextual descriptions when 
/    they are in their default location e.g. valerian [hidden amongst the delphiniums] which
/    isn't shown if it's in any other location. The suffix location is 0x118 + object id so they are beteween
/    0x170 and 0x18c (although 0x18d - 0x18f could also have been used but are blank)
/  
/ Lists
/ -----
/ Memory locations below are for my BBC micro version only
/
/ list#1 - default location of objects
/          Starts at 0x1db0 + object id (min 0x50) - effectively starts at 0x1e00
/ list#2 - current working location of objects
/          Starts at 0x500 + object id (min 0x50) - effectively starts at 0x0550
/ list#3 - value of objects - either 0x00, 0x01 or 0x03. If less than 0x02,
/          not counted in the "score" command and nor does "It's a valuable 
/          treasure" get added to its description when examined
/          Starts at 0x1ef0 + object id (min 0x50) - effectively starts at 0x1f40
/        - Hit points / fight value / size of NPC - NPCs are 0xc9 to 0xe3
/          so values are from 0x1fb9 to 0x1fd3
/    
/          0x08 or greater - "Only a fool would attack..."
/          0x04 to 0x07    - "You attack ferociously, scaring off..."
/          0x00 to 0x03    - "Your blows are futile"
/ 
/          In this game on values 0x00, 0x01, 0x02, 0x04, 0x07, 0x08, 0x09,
/          0x0a, 0x0b are used
/
/ Known variable use:
/ -------------------
/
/ NOTE - on a BBC Micro v1 game, these are stored at $0400 + (variable number * 2).
/ 
/ Multiplied by two as each variable is 16 bits so takes up two bytes in MSB LSB order
/
/ 0x01 - Cavemen behaviour counter - defaults to 0x10f and increments every move the player stays in the cave,
/        starts printing messages at 0x112 and player dies at 0x115
/ 0x02 - Black Knight Behaviour - initialised to 0x00 (should really be 0x116) and has the following behaviour
/        0x116 - starting message id that gets incremented to the message below before the check if the knight is the same location as the player
/        0x117 - The Black Knight strides forwards
/        0x118 - The Black Knight draws his sword
/        0x119 - The Black Knight attacks 
/        0x11a - The Black Knight attacks again!
/ 0x03 - (Constant) (Unused), always 0x00
/ 0x04 - Indicates if the gladiator has stolen the buckle yet. Either set to not stolen (0x00) or stolen (0x01)
/ 0x05 - (Constant) Used to represent (0x01)
/ 0x06 - (Constant) 0x02
/ 0x07 - (Constant) 0x03 - used to denote the location of the clock room
/ 0x08 - (Constant) 0x04 used for: 
/                   Default inventory limit 
/                   Number of turns a plant can eat you after
/                   Value to indicate there's a door in this direction
/                   Value to keep subtracting from an NPC's list#3 value until it's < 0x08
/                   Default cyclical message offset
/ 0x09 - (Constant) 0xe1 location id for the inventory (when the player has picked something up)
/ 0x0a - (Constant) 0xe2 location id for wearing an item e.g. rucksuck or jester's caps
/ 0x0b - (Constant) 0xfe location id for items that are undiscovered
/ 0x0c - (Constant) 0xff location id for out of game or destroyed objects
/ 0x0d - (Constant) Used to represent (0x00)
/ 0x0e - Indicates if there is a door on at least one exit (0x01) or none (0x00)
/ 0x0f - Door status for current location - closed (0x00), open (0x01). Note there is only ever one door per location in this game.
/ 0x10 - Current direction to check if possible from current location 
/ 0x11 - Random diagonal direction to try if the player types "forwards", "backwards", "left" or "right"
/ 0x12 - Indicates status of the Weeping willow tree - alive (0x00) or chopped down (0x01)
/ 0x13 - Number of turns until the dinosaur kills the player (defaults to 0x06 when the player reaches that location)
/ 0x14 - Indicates if the player is not in a hole (0x00 or 0x11e), in a hole (0x11f) or deep hole (0x120)
/ 0x15 - Indicates if the player has drank then water of strenght (0x01) or not (0x00)
/ 0x16 - Message id to show for the two hunting dogs in the bedroom of the master of the house.
/ 0x17 - Working object id
/ 0x18 - Working location for current object
/ 0x19 - Working counter for valid (displayable) exit
/ 0x1a - Used to loop through all the objects when a player says e.g. "get everything"
/        or "drop everything"
/ 0x1b - Count of valid directions for current location when looking up exits
/ 0x1c - (Unused)
/ 0x1d - Indicates if the tiger has been given the tin of catfood, not yet(0x00) or fed (0x01)
/ 0x1e - (Unused)
/ 0x1f - Indicates the status of the icicle - attached to roof (0x00), loose (0x01)
/ 0x20 - Number of turns a player has been "cold", used to display "You feel very cold"
/        and eventually kill the player after 16 turns
/ 0x21 - Whether the grate has been pulled from the wall (0x01) or not (0x00)
/ 0x22 - Turn countdown counter for the number of turns that the player can hold
/        "a fallen star" with the "rugged gauntlet".  When it reaches zero, the 
/        gauntlet will catch fire. Defaults to 20 (0x14) turns.
/ 0x23 - Indicates whether the "fallen star" is currently in the inventory
/ 0x24 - matched input word code 1
/ 0x25 - matched input word code 2
/      - used for looping through objects too (not just var[0x17])
/ 0x26 - matched input word code 3
/ 0x27 - matched input word count
/ 0x28 - cached last matched input word code 1, used by "again"
/ 0x29 - cached last matched input word code 2, used by "again"
/ 0x2a - cached last matched input word code 3, used by "again"
/ 0x2b - cached last matched input word count, used by "again"
/ 0x2c - Current zone e.g. 1 for present day
/ 0x2d - Indicates if the jester has appeared yet (0x01) or hasn't appeared (0x00)
/ 0x2e - Whether the player is kneeling (0x01) or standing (0x00)
/ 0x2f - Indicates if it's dark. Dark (0x00) versus light (0x01)
/ 0x30 - Unused
/ 0x31 - Unused
/ 0x32 - Indicates the status and number of moves before the candle burns out
/        unlit (0x00) or remaining turns that it's burning brightly (> 0x00)
/ 0x33 - Number of commands/moves in the amphitheatre before the lion kills
/        the player if the command is not "throw net"
/ 0x34 - Indicates the status of the lion - free (0x00), trapped by net (0x01)
/ 0x35 - holds the message id for tied or untied planks when bridging the stream
/      - holds the adjective or modifier description id for an object
/      - used to hold the message id for the yes/no response
/      - holds the message id for the direction description when printing exits
/      - holds the message id for "You can see" when describing a room
/ 0x36 - Cyclic message offset - everytime there's a choice of 3 messages to print, it's 
/        incremented and cycles between 0-2 on each call to 0x0426. Used to keep the 
/        messages interesting and to give clues e.g. the tiger with the sore tooth
/ 0x37 - Number of turns left that the match has left to burn - defaults to 0x08 when 
/        lit.  Also status of the matchbox i.e. if the value is > 0x00 then a match is lit.
/ 0x38 - Indicates whether the brontosaurus is captured in the mirror (0xce) or not (0x00)
/        It gets set to the dictionary/object id of the brontosaurus. Player can also capture
/        any other NPC too if they can reach them and it'll be set to that code
/ 0x39 - Indicates whether the god Mercury has given the player the winged sandals yet 
/      - not given (0x00), givem (0x01)
/ 0x3a - number of carried items (rucksack not counted)
/ 0x3b - indicates if there is water in the location for extinguishing the hot star
/        or allowing the player to drink
/ 0x3c - Counter of printed objects in specified location or inventory - compared against 0x3e to 
/        drive printing of commas and the final " and " etc
/ 0x3d - (working) inventory limit, affected by whether you have the rucksack or not
/ 0x3e - Total count of objects in the current location (use for printing "," and " and " and ".")
/ 0x3f - Zone 1 kitchen wall cupboard status open (0x01) or closed (0x00)
/ 0x40 - Status of the huge ironbound chest, closed (0x00) or open (0x01)
/ 0x41 - Status of the ottoman, closed (0x00) or open (0x01)
/ 0x42 - Status of the tin of catfood closed (0x00) or open (0x01)
/ 0x43 - Status of planks. Either set to 0x00 (untied) or 0x01 (tied)
/ 0x44 - Status of the petrol in your current location and current turn
/        Not poured on ground (0x00), poured on ground(0x01)
/ 0x45 - Indicates whether the bartender has received (0x01) the nugget or not (0x00)
/        It's used to see if the player is allowed to pick up the ale
/ 0x46 - Tracks whether the prince has been giving the sword (0x01) or not (0x00)
/ 0x47 - Tracks whether the lute has been played to open the secret panel/door (0x01) or not (0x00)
/ 0x48 - When checking exit from a location, the location to check
/      - Player's current location
/ 0x49 - When checking exit from a location, the location the direction will take the player if the direction is valid
/      - Current location of the player too after printing the exits
/ 0x4a - Used to hold the message id of the first message to print between the list of objects 
/        and the location exits. Messages are the following:
/        (0x2)   <nothing>
/        (0x12c) Tears rain down from the willow tree
/        (0x12d) The tree is dead
/        (0x12f) There's a hole to the south
/        (0x130) The wood burns warmly
/        (0x131) The dinosaur approaches menacingly
/        (0x132) A secret door leads east 
/        (0x133) The plant is eating you
/ 0x4b - Used to hold the message id of the second message to print between the list of objects 
/        and the location exits.  Messages are the folloing:
/        (0x2)   <nothing>
/        (0x12e) Planks bridge the stream
/        (0x131) The dinosaur approaches menacingly
/ 0x4c - Current non-player character (NPC) when looping through and checking status / action
/ 0x4d - Size / hit point value of NPC
/        If you try and attack an NPC:
/        0x08 or greater - "Only a fool would attack"
/        0x04 to 0x07    - "You attack ferociously, scaring off"
/        0x00 to 0x03    - "Your blows are futile"
/ 0x4e - When checking exits from a location, the exit flags if move in direction possible
/ 0x4f - Player's total score, calculated when they die or complete the game
/ 0x50 - Unused
/ 0x51 - Total number of valid moves and actions. Not used for anything but recorded
/ 0x52 - Unused
/ 0x53 - Used to indicate if the "wood warms warmly" in the location "...at the edge of the ice..."
/        where the Wooly Mammoth is. Not burning (0x00), burning (0x01).
/ 0x54 - Indicates the status of the drinking horn (0x65) - empty (0x00), full (0x01)
/ 0x55 - How hot you are in the hypocaust. Starts at 0x125, every move adds 1. Drinking water resets to 0x125
/        The values 0x127, 0x128, 0x129 relate to messages that are displayed.
/ 0x56 - General purpose temporary variable including below
/      - Temporary variable for exit flags
/      - When calculating score, holds the score increment of 25 (0x19) per hourglass marked item
/      - When adding to death score, holds the constant 100 (0x64) which is added to death score every resurrection
/      - When printing "Times go by" it's the number of dots printed afterwards
/      - When checking the location of the allosaurus to see if it's in the same location as the tyrannosaurus
/      - Cache of the current diagonal random direction when calculating the next one clockwise (see 0x14a9)
/      - Location description message id at 0x1249
/ 0x57 - When printing "Time goes by" it's the delay loop counter between printing dots
/      - Black knight message to print
/      - When checking the location of the tyrannosaurus to see if it's in the same location as the allosaurus
/ 0x58 - Unused
/ 0x59 - Indicates whether the inspection panel has opened. Closed (0x00) and open (0x01).
/ 0x5a - Indicates that the player has "abandoned hope" at the "ugly arch". Either set to not abandaned (0x00) or abandoned (0x01)
/ 0x5b - Number of turns since the player has abandoned hope
/ 0x5c - Indicates poison bottle dug loosened status. Either set to 0x00 (not dug) or 0x01 (dug)
/ 0x5d - Indicates that the player has opened the cages in the "experimental laboratory". Either set to not closed (0x00) or open (0x01)
/ 0x5e - Indicates that the player has opened the bars in the "worse laboratory". Either set to not closed (0x00) or open (0x01)
/ 0x5f - The amount of times the player is being eaten by the plant - if it reaches 4 they are dead
/      - Also used when a player is asked a yes (0x01) or no (0x00) question
/ 0x60 - Indicates that the player has completed the cauldron recipe. Either set to not complete (0x00) or complete (0x01)
/ 0x61 - Never used just set to a random number
/ 0x62 - Death score (number of times the player has been killled) - increments by 100 (0x64) on each death. Allows 3 deaths and resurrections
/ 0x63 - Number of matches in the matchbox (starts at 4)
/ 0x64 - Not initialised but used to indicate if the groat has been paid to get past the forcefield (0x01) or not (0x00)
/ 0x65 - Not initialised or used other than setting to 0x00
/
/ Non-player Character (NPC) 
/ --------------------------
/ These are the list3 values for the NPCs, sorted
/ by value, not NPC id.  Value is used to see what 
/ happens when you fight them and also if they will
/ take an object if you give it to them. 
/
/ 
/ 0xdb 	a ghost 	                            0
/ 0xe1 	a single beautiful narcissus  	        0
/ 0xd3 	an unfortunate wretch in the stocks 	1
/ 0xdf 	a splendid android 	                    2
/ 0xc9 	the Tooth Fairy 	                    4
/ 0xce 	a Brontosaurus 	                        4
/ 0xe3 	two hunting dogs 	                    4
/ 0xd9 	a jester 	                            7
/ 0xca 	a woolly mammoth blocking your escape 	8
/ 0xcb 	a sabre-toothed tiger 	                8
/ 0xcc 	an Allosaurus 	                        8
/ 0xcd 	a Tyrannosaurus Rex 	                8
/ 0xd1 	an animated cave skeleton 	            8
/ 0xde 	a fierce lion 	                        8
/ 0xe0 	a fierce cyberman waving a sword 	    8
/ 0xd7 	a fair prince 	                        9
/ 0xdc 	two Roman sentries beside the gate 	    9
/ 0xdd 	a massively-muscled gladiator 	        9
/ 0xd5 	a genuine fire-breathing dragon 	    A
/ 0xe2 	a silver fox 	                        A
/ 0xcf 	a group of cavemen 	                    B
/ 0xd0 	a caveman dragging a...cavewoman ...	B
/ 0xd2 	a rotund bartender 	                    B
/ 0xd4 	a thirsty messenger of the King 	    B
/ 0xd6 	the Black Knight 	                    B
/ 0xd8 	Pirate Pete 	                        B
/ 0xda 	a shivering Viking guard 	            B
/
/ Features
/ --------
/ 
/ 1. After you first examine the picture in the first location, it's moved to
/    to the hidden location (0xff) and no longer appears in the room description
/    however you can still examine it in that location as the picture's location
/    is never checked
/ 2. Dictionary word 0x3f doesn't exist but code to process it does
/ 3. Regardless of where you are, if you drop the wheel it takes you back to the 
/    gigantic clock. This should only be from from room 0x1d6 "in a small recess
/    which sounds hollow underfoot"
/ 4. If you drop the rucksack, you don't drop the additional items you shouldn't
/    be able to carry even though the inventory limit is reduced
/ 5. Variables 0x59 to 0x62 are initialised twice
/ 6. Variables 0x64 and 0x65 are not initialised 
/ 7. The candlestick is a missing object - still has a dictionary word (0x7b) but also
/    missing description for 0x7b.  It is a scoring item in list3 which explains
/    why you cannot get 1000 points. And its default location is 0xFE so it's not
/    in-game (no code to move it).
/ 8. There's a check in the score calculation that if the score is >= 2000
/    reset it to zero. Why?
/ 9. Doesn't seem that the "tied up" (0x4e) message is ever used at code (0x1616)
/    It's based on the status indicator for the lion but the lion eats you in one
/    turn if you don't throw the net
/ 10. The "fierce lion" is in the dictionary as "LIONESS"
/ 11. At 0x0465, there's a check for the second word being "take" and if so, replaces
/     the second word with "porsche" / "car".  But the only way that piece of code is 
/     triggered is if the player types e.g. "take take <anything>" or "get get <anything>"
/     in any location
/ 12. Why reset the player's score to zero if it's greater than 2,000?
/ 13. Some weird logic at 0x0233/0x023b
/ 14. If the player types "listen" or "hear" it says "an old mattress"
/     (seems to have the wrong message code)
/ 15. The game generates "random" diagonal directions for "forwards", "backwards",
/     "left" and "right" - no logic to it... see just after 0x066e
/ 16. After lighting the petrol and jumble of wood to scare the mammoth away
/     the wood burns warmly for the rest of the game however it does not
/     stop the player from feeling cold (0x0e79)
/ 17. Used to be a "porcelain vase" (0x9e) which has a location of 0xff 
/     which is removed from game
/ 18. There is A-code logic for wearing a star but it doesn't nothing other
/     than play with var[0x65] but that's never used
/ 19. Dropping or giving away the rucksack does NOT reduce the inventory count
/     it stays at 0x0f and never reduces to 0x04. See 0x1625
/ 20. 0x22a is redundant code
/ 21. A player can't stand (and reset var[0x2e]) - they have to leave the location
/     and the A-code automatically changes them to standing
/ 22. "UNTIE" is in the dictionary twice (0x2f) and (0x3c) - second will never be matched
/ 23. Timelords will kill you if you use certain commands > 0x28 and not SIP or DRINK
/ 24. There is still code to process dictionary command id 0x3f which calls the 
/     same routine as shoot / fire (0x39)
/ 25. The wrong status is checked for the huge iron bound chest (0x109e).  If you 
/     "exam chest" and the kitchen cupboard is open then the game will state    
/     "Sorry, I can't tell you any more" rather than "It's closed".  Setting
/     var[0x3f] to 0x00 will give the correct message "It's closed" but then
/     opening the chest and examining will still say "It's closed"
/ 26. A synonym for the Android is "chain"!
/ 27. When the player is outside the sports and aerobatics area, 
/     as a hack the NPC and third word is set to the cyberman.... doesn't need
/     to be.  Could be set to the Android which is actually in that location 
/     and then the check at 0x0ae9 could be against the correct NPC
/ 28. There is an object location check against location 0x00 but no 
/     object is ever there (see 0x0af8)
/ 29. When the game starts, the first "previous matched input word" is set to
/     "look" but the previous matched word count is set to zero... why not 1?
/ 30. Code is inconsistent at times, sometimes 0x00 is used directly, other times
/     var[0x0d] is used.  Similar for 0x01 and var[0x05].
/ 31. 0x0131 to 0x014c are duplications of the previous variable initialisations
/ 32. 0x02a3 contains a check that can never be true - it's using the wrong variable
/     to figure out if the player is next to the burning wood.  Even if they are, 
/     because of this, they can die of the cold which is not the intended behaviour
/ 33. The message at 0x0ed6 that "you've already done that" if the player tries to 
/     tie the planks again, will never be displayed as it checks the state is > 0x01
/     instead of > 0x00
/ 34. If the player types "GIVE <an object> TO <any npc>" the response will always be
/     "You don't have a tiger tooth".  <an object> has to have an id of greater than 
/     0x9f e.g. clock or pendulum or wall or junk. This is because the original BBC micro v1 engine
/     (and my python engine, which follows the same logic) does a partial match against
/     TO(OTH) in the dictionary so the engine ends up with 3 words only matched i.e.
/     "GIVE TOOTH <an object>" and the actual NPC is thrown away. This can be tried with
/     e.g. GIVE WALL TO JESTER which gets translated to "GIVE TOOTH WALL" or 
/     "GIVE JUNK TO JESTER" which gets translated to "GIVE TOOTH JUNK"
/ 35. The code at 0x003 seems to be a development/testing entry point to 
/     skip initialisation and allow a known state to be set up before hand in the 
/     variables and working lists to then jump into the main game processing.  
/     The Level 9 original dev/test tools must have allowed this? 
/ 36. Colossal Cave (etc) used jump tables to route a command to its sub-routine - this changed
/     in Snowball / Lords of Time to use a giant switch table instead. Jump tables are more memory
/     efficient though.
**************************************************************************

/ Call the initialisation routine
0x0000 (0x5c20): (0x00) Goto 0x0006
**************************************************************************
/ NOTE This is never executed

/ Seems to be an A code entry point to skip initialisation but it's never called
/ Probably some test harness thing back with their original tools that allowed
/ state to be loaded first and jump into the game processing
/ 
/ Check if it's light / dark and print the location description if light
0x0003 (0x5c23): (0x00) Goto 0x0165
**************************************************************************
* Initialisation routine
**************************************************************************
* - Displays welcome message
* - Sets variable initial values from constants
* - Uses 0x63 (99) variables
**************************************************************************
/ Print the "Welcome to "Lords of Time" from Level 9 Computing. You are 
/ sitting in the comfort of your own home, debugging your latest program 
/ before submitting it for us to market. Suddenly there is a blinding 
/ flash..." message 
0x0006 (0x5c26): (0x05) Print message (constant) 0xa0

/ Set the cavemen behaviour counter to 0x10f (which is eventually 
/ displays the first message at 0x112 after a few increments / turns in that 
/ location)
0x0008 (0x5c28): (0x08) Set var[0x01] = (constant) 0x10f

/ Set the Black Knight behaviour counter to 0x0
/ NOTE: Interesting it is not set to 0x116 as that's the default
/ every game turn if the player is not with the Black Knight
0x000c (0x5c2c): (0x08) Set var[0x02] = (constant) 0x0

/ NOTE: not used
0x000f (0x5c2f): (0x08) Set var[0x03] = (constant) 0x0

/ Gladiator has not stolen the buckle yet
0x0012 (0x5c32): (0x08) Set var[0x04] = (constant) 0x0

/ (Constant) 0x01
/ Also used as the starting location id
0x0015 (0x5c35): (0x08) Set var[0x05] = (constant) 0x1

/ (Constant) 0x02
0x0018 (0x5c38): (0x08) Set var[0x06] = (constant) 0x2

/ (Constant) 0x03
/ Also used as the clock room location
0x001b (0x5c3b): (0x08) Set var[0x07] = (constant) 0x3

/ (Constant) 0x04
/ Also used as the default inventory limit until rucksack (see above)
0x001e (0x5c3e): (0x08) Set var[0x08] = (constant) 0x4

/ (Constant) location id for the inventory
0x0021 (0x5c41): (0x08) Set var[0x09] = (constant) 0xe1

/ (Constant) location id for wearing an item
0x0024 (0x5c44): (0x08) Set var[0x0a] = (constant) 0xe2

/ (Constant) Undiscovered items location
0x0027 (0x5c47): (0x08) Set var[0x0b] = (constant) 0xfe

/ (Constant) Out of game / destroyed location
0x002a (0x5c4a): (0x08) Set var[0x0c] = (constant) 0xff

/ (Constant) value of 0x00
0x002d (0x5c4d): (0x08) Set var[0x0d] = (constant) 0x0

/ Indicates if a there are any doors (set to none)
0x0030 (0x5c50): (0x08) Set var[0x0e] = (constant) 0x0

/ Door status, set to closed (0x00)
0x0033 (0x5c53): (0x08) Set var[0x0f] = (constant) 0x0

/ Looped through direction to test 
0x0036 (0x5c56): (0x08) Set var[0x10] = (constant) 0x0

/ Random direction to try if player says left, right, forwards or backwards
0x0039 (0x5c59): (0x08) Set var[0x11] = (constant) 0x0

/ Set the weeping willow to alive (0x01)
0x003c (0x5c5c): (0x08) Set var[0x12] = (constant) 0x0

/ Set the number of turns that the dinosaur will kill the player in
/ Gets set to 6 when the player meets the dinosaur
0x003f (0x5c5f): (0x08) Set var[0x13] = (constant) 0x0

/ Player "hole" status (see above)
0x0042 (0x5c62): (0x08) Set var[0x14] = (constant) 0x0

/ Player has not drunk the water of strength yet (0x00)
0x0045 (0x5c65): (0x08) Set var[0x15] = (constant) 0x0

/ Hunting dogs supplementary message id
0x0048 (0x5c68): (0x08) Set var[0x16] = (constant) 0x138

/ Used as a temp variable mostly for holding the object id / npc id to look up location
0x004c (0x5c6c): (0x08) Set var[0x17] = (constant) 0x0

/ Used as a temp variable mostly for holding the current location
0x004f (0x5c6f): (0x08) Set var[0x18] = (constant) 0x0

/ Working counter for valid (displayable) exit
0x0052 (0x5c72): (0x08) Set var[0x19] = (constant) 0x0

/ Loop through objects temp variable when "get everything" typed
0x0055 (0x5c75): (0x08) Set var[0x1a] = (constant) 0x0

/ Count of valid directions for current location
0x0058 (0x5c78): (0x08) Set var[0x1b] = (constant) 0x0

/ NOTE: not used
0x005b (0x5c7b): (0x08) Set var[0x1c] = (constant) 0x0

/ Tiger has not had the catfood yet
0x005e (0x5c7e): (0x08) Set var[0x1d] = (constant) 0x0

/ NOTE: not used
0x0061 (0x5c81): (0x08) Set var[0x1e] = (constant) 0x0

/ Icicle is not yet loose
0x0064 (0x5c84): (0x08) Set var[0x1f] = (constant) 0x0

/ Player has had zero turns cold so far
0x0067 (0x5c87): (0x08) Set var[0x20] = (constant) 0x0

/ Grate is still on the wall
0x006a (0x5c8a): (0x08) Set var[0x21] = (constant) 0x0

/ Countdown timer of turns for gauntlet to catch fire
0x006d (0x5c8d): (0x08) Set var[0x22] = (constant) 0x14

/ Fallen star is NOT in the inventory
0x0070 (0x5c90): (0x08) Set var[0x23] = (constant) 0x0

/ Matched input word 1 - nothing entered yet
0x0073 (0x5c93): (0x08) Set var[0x24] = (constant) 0x0

/ Matched input word 2 - nothing entered yet
0x0076 (0x5c96): (0x08) Set var[0x25] = (constant) 0x0

/ Matched input word 3 - nothing entered yet
0x0079 (0x5c99): (0x08) Set var[0x26] = (constant) 0x0

/ Matched input word count - nothing entered yet
0x007c (0x5c9c): (0x08) Set var[0x27] = (constant) 0x0

/ Previous matched input word 1 - nothing entered yet but
/ Initialise the last command to "look" in case the first 
/ command the user types is "again"
0x007f (0x5c9f): (0x08) Set var[0x28] = (constant) 0x25

/ Previous matched input word 2 - nothing entered yet but
0x0082 (0x5ca2): (0x08) Set var[0x29] = (constant) 0x0

/ Previous matched input word 3 - nothing entered yet but
0x0085 (0x5ca5): (0x08) Set var[0x2a] = (constant) 0x0

/ Previous matched word count - nothing entered yet but
/ NOTE strange it's not set to 0x01 give the first word
/ is set to "look"
0x0088 (0x5ca8): (0x08) Set var[0x2b] = (constant) 0x0

/ Set the current zone to zone 1
/ var[0x05 is the constant 1
0x008b (0x5cab): (0x09) Set var[0x2c] = var[0x05]

/ Set the flag to say the jester has not appeared yet
/ var[0x0d is the constant 0
0x008e (0x5cae): (0x09) Set var[0x2d] = var[0x0d]

/ Set the player's kneeling status to standing (0x00)
/ NOTE why not set to var[0x0d]?
0x0091 (0x5cb1): (0x08) Set var[0x2e] = (constant) 0x0

/ Set the darkness indicator to dark (0x00)
/ NOTE why not set to var[0x0d]?
0x0094 (0x5cb4): (0x08) Set var[0x2f] = (constant) 0x0

/ NOTE: not used
0x0097 (0x5cb7): (0x08) Set var[0x30] = (constant) 0x0

/ NOTE: not used
0x009a (0x5cba): (0x08) Set var[0x31] = (constant) 0x0

/ Default the number of moves before the candle burns out to 0x00
/ NOTE why not set to var[0x0d]?
0x009d (0x5cbd): (0x08) Set var[0x32] = (constant) 0x0

/ Default the number of moves before the lion kills you in the amphitheatre
/ to 0x01 
/ var[0x05] is the constant 0x01
0x00a0 (0x5cc0): (0x09) Set var[0x33] = var[0x05]

/ Default the status of the lion to free (0x00)
/ NOTE why not set to var[0x0d]?
0x00a3 (0x5cc3): (0x08) Set var[0x34] = (constant) 0x0

/ Set the supplmental message to nothing
0x00a6 (0x5cc6): (0x08) Set var[0x35] = (constant) 0x0

/ Set the cyclical message offset to 0x04
/ var[0x08] is the constant 0x04
0x00a9 (0x5cc9): (0x09) Set var[0x36] = var[0x08]

/ Default the number of moves before the match burns out to 0x00
/ NOTE why not set to var[0x0d]?
0x00ac (0x5ccc): (0x08) Set var[0x37] = (constant) 0x0

/ Default the brontosaurus status to NOT captured in the mirror (0x00)
/ NOTE why not set to var[0x0d]?
0x00af (0x5ccf): (0x08) Set var[0x38] = (constant) 0x0

/ Default the status of the winged sandals to not received (0x00)
/ NOTE why not set to var[0x0d]?
0x00b2 (0x5cd2): (0x08) Set var[0x39] = (constant) 0x0

/ Set the number of carried items to 0x00
/ NOTE why not set to var[0x0d]?
0x00b5 (0x5cd5): (0x08) Set var[0x3a] = (constant) 0x0

/ Default that there is no water in the starting location
/ NOTE why not set to var[0x0d]?
0x00b8 (0x5cd8): (0x08) Set var[0x3b] = (constant) 0x0

/ Default the number of printable objects in the current location to 0x00
/ NOTE why not set to var[0x0d]?
0x00bb (0x5cdb): (0x08) Set var[0x3c] = (constant) 0x0

/ Set the inventory limit to 0x04 (no rucksack yet)
/ var[0x08] is the constant 0x04
0x00be (0x5cde): (0x09) Set var[0x3d] = var[0x08]

/ Set the total count of objects in the current location to 0x00
/ NOTE why not set to var[0x0d]?
0x00c1 (0x5ce1): (0x08) Set var[0x3e] = (constant) 0x0

/ Default the zone 1 kitchen cupboard status to closed (0x00)
/ NOTE why not set to var[0x0d]?
0x00c4 (0x5ce4): (0x08) Set var[0x3f] = (constant) 0x0

/ Default the status of the huge iron bound chest to closed (0x00)
/ NOTE why not set to var[0x0d]?
0x00c7 (0x5ce7): (0x08) Set var[0x40] = (constant) 0x0

/ Default the status of the ottoman to closed (0x00)
/ NOTE why not set to var[0x0d]?
0x00ca (0x5cea): (0x08) Set var[0x41] = (constant) 0x0

/ Default the status of the tin of catfood to closed (0x00)
/ NOTE why not set to var[0x0d]?
0x00cd (0x5ced): (0x08) Set var[0x42] = (constant) 0x0

/ Default the status of the planks to untied (0x00)
/ NOTE why not set to var[0x0d]?
0x00d0 (0x5cf0): (0x08) Set var[0x43] = (constant) 0x0

/ Default the status of the petrol to not poured on the ground (0x00)
/ NOTE why not set to var[0x0d]?
0x00d3 (0x5cf3): (0x08) Set var[0x44] = (constant) 0x0

/ Default the bartender status to having not yet received the nugget (0x00)
/ NOTE why not set to var[0x0d]?
0x00d6 (0x5cf6): (0x08) Set var[0x45] = (constant) 0x0

/ Default the prince status to having not yet received the sword (0x00)
/ NOTE why not set to var[0x0d]?
0x00d9 (0x5cf9): (0x08) Set var[0x46] = (constant) 0x0

/ Default the status of the secret panel to unopened (0x00)
/ NOTE why not set to var[0x0d]?
0x00dc (0x5cfc): (0x08) Set var[0x47] = (constant) 0x0

/ Set current location to 0x01
/ var[0x05] is the constant 0x01
0x00df (0x5cff): (0x09) Set var[0x48] = var[0x05]

/ Set target location to 0x01
/ var[0x05] is the constant 0x01
0x00e2 (0x5d02): (0x09) Set var[0x49] = var[0x48]

/ Default the first message to print between the objects and location exits
/ to 0x00
/ NOTE why not set to var[0x0d]?
/ NOTE later in the game, the code for nothing is actually 0x02 
/ so why not default it to that here? 
0x00e5 (0x5d05): (0x08) Set var[0x4a] = (constant) 0x0

/ Default the second message to print between the objects and location exits
/ to 0x00
/ NOTE why not set to var[0x0d]?
/ NOTE later in the game, the code for nothing is actually 0x02 
/ so why not default it to that here? 
0x00e8 (0x5d08): (0x08) Set var[0x4b] = (constant) 0x0

/ Default the current NPC to none (0x00)
/ NOTE why not set to var[0x0d]?
0x00eb (0x5d0b): (0x08) Set var[0x4c] = (constant) 0x0

/ Default the current NPC size/hit point value to 0x00
/ NOTE why not set to var[0x0d]?
0x00ee (0x5d0e): (0x08) Set var[0x4d] = (constant) 0x0

/ Set the exit flags for the player's requested move direction to none (0x00)
/ NOTE why not set to var[0x0d]?
0x00f1 (0x5d11): (0x08) Set var[0x4e] = (constant) 0x0

/ Set the player's total score to 0x00
/ NOTE why not set to var[0x0d]?
0x00f4 (0x5d14): (0x08) Set var[0x4f] = (constant) 0x0

/ NOTE: not used
0x00f7 (0x5d17): (0x08) Set var[0x50] = (constant) 0x0

/ Default the total number of valid moves and actions to 0x00
/ Not used for anything but recorded
/ NOTE why not set to var[0x0d]?
0x00fa (0x5d1a): (0x08) Set var[0x51] = (constant) 0x0

/ NOTE: not used
0x00fd (0x5d1d): (0x08) Set var[0x52] = (constant) 0x0

/ Default the wood where the wooly mammoth is to "not burning"
/ NOTE why not set to var[0x0d]?
0x0100 (0x5d20): (0x08) Set var[0x53] = (constant) 0x0

/ Default the status of the drinking horn to empty (0x00)
0x0103 (0x5d23): (0x08) Set var[0x54] = (constant) 0x0

/ Default the how "hot" you are in the hypocaust to message 0x125
/ gets incremented until it reaches a real hypocaust message after 
/ a few turns
0x0106 (0x5d26): (0x08) Set var[0x55] = (constant) 0x125

/ Reset the general temporary variable to 0x00
0x010a (0x5d2a): (0x08) Set var[0x56] = (constant) 0x0

/ Default the delay loop counter for "Time goes by" to 0x00
/ NOTE why not set to var[0x0d]?
0x010d (0x5d2d): (0x08) Set var[0x57] = (constant) 0x0

/ NOTE: not used
0x0110 (0x5d30): (0x08) Set var[0x58] = (constant) 0x0

/ Default the inspection panel status to closed (0x00)
/ NOTE why not set to var[0x0d]?
0x0113 (0x5d33): (0x08) Set var[0x59] = (constant) 0x0

/ Default the abandoned hope status to 0x00
/ NOTE why not set to var[0x0d]?
0x0116 (0x5d36): (0x08) Set var[0x5a] = (constant) 0x0

/ Default the number of turns since the player abandoned hope to 0x00
/ NOTE why not set to var[0x0d]?
0x0119 (0x5d39): (0x08) Set var[0x5b] = (constant) 0x0

/ Default the poison bottle dug out status to not dug
/ NOTE why not set to var[0x0d]?
0x011c (0x5d3c): (0x08) Set var[0x5c] = (constant) 0x0

/ Default the cages (in the experimental lab) status to closed (0x00)
/ NOTE why not set to var[0x0d]?
0x011f (0x5d3f): (0x08) Set var[0x5d] = (constant) 0x0

/ Default the bars (in the worse laborartory) status to closed (0x00)
/ NOTE why not set to var[0x0d]?
0x0122 (0x5d42): (0x08) Set var[0x5e] = (constant) 0x0

/ Default the number of times the player has been eaten by the plant to 0x00
/ NOTE why not set to var[0x0d]?
0x0125 (0x5d45): (0x08) Set var[0x5f] = (constant) 0x0

/ Default the cauldron complete status to incomplete (0x00)
/ NOTE why not set to var[0x0d]?
0x0128 (0x5d48): (0x08) Set var[0x60] = (constant) 0x0

/ Holds the random seed number
/ NOTE never used!
0x012b (0x5d4b): (0x08) Set var[0x61] = (constant) 0x0

/ Default the number of times the player has been killed to 0x00
0x012e (0x5d4e): (0x08) Set var[0x62] = (constant) 0x0

/ NOTE Above duplicated here (see comments above)
0x0131 (0x5d51): (0x08) Set var[0x59] = (constant) 0x0
0x0134 (0x5d54): (0x08) Set var[0x5a] = (constant) 0x0
0x0137 (0x5d57): (0x08) Set var[0x5b] = (constant) 0x0
0x013a (0x5d5a): (0x08) Set var[0x5c] = (constant) 0x0
0x013d (0x5d5d): (0x08) Set var[0x5d] = (constant) 0x0
0x0140 (0x5d60): (0x08) Set var[0x5e] = (constant) 0x0
0x0143 (0x5d63): (0x08) Set var[0x5f] = (constant) 0x0
0x0146 (0x5d66): (0x08) Set var[0x60] = (constant) 0x0
0x0149 (0x5d69): (0x08) Set var[0x61] = (constant) 0x0
0x014c (0x5d6c): (0x08) Set var[0x62] = (constant) 0x0

/ Default the number of matches in the matchbox to 0x04
/ var[0x08] is the constant 0x04
0x014f (0x5d6f): (0x09) Set var[0x63] = var[0x08]

**************************************************************************
* Set object default locations
**************************************************************************
*
* Loop around each object that has an id between $50 and $eb and
* set the default location in working (changeable) memory
*
* On a BBC micro, working (changeable) memory is $0500 + object id
* 
* There are special locations i.e.
*
* 0x01 - Location 1   - First room, starting location "in your own living room"
* 0x02 - Location 2   - "in a large, cold looking room"
* ...
* 0xdb - Location 219 - Last real location "lost in the mists of time"
* 0xdc - Status messages
* ...  
* 0xeb - Status messages
* 0xe1 - Items that are in the inventory are here
* 0xe2 - Items that are currently worn are here
* 0xfe - Undiscovered e.g. pile of family rubbish has not been searched yet to find the tin opener
* 0xff - Hidden items (disappeared/used/destroyed/temporary being processed
*        and removed from game)
*
**************************************************************************
* Initalise default working location for each object in the game
**************************************************************************
/ First object has id of 0x50
/ Get the object's default location from the immutable list#1 
/ (0x1db0 + object id so starts at 0x1E00 for the first object)
0x0152 (0x5d72): (0x08) Set var[0x17] = (constant) 0x50

/ Get the object's default location from the list#1
0x0155 (0x5d75): (0xa1) Set var[0x18] = list#1[var[0x17]] (list address 0x1db0)

/ Set the object's working location in list#2 to the default location
0x0158 (0x5d78): (0xe2) Set list#2[var[0x17]] = var[0x18] (list address 0x0500)

/ Increment the object id by 0x01 to move to the next object
0x015b (0x5d7b): (0x0a) Set var[0x17] += var[0x05]

/ If there are still objects left to initialise to their default location
/ then loop back around (only finished when the object id reaches 0xec)
0x015e (0x5d7e): (0x1a) If var[0x17] < (constant) 0xec then Goto 0x0155

/ Set the target location to match the current location
/ and check if it's dark and if so if the player has anything that 
/ can make it light
0x0162 (0x5d82): (0x00) Goto 0x022a

**************************************************************************
* Check to see if it's dark in the location and if they player has 
* anything to make it light 
**************************************************************************

/ Check to see if it's dark
0x0165 (0x5d85): (0x01) Gosub 0x133e

/ If the darkness indicator is set to light (0x01) branch ahead
/ to display the location description
0x0168 (0x5d88): (0x13) If var[0x2f] > var[0x0d] then Goto 0x0171

/ It's set to dark (0x00)   

/ Print message "It's dark!\n\n"
0x016c (0x5d8c): (0x05) Print message (constant) 0xbe

/ Set the target location to match the current location
/ and check if it's dark and if so if the player has anything that 
/ can make it light
0x016e (0x5d8e): (0x00) Goto 0x022a

**************************************************************************
* Print location description
**************************************************************************
* Location descriptions are from 0x190 in the messages so this 
* adds 0x190 to the room id to get the message id for the description e.g.
* for location 1, 0x191 = in your own living room
**************************************************************************
/ Set the base message id for locations (0x190)
0x0171 (0x5d91): (0x08) Set var[0x56] = (constant) 0x190

/ Add location id to the base message number for locations (0x190)
0x0175 (0x5d95): (0x0a) Set var[0x56] += var[0x48]

/ Print message "You are \n"
0x0178 (0x5d98): (0x05) Print message (constant) 0x18

/ Print the single object in this location
0x017a (0x5d9a): (0x04) Print message var[0x56]

/ Print message ".\n\n"
0x017c (0x5d9c): (0x05) Print message (constant) 0x04

/ Set the target location to the be the current location
0x017e (0x5d9e): (0x09) Set var[0x49] = var[0x48]

/ Set the message id to the message "You can see\n" (0x1b)
/ This is printed before the object descriptions
0x0181 (0x5da1): (0x08) Set var[0x35] = (constant) 0x1b

/ Print the objects in the current location
0x0184 (0x5da4): (0x01) Gosub 0x1552

/ Print any supplemental message between the list of objects
/ and list of exits. Normally defaults to message "" (0x02)
/ which is no text.  But in some places it's the 
/ one of the messages 0x12c - 0x133 (apart from 0x131)
/ but mostly it's "" (0x02)
0x0187 (0x5da7): (0x04) Print message var[0x4a]

/ Print message "\n\n"
0x0189 (0x5da9): (0x05) Print message (constant) 0x05   

/ Print second supplemental message between the list of objects
/ and list of exits. Only set to either "" (0x02) or "planks
/ bridge the stream" (0x12e) or "the dinosaur approaches
/ menacingly" (0x131).  Mostly it's "".
0x018b (0x5dab): (0x04) Print message var[0x4b]

/ Print message "\n\n"
0x018d (0x5dad): (0x05) Print message (constant) 0x05

/ If the petrol has NOT been poured onto the ground in this location
/ branch ahead.  Note that as soon as the player moves location,
/ this flag is reset to zero.
/ var[0x0d] is the constant 0x00
0x018f (0x5daf): (0x10) If var[0x44] == var[0x0d] then Goto 0x0196

/ Player poured petrol on the ground

/ Print message "Petrol soaks into the ground."
0x0193 (0x5db3): (0x05) Print message (constant) 0x105

/ Print the exits
0x0196 (0x5db6): (0x1a) If var[0x14] < (constant) 0x11f then Goto 0x01a3
0x019b (0x5dbb): (0x04) Print message var[0x14]
0x019d (0x5dbd): (0x1b) If var[0x14] > (constant) 0x120 then Goto 0x11f1

**************************************************************************
* Count valid (displayable) directions from current location
**************************************************************************

/ Count of valid (displayable) directions
0x01a3 (0x5dc3): (0x09) Set var[0x1b] = var[0x0d]

/ Initialise the current direction to 0x01 (North)
/ All 16 will be looped through 
0x01a6 (0x5dc6): (0x09) Set var[0x10] = var[0x05]

/ When checking a room for an exit
/ 0x48 - current location
/ 0x10 - direction to consder moving
/ 0x49 - set on return - target location if move possible (0x00 otherwise)
/ 0x4e - set on return - exit flags if move possible
0x01a9 (0x5dc9): (0x0f) Exits - check location var[0x48] can move var[0x10] - exit flags in var[0x4e] and target location (or 0x00) in var[0x49]

/ If the target location is 0x00 then the direction is not possible,
/ so skip ahead and process
0x01ae (0x5dce): (0x10) If var[0x49] == var[0x0d] then Goto 0x01c0

/ Bit 4 - last direction available in the exits list for a particular location
/ Bit 3 - Door is in this direction
/ Bit 2 - Hide (set) or show this direction (not set)
/ Bit 1 - not applicable here (whether the exits code could use this for reverse location lookup)

/ If bit 4 isn't set then branch ahead (BBC Micro doesn't set this anyway)
/ Bit 4 indicates this was the last processed direction for a paritcular
/ location so is not required by the a-code, only the virtual machine
/ so it's not passed to the a-code
0x01b2 (0x5dd2): (0x12) If var[0x4e] < var[0x08] then Goto 0x01b9

/ Bit 4 is set so remove it and only leave bits 1-3 as returned
0x01b6 (0x5dd6): (0x0b) Set var[0x4e] -= var[0x08]

/ If either bit 2 or 3 are set in the exit flags, skip ahead
/ because it ignores hidden directions and also directions with
/ doors in this loop.  Doors processed in another loop later.
0x01b9 (0x5dd9): (0x1b) If var[0x4e] > (constant) 0x01 then Goto 0x01c0

/ Increment the count of valid directions for this location
0x01bd (0x5ddd): (0x0a) Set var[0x1b] += var[0x05]

/ Check the next direction by adding 0x01
/ e.g. if we just checked North (0x01) then the next one we'll 
/ check is North East (0x02)
0x01c0 (0x5de0): (0x0a) Set var[0x10] += var[0x05]

/ If we haven't processed all of the directions from North (0x01)
/ to Jump (0x0F) then loop back around and check the next direction
/ from this location
0x01c3 (0x5de3): (0x1a) If var[0x10] < (constant) 0x10 then Goto 0x01a9

/ If there are zero valid (displayable) directions for this location 
/ (after checking) them all, then skip ahead.
0x01c7 (0x5de7): (0x10) If var[0x1b] == var[0x0d] then Goto 0x0227

/ At least one valid (displayable) direction

/ Reset the counter for which valid (displayable) exit is being processed
/ used to work out when to put commas or " and " etc
/ (var[0x0d] is constant and set to 0x00)
0x01cc (0x5dec): (0x09) Set var[0x19] = var[0x0d]

/ Reset the current direction to check to "North" (0x01)
/ (var[0x05] is constant and set to 0x01)
0x01cf (0x5def): (0x09) Set var[0x10] = var[0x05]

/ Check to see if the current direction (0x48) is possible from the current location (0x10)
/ When checking a room for an exit
/ 0x48 - direction to consder moving
/ 0x10 - current location
/ 0x4E - set on return - exit flags if move possible
/ 0x49 - set on return - target location if move possible (0x00 otherwise)
0x01d2 (0x5df2): (0x0f) Exits - check location var[0x48] can move var[0x10] - exit flags in var[0x4e] and target location (or 0x00) in var[0x49]

/ If the target location is 0x00 then the direction is not possible,
/ so skip ahead and process the next direction
/ (var[0x0d] is a constant 0x00)
0x01d7 (0x5df7): (0x10) If var[0x49] == var[0x0d] then Goto 0x021e

/ Assign the exit flags to a tenporary variable
0x01dc (0x5dfc): (0x09) Set var[0x56] = var[0x4e]

/ If bit 4 isn't set then branch ahead (NOTE BBC Micro doesn't set this anyway)
/ Bit 4 indicates this was the last processed direction for a paritcular
/ location so is not required by the a-code, only the virtual machine
0x01df (0x4bff): (0x12) If var[0x56] < var[0x08] then Goto 0x01e6

/ Clear bit 4 by subtracting 0x08 (0b1000)
0x01e3 (0x5e03): (0x0b) Set var[0x56] -= var[0x08]

/ Check to see if bit 2 (hide the exit) or bit 3 (through a door) are set
/ If so branch ahead and process
0x01e6 (0x5e06): (0x1b) If var[0x56] > (constant) 0x01 then Goto 0x021e

/ Not a door or a hidden exit

/ Increment the count of "normal" exits (not hidden or through a door)
/ (var[0x05] is constant and set to 0x01)
0x01eb (0x5e0b): (0x0a) Set var[0x19] += var[0x05]

/ Try and print a comma (called routine will check if this is the)
/ last to process exit and skip if so
/ (var[0x05] is constant and set to 0x01)
0x01ee (0x5e0e): (0x13) If var[0x19] > var[0x05] then Goto 0x0200

/ Print two new lines "\n\n"
0x01f2 (0x5e12): (0x05) Print message (constant) 0x05

/ If there are at least two valid (displayable) exits, branch ahead
/ to process multiple exits
0x01f4 (0x5e14): (0x13) If var[0x1b] > var[0x05] then Goto 0x01fc

**************************************************************************
* Only a single exit is possible - print "The only visible exit is"
**************************************************************************

/ Only a single displayable exit

/ Print message "The only visible exit is "
0x01f8 (0x5e18): (0x05) Print message (constant) 0x46

/ Print the current exit e.g. "North" or "Up"
0x01fa (0x5e1a): (0x00) Goto 0x020a

**************************************************************************
* Multiple Exits possible - print "Exits are "
**************************************************************************

/ Multiple displayable exits possible

/ Print message "Exits are "
0x01fc (0x5e1c): (0x05) Print message (constant) 0x15

/ Print the current exit e.g. "North" or "Up"
0x01fe (0x5e1e): (0x00) Goto 0x020a

**************************************************************************
* Print a comma before the current exit
**************************************************************************

/ If this is the last valid (displayable) direction, skip printing a comma
/ and call the routine to print "and" instead 
0x0200 (0x5e20): (0x10) If var[0x19] == var[0x1b] then Goto 0x0208

/ Print message ", "
0x0204 (0x5e24): (0x05) Print message (constant) 0x03

/ Print the current exit e.g. "North" or "Up"
0x0206 (0x5e26): (0x00) Goto 0x020a

**************************************************************************
* Print the word "and" before the current exit
**************************************************************************

/ Print message " and "
0x0208 (0x5e28): (0x05) Print message (constant) 0x06

/ Print the current exit e.g. "North" or "Up"

**************************************************************************
* Print valid direction description
**************************************************************************

/ Exit message descriptions are number from 0x8 to 0x14 however
/ directions start from 0x01 to 0x0d so 0x07 must be added to get th
/ Exit message description id = exit id + 0x07
/ var[0x10] must contain current location direction under consideration
0x020a (0x5e2a): (0x08) Set var[0x35] = (constant) 0x7

/ Add the direction id to the constant to get the right message description
0x020d (0x5e2d): (0x0a) Set var[0x35] += var[0x10]

/ Print direction e.g. "north" or "across"
0x0210 (0x5e30): (0x04) Print message var[0x35]

/ Exits only sets bits 1-3 in var[4e]
/ Bit 3 indicates if there is a door in this direction 
/ If the response from the Exits command in var[0x4e] is less than
/ 0x04 then there isn't a door so skip ahead
0x0212 (0x5e32): (0x1a) If var[0x4e] < (constant) 0x04 then Goto 0x021e

/ There is a door in this direction 

/ So work out if to print the "(through a door)" or 
/ "(through an open door)" message by adding the door open
/ status from var[0x0f] which is set to 0x00 or 0x01
0x0216 (0x5e36): (0x08) Set var[0x56] = (constant) 0x16

/ Add zero or one to the message id depending on if the door is open or closed
0x0219 (0x5e39): (0x0a) Set var[0x56] += var[0x0f]

/ Print either (through a door) or (through an open door)
0x021c (0x5e3c): (0x04) Print message var[0x56]

/ Add 0x01 to the current direction/exit
0x021e (0x5e3e): (0x0a) Set var[0x10] += var[0x05]

/ Check to see if all directions/exits have been processed, if not Loop
/ back around and process the next one
0x0221 (0x5e41): (0x1a) If var[0x10] < (constant) 0x10 then Goto 0x01d2

/ All directions/exits processed so finish with a full stop

/ Print message "."
0x0225 (0x5e45): (0x05) Print message (constant) 0x07

/ Reset the target location (0x49) to be the same as the current location (0x48)
/ NOTE not required as it's done after this
0x0227 (0x5e47): (0x09) Set var[0x49] = var[0x48]

**************************************************************************
* Main entry point for 6 pieces of code
* Location specific checks
**************************************************************************

/ Reset the target location (0x49) to be the same as the current location (0x48)
0x022a (0x5e4a): (0x09) Set var[0x49] = var[0x48]

/ 1. Check to see if it's light or dark
/ 2. Find the first NPC (if any) in the player's location and look up its hit points
/ 3. Reset the first and second supplmental messsage ids to blanks (0x02)
/ 3. Check if the player is by "the polluted stream" and if the bplanks are tied 
/    if so set an additional message id to display in var[0x04b] (second supplemental message)
/ 4. Check if the player is in the silver veined cave and if the ice is still blocking
/    if so set an additional message id to display in var[0x04a] (first supplemental message)
0x022d (0x5e4d): (0x01) Gosub 0x133e

/ Set the flag that indicate whether the player is carrying the fallen star
/ to 0x00 - var[0x0d] is the constant 0x00
0x0230 (0x5e50): (0x09) Set var[0x23] = var[0x0d]

/ If the current NPC is NOT the mammoth, branch ahead to the SAME line 
/ of code that follows this one for when it is the mammoth... so effectively
/ this does nothing
0x0233 (0x5e53): (0x19) If var[0x4c] != (constant) 0xca then Goto 0x0237

/ Current non-player character in the current location is the Mammoth (0xca)

/ Weird logic as regardless of NPC the code will end up here even if it's
/ the mammoth or not the mammoth.
0x0237 (0x5e57): (0x19) If var[0x4c] != (constant) 0xcb then Goto 0x0256

/ Current NPC is the tiger

/ Check to see if the tiger has been given the tin of catfood
/ if it has it won't attack the player so branch ahead
/ var[0x0d] is the constant 0x00
0x023b (0x5e5b): (0x13) If var[0x1d] > var[0x0d] then Goto 0x024f

**************************************************************************
* Checks if the tiger attacks the player
**************************************************************************
/ Set the variable to be the "spear" (0x71)
0x023f (0x5e5f): (0x08) Set var[0x17] = (constant) 0x71

/ Get the current location of the "spear" (0x71)
0x0242 (0x5e62): (0xa2) Set var[0x18] = list#2[var[0x17]] (list address 0x0500)

/ Check to see if the "spear" is in the player's inventory
/ (var[0x09] is the constant for the inventory code 0xE1)
0x0245 (0x5e65): (0x10) If var[0x18] == var[0x09] then Goto 0x0256

/ Spear is NOT in the player's inventory

/ Print message "You have no spear! The tiger attacks.."
0x0249 (0x5e69): (0x05) Print message (constant) 0x103

/ Kill the player
0x024c (0x5e6c): (0x00) Goto 0x11f1

**************************************************************************
* Print the tiger sore tooth cyclic message
**************************************************************************

/ Set the base message to "the tiger purrs deafeningly" (0x14f)
/ This is the base message for the tiger and each time there is a look
/ in the location, the message cycles around 0x14f - 0x151
0x024f (0x5e6f): (0x08) Set var[0x35] = (constant) 0x14f

/ Call the routine that cycles the messages between so that 
/ any message between 0x1d - 0x1f is shown. Options are:
/ 1. The tiger purrs deafeningly                  (0x14f)
/ 2. The tiger pats one puffy cheek with a paw    (0x150)
/ 3. The tiger winces and roars quietly           (0x151)
/ Message is chosen based on the value of var[0x36] that cycles through
/ 0-2 everytime the routine is called (not just here)
0x0253 (0x5e73): (0x01) Gosub 0x16c3

**************************************************************************
* Check to see if a match has burnt out or lights the petrol
**************************************************************************

/ If there is NOT a match burning currently skip ahead
0x0256 (0x5e76): (0x10) If var[0x37] == var[0x0d] then Goto 0x0272

/ Reduce the number of turns by 0x01 that the match has left to burn
0x025a (0x5e7a): (0x0b) Set var[0x37] -= var[0x05]

/ If the match is still has remaining turns left to burn, branch ahead
0x025d (0x5e7d): (0x13) If var[0x37] > var[0x0d] then Goto 0x0272

/ Match has burnt out

/ Set the working object id to "matches"/"matchbox" 0x6b
0x0261 (0x5e81): (0x08) Set var[0x17] = (constant) 0x6b

/ Get the current location of the matches/matchbox
0x0264 (0x5e84): (0xa2) Set var[0x18] = list#2[var[0x17]] (list address 0x0500)

/ If the matchbox is in the inventory (0xe1)
0x0267 (0x5e87): (0x10) If var[0x18] == var[0x09] then Goto 0x026f
0x026b (0x5e8b): (0x11) If var[0x18] != var[0x49] then Goto 0x0272

/ Matchbox/matches are in the inventory or current location

/ Print message "The petrol burns up with a whoosh!"
0x026f (0x5e8f): (0x05) Print message (constant) 0x10e

**************************************************************************
* Print the candle burning messages
**************************************************************************

/ When lit the candle burns for 0xc8 (200) turns
/ Decrement this on every turn
/ Print "The candle flickers" if the number of turns left is < 16
/ and the candle is in the player's inventory or current location

/ Branch ahead if the candle is not burning (0x00)
/ var[0x0d] is the constant 0x00
0x0272 (0x5e92): (0x10) If var[0x32] == var[0x0d] then Goto 0x0298

/ Reduce the number of turns left for the candle to burn by 0x01
/ var[0x05] is the constant 0x01
0x0276 (0x5e96): (0x0b) Set var[0x32] -= var[0x05]

/ Branch if there are more than 15 turns left for the candle to burn
0x0279 (0x5e99): (0x1b) If var[0x32] > (constant) 0x0f then Goto 0x0298

/ Set the second word to candle (0x7a)
0x027d (0x5e9d): (0x08) Set var[0x25] = (constant) 0x7a

/ Get the current location of the candle
0x0280 (0x5ea0): (0xa2) Set var[0x18] = list#2[var[0x25]] (list address 0x0500)

/ Branch if the current location of the candle is in the inventory (0xe1)
/ and say that the candle flickers
0x0283 (0x5ea3): (0x10) If var[0x18] == var[0x09] then Goto 0x028b

/ Branch if the candle is NOT in the player's current location
0x0287 (0x5ea7): (0x11) If var[0x18] != var[0x49] then Goto 0x0298

/ Candle is in the inventory or current location

/ Print message "\nThe candle flickers\n"
0x028b (0x5eab): (0x05) Print message (constant) 0x110

/ If the candle's status is > 0 it's still alight so skip ahead
0x028e (0x5eae): (0x13) If var[0x32] > var[0x0d] then Goto 0x0298

/ Print message "And goes out.\n\n"
0x0292 (0x5eb2): (0x05) Print message (constant) 0x10f

/ Remove the candle from the game by setting its location to 0xff
0x0295 (0x5eb5): (0x01) Gosub 0x1625

**************************************************************************
* Check if the player is cold
**************************************************************************

/ Increment the "number of turns the player has been cold"
/ var [0x05] is the constant 0x01
0x0298 (0x5eb8): (0x0a) Set var[0x20] += var[0x05]

/ Check to see if the player is in the second zone and between 
/ "standing on splintered ice in a deep valley..." (0x1a) and
/ "swimming in freezing water" (0x30). If they are not, branch ahead
/ to reset the cold indicator to zero
0x029b (0x5ebb): (0x1b) If var[0x49] > (constant) 0x30 then Goto 0x02b2
0x029f (0x5ebf): (0x1a) If var[0x49] < (constant) 0x1a then Goto 0x02b2

/ Branch if the current working object id is 0x130
/ NOTE this can never be true as verbs/objects/NPCs go from 0x01 to 0xfd
/ and var[0x17] will always be set to (at least) the spear (0x71) or matches
/ etc from previous checks. I believe this should be:
/                       If var[0x4a] == (constant) 0x130 then Goto 0x02b2
/ As that holds the supplmental messages for the location e.g. 
/ "The wood burns warmly" (0x130)
0x02a3 (0x5ec3): (0x18) If var[0x17] == (constant) 0x130 then Goto 0x02b2

/ Set the working object id to the "fur coat"
0x02a8 (0x5ec8): (0x08) Set var[0x17] = (constant) 0x7e

/ Get the location of the "fur coat"
0x02ab (0x5ecb): (0xa2) Set var[0x18] = list#2[var[0x17]] (list address 0x0500)

/ If the player is NOT wearing the fur coat, branch ahead to 
/ see how cold they are
0x02ae (0x5ece): (0x11) If var[0x18] != var[0x0a] then Goto 0x02b8

/ Wearing the fur coat

/ Reset the "number of turns the player has been cold" to zero
/ as the player is wearing the fur coat, or is not in the a cold location
/ 
/ var [0x0d] is the constant 0x00
0x02b2 (0x5ed2): (0x09) Set var[0x20] = var[0x0d]

/ Skip ahead to he next check
0x02b5 (0x5ed5): (0x00) Goto 0x02c4

/ If the player has been in the cold for less than 10 turns, then branch
/ ahead (they don't feel cold yet)
0x02b8 (0x5ed8): (0x1a) If var[0x20] < (constant) 0x0a then Goto 0x02c4

/ Player has been in the cold for 10 or more turns

/ Print message "\nYou feel very cold!\n"
0x02bc (0x5edc): (0x05) Print message (constant) 0x111

/ If the player has had more than 16 (0x0f) turns in the cold, 
/ kill the player
0x02bf (0x5edf): (0x1b) If var[0x20] > (constant) 0x0f then Goto 0x11f1

**************************************************************************
* Check the location of the tyrannosaurus and allosaurus
**************************************************************************

/ If the message id isn't for the message "The dinosaur approaches menacingly" (0x131)
/ then skip ahead
0x02c4 (0x5ee4): (0x19) If var[0x4b] != (constant) 0x131 then Goto 0x02fb

/ Set the working object id to the "allosaurus"
0x02c9 (0x5ee9): (0x08) Set var[0x17] = (constant) 0xcc

/ Get the current location of the "allosaurus"
0x02cc (0x5eec): (0xa2) Set var[0x56] = list#2[var[0x17]] (list address 0x0500)

/ Set the current working object to the "tyrannosaurus" 
0x02cf (0x5eef): (0x08) Set var[0x18] = (constant) 0xcd

/ Get the current location of the "tyrannosaurus"
0x02d2 (0x5ef2): (0xa2) Set var[0x57] = list#2[var[0x18]] (list address 0x0500)

/ Is the "tyrannosaurus" in the same location as the "allosaurus"?  If not,
/ branch ahead
0x02d5 (0x5ef5): (0x11) If var[0x56] != var[0x57] then Goto 0x02e7

/ Dinosaurs are in the same location

/ Print message "The killer dinosaurs kill each other"
0x02d9 (0x5ef9): (0x05) Print message (constant) 0x142

/ Destroy the "allosaurus" by setting it's location to 0xff
/ which is the constant stored in var[0xc]
0x02dc (0x5efc): (0xe2) Set list#2[var[0x17]] = var[0xc] (list address 0x0500)

/ Destroy the "tyrannosaurus" by setting it's location of 0xff
0x02df (0x5eff): (0xe2) Set list#2[var[0x18]] = var[0xc] (list address 0x0500)

/ Check to see if it's dark or light in the current location
0x02e2 (0x5f02): (0x01) Gosub 0x133e

/ Move on to checking the cavemen behaviour etc
0x02e5 (0x5f05): (0x00) Goto 0x02fb

/ If the number of moves until the tyrannosaurus kills you is not zero,
/ it's already been initialised so skip ahead
/ var[0x0d] is the constant 0
0x02e7 (0x5f07): (0x13) If var[0x13] > var[0x0d] then Goto 0x02ee

/ Set the number of moves to the default of 0x06 moves/commands
0x02eb (0x5f0b): (0x08) Set var[0x13] = (constant) 0x6

/ Subtract one from the remaining number of moves 
0x02ee (0x5f0e): (0x0b) Set var[0x13] -= var[0x05]

/ If the remaining number of moves is greater than zero, 
/ branch ahead
0x02f1 (0x5f11): (0x13) If var[0x13] > var[0x0d] then Goto 0x02fb

/ No moves left

/ Print message "The dinosaur kills you"
0x02f5 (0x5f15): (0x05) Print message (constant) 0x141

/ Kill the player
0x02f8 (0x5f18): (0x00) Goto 0x11f1

**************************************************************************
* Cavemen behaviour
**************************************************************************

/ When you enter the cave in the area behind cog 3, var[0x01] is used
/ to track the behaviour of the cavemen - it defaults to 0x10f and is 
/ incremented each time you stay with them. You have 2 free turns until
/ the messages start to appear about their behaviour (messages 0x112-0x115)
/ If the message number reaches 0x115, they attack the player and the player
/ is killed.  The player can also be killed by going North in the cave/
/ before the cavemen have been scared away (processed later in the A-code).

/ Add 1 to the caveman behaviour counter
0x02fb (0x5f1b): (0x0a) Set var[0x01] += var[0x05]

/ If the current NPC is the cavemen (0xcf), branch ahead and process
/ the cavemen behaviour
0x02fe (0x5f1e): (0x18) If var[0x4c] == (constant) 0xcf then Goto 0x0306

/ Current NPC is NOT the cavemen (the player is not in the same location
/ as the cavement i.e. in the cave)

/ Reset the cavemen behaviour counter to 0x10f
0x0302 (0x5f22): (0x08) Set var[0x01] = (constant) 0x10f

/ No behaviour to print if the cavemen behaviour counter is less than 0x112 
/ (0x112 is the first message that details their behaviour) so branch ahead
/ if so
0x0306 (0x5f26): (0x1a) If var[0x01] < (constant) 0x112 then Goto 0x0313

/ Cavemen behaviour message to print

/ Cavemen behaviour is escalating... print a message based on the id in var[0x01]
0x030b (0x5f2b): (0x04) Print message var[0x01]

/ If the cavemen message id goes beyond 0x114 ("The cavemen advance, waving sticks")
/ then "The cavemen attack!" and the player is killed so branch ahead to the 
/ print "You've been killed" and process
0x030d (0x5f2d): (0x1b) If var[0x01] > (constant) 0x114 then Goto 0x11f1

/ Cavemen have NOT yet attacked the player

**************************************************************************
* Black Knight behaviour
**************************************************************************

/ Add 1 to the Black Knight behaviour counter
0x0313 (0x5f33): (0x0a) Set var[0x02] += var[0x05]

/ If the current NPC is the Black Knight (0xd6), branch ahead and process
/ the Black Knight's behaviour
0x0316 (0x5f36): (0x18) If var[0x4c] == (constant) 0xd6 then Goto 0x0320

/ Player is NOT in the same location as the Black Knight

/ Reset the Black Knight Behaviour Counter to 0x116 
0x031a (0x5f3a): (0x08) Set var[0x02] = (constant) 0x116

/ Branch ahead to check the next NPC
0x031e (0x5f3e): (0x00) Goto 0x036e

/ Player IS in the same location as the Black Knight

/ Print the current behaviour message for the Black Knight (0x117-0x11a)
0x0320 (0x5f40): (0x04) Print message var[0x02]

/ If the Black Knight is not yet attacking the player, branch ahead
0x0322 (0x5f42): (0x1a) If var[0x02] < (constant) 0x119 then Goto 0x036e

/ If the Black knight is attacking again (0x119) then the player is killed
/ so branch ahead and processs that
0x0327 (0x5f47): (0x1b) If var[0x02] > (constant) 0x119 then Goto 0x11f1

/ Player is still alive

/ Set the working object id to the armour (0x5a)
0x032d (0x5f4d): (0x08) Set var[0x17] = (constant) 0x5a

/ Get the location of the armour
0x0330 (0x5f50): (0xa2) Set var[x18] = list#2[var[0x17]] (list address 0x0500)

/ Check to see if the player is wearing the armour (the location will be 
/ set to the constant value in var[0x18] which is 0xe2).  
/ If the player is NOT wearing the armour then the player is killed so 
/ branch ahead and process that
0x0333 (0x5f53): (0x11) If var[0x18] != var[0x0a] then Goto 0x11f1

/ Player is wearing the armour

/ Print message "but the armour protects you."
0x0338 (0x5f58): (0x05) Print message (constant) 0x11b

/ Set the working object to the prince (0xd7)
0x033b (0x5f5b): (0x08) Set var[0x25] = (constant) 0xd7

/ Get the location of the prince
0x033e (0x5f5e): (0xa2) Set var[0x18] = list#2[var[0x25]] (list address 0x0500)

/ If the prince's location is NOT the same as the player's 
0x0341 (0x5f61): (0x11) If var[0x18] != var[0x49] then Goto 0x036e

/ Prince is in the same location as the player 

/ Print message "The prince leaps to your defence "
0x0345 (0x5f65): (0x05) Print message (constant) 0x11c

/ Remove the prince from the game by setting his location to 0xff
0x0348 (0x5f68): (0x01) Gosub 0x1625

/ Set the working object id to the sword (0x89)
0x034b (0x5f6b): (0x08) Set var[0x17] = (constant) 0x89

/ Get the current location of the sword
0x034e (0x5f6e): (0xa2) Set var[0x18] = list#2[var[0x17]] (list address 0x0500)

/ Check to see if the sword has been given (0x01) to the prince or not (0x00)
/ Branch ahead if it has, he can kill the Black Knight
/ var[0x0d] is the constant 0x00
0x0351 (0x5f71): (0x13) If var[0x46] > var[0x0d] then Goto 0x0362

/ Sword has NOT been given to the prince

/ Check to see if the sword is in the player's current location - if so skip ahead
/ and print the "and kills the evil Black Knight......" message. The sword can either
/ be dropped here or given earlier to the prince who brings it here
/ Current location is held in var[0x48]
0x0355 (0x5f75): (0x10) If var[0x18] == var[0x48] then Goto 0x0362

/ Check to see if the sword is in the player's inventory - if so skip ahead
/ and print the "and kills the evil Black Knight......" message
/ Inventory location code is held as a constant in var[0x09]
0x0359 (0x5f79): (0x10) If var[0x18] == var[0x09] then Goto 0x0362

/ Print message "but can find no sword and is killed easily."
0x035d (0x5f7d): (0x05) Print message (constant) 0x11d

/ Move to next set of checks (the two hunting dogs)
/ NOTE: weird it goes to the hunting dogs check and not the light/dark checks
0x0360 (0x5f80): (0x00) Goto 0x036e

/ Print message "and kills the evil Black Knight. He carries the body away"
0x0362 (0x5f82): (0x05) Print message (constant) 0x11e

/ Remove the prince from the game by setting his location to 0xff
/ which is the constant stored in var[0xc]
/ NOTE: this is redundant as he's already been removed from the game at 0x0348
0x0365 (0x5f85): (0xe2) Set list#2[var[0x4c]] = var[0xc] (list address 0x0500)

/ Remove the sword from the game by setting its location to 0xff
/ which is the constant stored in var[0xc] (it's the current working object
/ held in var[0x17])
0x0368 (0x5f88): (0xe2) Set list#2[var[0x17]] = var[0xc] (list address 0x0500)

/ Move to the light/dark checks
0x036b (0x5f8b): (0x01) Gosub 0x133e

**************************************************************************
* Two hunting dogs messages - in the bedroom of the master of the house
**************************************************************************

/ If the player is not in the same location as the hunting dogs (0xe3), branch ahead
0x036e (0x5f8e): (0x19) If var[0x4c] != (constant) 0xe3 then Goto 0x037d

/ Player is in the same location as the hunting dogs

/ Print the noise the hunting dogs make (gets progressively more 
/ aggressive if you don't give them the sweetmeats). var[0x16] holds the
/ message id to display.  Messages are between 0x138 (default) through to 
/ 0x13a (Guards arrive)
0x0372 (0x5f92): (0x04) Print message var[0x16]

/ If this is the "guards arrive message" then kill the player
0x0374 (0x5f94): (0x18) If var[0x16] == (constant) 0x13a then Goto 0x11f1

/ Move to the next message next time around (angrier dogs)
0x037a (0x5f9a): (0x0a) Set var[0x16] += var[0x05]

**************************************************************************
* Check to see if Pirate Pete is stealing anything
**************************************************************************

/ Branch if the NPC is NOT Pirate Pete
0x037d (0x5f9d): (0x19) If var[0x4c] != (constant) 0xd8 then Goto 0x03ab

/ NPC is Pirate Pete - loop through the objects from the "olive branch" to 
/ find something to steal. Will steal the item with the lowest id that is in the
/ inventory or worn by the player

/ Set the initial object to the "olive branch" (0x50)
0x0381 (0x5fa1): (0x08) Set var[0x25] = (constant) 0x50

/ Loops around the objects here

/ Get the current location of the current working object
0x0384 (0x5fa4): (0xa2) Set var[0x18] = list#2[var[0x25]] (list address 0x0500)

/ If the object is in the inventory (0xe1) branch ahead to let 
/ Pirate Pete steal this object
/ var[0x09] is the constant e1, the location for the inventory
0x0387 (0x5fa7): (0x10) If var[0x18] == var[0x09] then Goto 0x039c

/ If the object is being worn by the player (0xe2) branch ahead
/ to let Pirate Pete steal this object
/ var[0x09] is the constant 0xe2, the location for worn items
0x038b (0x5fab): (0x10) If var[0x18] == var[0x0a] then Goto 0x039c

/ Increment the object id 
0x038f (0x5faf): (0x0a) Set var[0x25] += var[0x05]

/ Last object has id of 0x9f so nothing left to steal after that
/ so if we're not at the last object, loop back around to get the 
/ next object and check it
0x0392 (0x5fb2): (0x1a) If var[0x25] < (constant) 0xa0 then Goto 0x0384

/ Print message "You've nothing left to steal! Pirate Pete is furious.."
0x0396 (0x5fb6): (0x05) Print message (constant) 0x2dc

/ Pirate Pete kills the player
0x0399 (0x5fb9): (0x00) Goto 0x11f1

/ Print message "\n\nPirate Pete steals"
0x039c (0x5fbc): (0x05) Print message (constant) 0x122

/ Print the object that Pirate Pete has stolen (it's in var[0x25])
0x039f (0x5fbf): (0x01) Gosub 0x16d3

/ Stolen items are placed in the "in the large, empty chest" in the pirate hideout

/ Set the target location to "...the large, empty chest" (0x71)
0x03a2 (0x5fc2): (0x08) Set var[0x49] = (constant) 0x71

/ Set the object's location to "...the large, empty chest" (0x71)
0x03a5 (0x5fc5): (0x01) Gosub 0x1281

Set the target location to the current location
0x03a8 (0x5fc8): (0x09) Set var[0x49] = var[0x48]

**************************************************************************
* Hypocaust hotness check
**************************************************************************

/ Increase the hotness of the player in the hypocaust (gets reset
/ if the player is NOT in the hypocaust)
/ var[0x05] is the constant 0x01
0x03ab (0x5fcb): (0x0a) Set var[0x55] += var[0x05]

/ Check to see if the player is in the hypocaust - if they are not, skip ahead
/ and reset the hotness to 0x125 
/ Hypocaust rooms are 0x9f to 0xa2
0x03ae (0x5fce): (0x1a) If var[0x49] < (constant) 0x9e then Goto 0x03c5
0x03b2 (0x5fd2): (0x1b) If var[0x49] > (constant) 0xa3 then Goto 0x03c5

/ Player is in the hypocaust

/ If the player isn't in the hypocaust or only had one or two moves in 
/ there then don't display any additional messages about being hot. 
/ Variable 0x55 starts and resets to 0x125 and has 0x01 added to it 
/ each move.
0x03b6 (0x5fd6): (0x1a) If var[0x55] < (constant) 0x127 then Goto 0x03c9
0x03bb (0x5fdb): (0x04) Print message var[0x55]

/ If the player has been hot for two many moves i.e. 0x129 
0x03bd (0x5fdd): (0x1b) If var[0x55] > (constant) 0x128 then Goto 0x11f1
0x03c3 (0x5fe3): (0x00) Goto 0x03c9

/ Reset the player's hotness to the default of 0x125 (not in the hypocaust)
0x03c5 (0x5fe5): (0x08) Set var[0x55] = (constant) 0x125

**************************************************************************
* Check if the player is in the amphitheatre and see if the lion attacks
**************************************************************************

/ Check to see if the current location is the "in the arena of the 
/ amptheatre" (0x9a).  If not, skip ahead
0x03c9 (0x5fe9): (0x19) If var[0x48] != (constant) 0x9a then Goto 0x03e6

/ Player IS "in the arena of the amphitheatre"

/ If the number of commands remaining before the lion eats the 
/ player is zero, then branch ahead and kill the player
0x03cd (0x5fed): (0x10) If var[0x33] == var[0x0d] then Goto 0x03d6

/ Subtract 1 from 0x33 to make it 0
0x03d1 (0x5ff1): (0x0b) Set var[0x33] -= var[0x05]
0x03d4 (0x5ff4): (0x00) Goto 0x03e6

/ If the lion is trapped by the net, it can't attack so branch ahead
/ and let it struggle free
0x03d6 (0x5ff6): (0x13) If var[0x34] > var[0x0d] then Goto 0x03e0

/ Print message "The lion attacks!"
0x03da (0x5ffa): (0x05) Print message (constant) 0x12b

/ Kill the player
0x03dd (0x5ffd): (0x00) Goto 0x11f1

/ Print message "\n\nThe lion struggles free"
0x03e0 (0x6000): (0x05) Print message (constant) 0x12a

/ Set the lion status indicator to free (0x00)
/ var[0x0d] is the constant 0x00
0x03e3 (0x6003): (0x09) Set var[0x34] = var[0x0d]

**************************************************************************
* Check if the star burns the player
**************************************************************************

/ If the turn counter for holding the star is not set to a 
/ number of turns above zero, then branch ahead
/ var[0x0d] is the constant 0x00
0x03e6 (0x6006): (0x10) If var[0x22] == var[0x0d] then Goto 0x0415

/ At least 1 turn left for holding the star before the gauntlet
/ catches fire   

/ Set the working object id to the "fallen star"
0x03ea (0x600a): (0x08) Set var[0x17] = (constant) 0x9b

/ Get the location of the "fallen star"
0x03ed (0x600d): (0xa2) Set var[0x18] = list#2[var[0x17]] (list address 0x0500)

/ If the player is "wearing" (0xe2) the star, skip ahead and print a message that the 
/ star burns them and kill them
0x03f0 (0x6010): (0x10) If var[0x18] == var[0x0a] then Goto 0x040f

/ Not wearing the star

/ If the player does NOT have the star in their inventory (0xe1) 
/ (they are also not wearing it given the earlier check)
/ then skip ahead (can't kill the player)
0x03f4 (0x6014): (0x11) If var[0x18] != var[0x09] then Goto 0x0415

/ Star is either being worn or in the inventory

/ Set the indicator that the star is in the inventory or being worn
/ var[0x05] is the constant 0x01
0x03f8 (0x6018): (0x09) Set var[0x23] = var[0x05]

/ Set the current working object to "a rugged gauntlet" (0x64)
0x03fb (0x601b): (0x08) Set var[0x17] = (constant) 0x64

/ Get the current location of "a rugged gauntlet"
0x03fe (0x601e): (0xa2) Set var[0x18] = list#2[var[0x17]] (list address 0x0500)

/ If the player is NOT wearing "a rugged gauntlet", skip ahead to 
/ say that the "...hot star burns you..." and kill the player
/ You can't wear the star - just hold it in your inventory with the gauntlet
0x0401 (0x6021): (0x11) If var[0x18] != var[0x0a] then Goto 0x040f

/ Player is wearing "a rugged gauntlet"

/ Decrement the turn countdown counter (remaining number of turns
/ that the player can hold the star with the gauntlet before the
/ gauntlet catches fire)
0x0405 (0x6025): (0x0b) Set var[0x22] -= var[0x05]

/ If there are still remaining turns skip ahead to the next check
0x0408 (0x6028): (0x13) If var[0x22] > var[0x0d] then Goto 0x0418

/ No more turns left to hold the hot star with the gauntlet
/ so print the messages and kill the player

/ Print message "The gauntlet finally catches fire! \n"
0x040c (0x602c): (0x05) Print message (constant) 0x2e7

/ Print message "The hot star burns you!"
0x040f (0x602f): (0x05) Print message (constant) 0x2e6

/ Kill the player
0x0412 (0x6032): (0x00) Goto 0x11f1

/ From the branching above where the player did not have the star
/ set the indicator of whether they have the star to 0x00
/ var[0x0d] is the constant 0x00
0x0415 (0x6035): (0x09) Set var[0x23] = var[0x0d]

**************************************************************************
* Check if the player has abandoned hope and if they have had more than
* five turns, if so kill them with a random message
**************************************************************************

/ If the player has not yet abandoned hope, move to the next check
0x0418 (0x6038): (0x10) If var[0x5a] == var[0x0d] then Goto 0x042c

/ Player has "abandoned hope" (dropped the milestone at the ugly arch")

/ Increment the number of turns since the player abandoned hope by 0x01
/ var[0x05] is the constant 0x01
0x041c (0x603c): (0x0a) Set var[0x5b] += var[0x05]

/ If there have been less than 0x06 turns since abandoning hope
/ then nothing to do
0x041f (0x603f): (0x1a) If var[0x5b] < (constant) 0x06 then Goto 0x042c

/ Set the base message to be "A skeleton hand strangles you!" (0xc5)
0x0423 (0x6043): (0x08) Set var[0x35] = (constant) 0xc5

/ Call the routine that cycles the messages between so that 
/ any message between 0xc5 - 0xc7 is shown. Options are:
/ 1. A skeleton hand strangles you!    (0xc5)
/ 2. A scoprion sting!                 (0xc6)
/ 3. Lightning strikes!                (0xc7)
/ Message is chosen based on the value of var[0x36] that cycles through
/ 0-2 everytime the routine is called (not just here)
0x0426 (0x6046): (0x01) Gosub 0x16c3

/ Kill the player
0x0429 (0x6049): (0x00) Goto 0x11f1

**************************************************************************
* Check if the player is eaten by the plant
**************************************************************************

/ Check to see if the player is being eating by the plant
/ (if you are then the message id will be set to 0x133 for "the plant is 
/ eating you")
0x042c (0x604c): (0x19) If var[0x4a] != (constant) 0x133 then Goto 0x0439

/ Increment the number of turns that the player has been eaten by the plant
/ (var[0x05] holds the contant 1)
0x0431 (0x6051): (0x0a) Set var[0x5f] += var[0x05]

/ If the player has spent more than 4 moves being eaten by the plant
/ kill them!
/ var[0x08] contains the constant 4
0x0434 (0x6054): (0x13) If var[0x5f] > var[0x08] then Goto 0x11f1

/ If the location is NOT "standing behind the Evil Timelords as they 
/ discuss their evil plans", branch ahead
0x0439 (0x6059): (0x19) If var[0x48] != (constant) 0xd4 then Goto 0x044d

/ Set the working object id to the "filmy cloak" (0x7c)
0x043d (0x605d): (0x08) Set var[0x17] = (constant) 0x7c

/ Get the current location of the "filmy cloak"
0x0440 (0x6060): (0xa2) Set var[0x18] = list#2[var[0x17]] (list address 0x0500)

/ If the player is wearing the "filmy cloak" branch ahead
/ var[0x0a] is the constant 0xe2 for the location "player wearing"
0x0443 (0x6063): (0x10) If var[0x18] == var[0x0a] then Goto 0x044d

/ Print message "The Timelords notice you and summon their tebbit"
0x0447 (0x6067): (0x05) Print message (constant) 0x135

/ Kill the player
0x044a (0x606a): (0x00) Goto 0x11f1

**************************************************************************
* Clear the gosub stack and get user input / parse
**************************************************************************

/ Clear the gosub stack as this turn is over - for instances where
/ there has been a gosub and there was no return because e.g. there was 
/ a goto back to another part of the game
0x044d (0x606d): (0x06) Function - Clear Stack (0x06)

/ Get user input and parse
0x044f (0x606f): (0x01) Gosub 0x0455

/ Print two newlines and go back to the main loop to reset, assess any NPC 
/ actions, print any time based messages e.g. "the candle flickers" and 
/ say What now?
0x0452 (0x6072): (0x00) Goto 0x05e2

**************************************************************************
* Reset the water indicator, set target location to the current and say what now
**************************************************************************

/ Default the indicator that there is water in the current location to 
/ "true" (0x01)
/ var[0x05] is the constant 0x01
0x0455 (0x6075): (0x09) Set var[0x3b] = var[0x05]

/ Set target location to be the current location
0x0458 (0x6078): (0x09) Set var[0x49] = var[0x48]

/ Print message "\n\nWhat now?"
0x045b (0x607b): (0x05) Print message (constant) 0x1c

/ Get user input, parse it and sort it into ascending ids
/ This is the point where the a-code sits and waits (in this
/ sub-routine) until the user types something
0x045d (0x607d): (0x01) Gosub 0x1540

/ If none of the input words were understood (in the dictionary) then the 
/ first input word var[0x24] (well all of them) will be 0x00
/ so skip ahead and print "I don't understand" at 0x169e
/ var[0x0d] is the constant 0x00
0x0460 (0x6080): (0x10) If var[0x24] == var[0x0d] then Goto 0x169e

/ The sub-routine above (0x1540) will have sorted the words so
/ verbs are first, objects next, NPCs next, others are last because
/ in object id terms in the dictionary:
/     verbs < objects < NPCs < others
/
/ The ordering is important as this how the code below checks 
/ var[0x24] vs var[0x25] vs var[0x26] and makes assumptions
/ e.g. that the verb will always in var[0x24]

/ NOTE: This seems like a bug / feature - it doesn't make sense.  At this point
/ the words have been sorted into order as above.  So "take" should
/ be the first word unless there's another verb with a lower id
/ that makes the sentence non-sensical.  So to trigger the player types
/ "<lower verb> get <anything>".  At which point the second word, "get",
/ is changed into "porsche". If you type "get get <anything>"  you will
/ be surprised at the response that says "You can't see a red porsche"

/ If the second word isn't take/get/carry, skip ahead otherwise 
/ set the second word to "porsche"(!)
0x0465 (0x6085): (0x19) If var[0x25] != (constant) 0x28 then Goto 0x046c

/ For some bizarre reason (see above) set the second word to "porsche" (0xa8)
0x0469 (0x6089): (0x08) Set var[0x25] = (constant) 0xa8

**************************************************************************
* Handle when the player types "ring bell"
**************************************************************************

/ This section deals with "ring bell" - ring is technically an object
/ and not a verb so to make the processing work later, this section
/ replaces "ring" (object) with "play" (verb)

/ Check to see if the player typed "Ring bell" or "bell ring" 
/ If they did, move "Bell" from the first word to the second word
/ and set the first word id to be "Play" (0x38).  Remember that the
/ word ids were sorted into ascending order so if the player typed
/ "ring bell" it would be stored at this point as "bell ring"
/
/ This is because "ring" is only defined in the dictionary as an 
/ object (0xbd) and not a verb.  So it's replaced with "play bell"

/ If the first word isn't "Bell" skip ahead
0x046c (0x608c): (0x19) If var[0x24] != (constant) 0x77 then Goto 0x047a

/ If the second word isn't "Ring" skip ahead
0x0470 (0x6090): (0x19) If var[0x25] != (constant) 0xbd then Goto 0x047a

/ Move "bell" from the first word to the second word
0x0474 (0x6094): (0x09) Set var[0x25] = var[0x24]

/ Set the first word to the command "Play" (0x38)
0x0477 (0x6097): (0x08) Set var[0x24] = (constant) 0x38

**************************************************************************
* Handle when the player types "James Watt"
**************************************************************************

/ This section deals with if the player types "James Watt" instead of 
/ "Say James Watt" - it adds the verb Say so it can be processed later
/ on by the "say" processing section

/ If the first word isn't "James" (0xe7)  or "Watt" (0xe8) skip ahead 
/ "james watt" is the command to open a door in the invention alcove
0x047a (0x609a): (0x1a) If var[0x24] < (constant) 0xe6 then Goto 0x048e
0x047e (0x609e): (0x1b) If var[0x24] > (constant) 0xe8 then Goto 0x048e

/ First word was "James" (0xe7) or "Watt" (0xe8)

/ Add one to the word count (0x27) (as it's going to add the verb "Say" 
/ as the first word)
0x0482 (0x60a2): (0x0a) Set var[0x27] += var[0x05]

/ Moves word 2 (0x25) to word 3 (0x26)
0x0485 (0x60a5): (0x09) Set var[0x26] = var[0x25]

/ Moves word 1 (0x24) to word 2 (0x25)
0x0488 (0x60a8): (0x09) Set var[0x25] = var[0x24]

/ Sets word 1 (0x24) to be the command "SAY" (0x22)
0x048b (0x60ab): (0x08) Set var[0x24] = (constant) 0x22

**************************************************************************
* Handle interaction with the narcissus
**************************************************************************

/ Next part checks to see if the player typed 
/ "<any command> narcissus" and they are in the same location
/ as it - if so it'll print the "...bends away..." message below

/ If the second word isn't "narcissus" (0xe1) skip ahead
0x048e (0x60ae): (0x19) If var[0x25] != (constant) 0xe1 then Goto 0x049c

/ Second word is narcissus

/ If the location is "west of the stream" (0x13)
0x0492 (0x60b2): (0x19) If var[0x48] != (constant) 0x13 then Goto 0x049c

/ Second word is narcissus and location is "west of the stream" (0x13) so
/ print "The narcissus bends away, sadly, "I'm doomed to spend my life 
/ admiring my reflection. But this water's so dirty that I can hardly see 
/ to admire my beautiful face in it."
0x0496 (0x60b6): (0x05) Print message (constant) 0x2d3

/ Set the target location to match the current location
/ and check if it's dark and if so if the player has anything that 
/ can make it light
0x0499 (0x60b9): (0x00) Goto 0x022a

**************************************************************************
* Handle interaction with the picture in the first location
**************************************************************************

/ Next part checks to see if the player typed 
/ "<any command> picture" and they are in the same location
/ as it - if so it'll print the "I am Father Time..." message below

/ Checks to see if the second word is the object "Picture" (0xbc),
/ if not skip ahead
0x049c (0x60bc): (0x19) If var[0x25] != (constant) 0xbc then Goto 0x04ac

/ Branch if the location is not the initial location (0x01)
0x04a0 (0x60c0): (0x11) If var[0x48] != var[0x05] then Goto 0x04ac

/ Print message  "The picture comes to life: "I am Father Time and I have 
/ chosen youn to help defend history against 9 evil Timelords. You must 
/ collect 9 items, each marked with an hourglass. Good Luck!"
0x04a4 (0x60c4): (0x05) Print message (constant) 0xc0

/ For some reason set the picture's location to 0xff - this hide's
/ it from the any subsequent "LOOK" command responses but you can still 
/ look at it in location 0x01 because it only checks your location, not
/ the location of the picture, bug? 
0x04a6 (0x60c6): (0x01) Gosub 0x1625

/ Set the target location to match the current location
/ and check if it's dark and if so if the player has anything that 
/ can make it light
0x04a9 (0x60c9): (0x00) Goto 0x022a

**************************************************************************
* Check evil timelords reaction - can only do commands with a dictionary id
* of < 0x28 e.g. North or give, or wear.  Also can do "sip" (0x32) or "drink" 
* (0x3b) too. They kill you for anything else... e.g. wave (0x37) or unlock (0x2f)
**************************************************************************

/ Allow action if the dictionary code is < 0x28
0x04ac (0x60cc): (0x1a) If var[0x24] < (constant) 0x28 then Goto 0x04ce

/ If the command is "sip" or "drink" (0x32) skip ahead (it's allowed)
0x04b0 (0x60d0): (0x18) If var[0x24] == (constant) 0x32 then Goto 0x04ce

/ If the command is "dig" (0x3b) skip ahead (it's allowed)
0x04b4 (0x60d4): (0x18) If var[0x24] == (constant) 0x3b then Goto 0x04ce

/ If the current location is "standing behind the Evil Timelords as they 
/ discuss their evil plans" (0xd4), kill the player
0x04b8 (0x60d8): (0x18) If var[0x48] == (constant) 0xd4 then Goto 0x11f1

/ If the second word is an object (objects start at 0x50 onwards), skip ahead
0x04bd (0x60dd): (0x1b) If var[0x25] > (constant) 0x4f then Goto 0x04ce

/ Second word not an object and first word dictionary id >= 0x28 but
/ not SIP (0x32) or DIG (0x3b)

/ If there are less than 0x02 words (so one) then branch
/ var[0x06] is the constant 0x02
0x04c1 (0x60e1): (0x12) If var[0x27] < var[0x06] then Goto 0x16a6

/ If there are more than 0x08 words then branch (can't do this though as
/ only three word variables are passed to the input routine)
0x04c6 (0x60e6): (0x1b) If var[0x27] > (constant) 0x08 then Goto 0x16b6

/ Second word not an object and first word dictionary id >= 0x28 but
/ not SIP (0x32) or DIG (0x3b). More than 1 and less than 8 words

/ Say one of the "can you rephrase that" messages
0x04cb (0x60eb): (0x00) Goto 0x16ae

**************************************************************************
* Process the commands
**************************************************************************

/ Increment the number of valid moves/actions that player has performed
/ stored in var[0x51] but not used
/ var[0x05] is the constant 0x01
0x04ce (0x60ee): (0x0a) Set var[0x51] += var[0x05]

/ Process the commands
0x04d1 (0x60f1): (0x01) Gosub 0x04d6

/ Print two newlines and go back to the main loop to reset, assess any NPC 
/ actions, print any time based messages e.g. "the candle flickers" and 
/ say What now?
0x04d3 (0x60f3): (0x00) Goto 0x05e2

/ If the command isn't "again" (0x14) then skip ahead
0x04d6 (0x60f6): (0x19) If var[0x24] != (constant) 0x14 then Goto 0x04dd

/ Process command "again" by setting 0x24-0x27 to the values in 
/ 0x28 - 0x2b which contains the ids of the previously cached words
0x04da (0x60fa): (0x01) Gosub 0x05e7

/ If the second word is "its/them" (0xfb) skip ahead
0x04dd (0x60fd): (0x18) If var[0x25] == (constant) 0xfb then Goto 0x04e5

/ If the third word is NOT "its/them" (0xfb) skip ahead
0x04e1 (0x6101): (0x19) If var[0x26] != (constant) 0xfb then Goto 0x04e8

/ Second or third word is "its/them"

/ Process "<whatever> its/them"     
0x04e5 (0x6105): (0x01) Gosub 0x062f

/ Cache the last words the user entered in case their next command
/ is "again"

/ Cache the first word the player entered
0x04e8 (0x6108): (0x09) Set var[0x28] = var[0x24]

/ Cache the second word the player entered
0x04eb (0x610b): (0x09) Set var[0x29] = var[0x25]

/ Cache the three word the player entered
0x04ee (0x610e): (0x09) Set var[0x2a] = var[0x26]

/ Cache the word count
0x04f1 (0x6111): (0x09) Set var[0x2b] = var[0x27]

/ If the second word is "everything" (0xfd) branch ahead
0x04f4 (0x6114): (0x18) If var[0x25] == (constant) 0xfd then Goto 0x05f4

/ Basically a gigantic switch statement below to go to the 
/ code to process the verb.  If there's a verb, it'll be
/ the first word in var[0x24] because all verbs have the lowest
/ dictionary ids and the words have been sorted into dictionary id
/ order

/ If the first word is a direction e.g. North, across, climb, left effect
/ then process it
0x04f9 (0x6119): (0x1a) If var[0x24] < (constant) 0x14 then Goto 0x0641

/ If the first word is "attack" or "kick" or "fight" or "kill" or "chop"
/ or "hit" or "smash" or "cut" or "break", process it 
/ NOTE actually think this should go direct to 0x07f5 and skip the "look"
/ processing
0x04fe (0x611e): (0x18) If var[0x24] == (constant) 0x15 then Goto 0x07e5

/ If the first word is "wear", process it
0x0503 (0x6123): (0x18) If var[0x24] == (constant) 0x2a then Goto 0x0bc0

/ If the first word is "throw" or "hurl", process it
0x0508 (0x6128): (0x18) If var[0x24] == (constant) 0x2b then Goto 0x0c0a

/ If the first word is "give" or "feed" or "pay", process it
0x050d (0x612d): (0x18) If var[0x24] == (constant) 0x2c then Goto 0x0951

/ If the first word is "fill", process it
0x0512 (0x6132): (0x18) If var[0x24] == (constant) 0x2d then Goto 0x0c7e

/ If the first word is "empty" or "pour", process it
0x0517 (0x6137): (0x18) If var[0x24] == (constant) 0x2e then Goto 0x0c91

/ If the first word is "open" or "unlock" or "undo" or "untie", process it
0x051c (0x613c): (0x18) If var[0x24] == (constant) 0x2f then Goto 0x0ca6

/ If the first word is "close" or "lock" or "shut", process it
0x0521 (0x6141): (0x18) If var[0x24] == (constant) 0x30 then Goto 0x0da0

/ If the first word is "bite" or "eat" or "swallow" or "taste", process it
0x0526 (0x6146): (0x18) If var[0x24] == (constant) 0x31 then Goto 0x0dbc

/ If the first word is "drink" or "sip", process it
0x052b (0x614b): (0x18) If var[0x24] == (constant) 0x32 then Goto 0x0df9

/ If the first word is "light", process it
0x0530 (0x6150): (0x18) If var[0x24] == (constant) 0x33 then Goto 0x0e34

/ If the first word is "extinguish", process it (print "you can't")
0x0535 (0x6155): (0x18) If var[0x24] == (constant) 0x34 then Goto 0x1681

/ If the first word is "press" or "push" or "swing", process it
0x053a (0x615a): (0x18) If var[0x24] == (constant) 0x35 then Goto 0x0eb5

/ If the first word is "fasten" or "tie" or "attach" or "fix", process it
0x053f (0x615f): (0x18) If var[0x24] == (constant) 0x36 then Goto 0x0ecf

/ If the first word is "shake" or "wave", process it
0x0544 (0x6164): (0x18) If var[0x24] == (constant) 0x37 then Goto 0x0eef

/ If the first word is "blow" or "play", process it
0x0549 (0x6169): (0x18) If var[0x24] == (constant) 0x38 then Goto 0x0f35

/ If the first word is "fire" or "shoot", process it
0x054e (0x616e): (0x18) If var[0x24] == (constant) 0x39 then Goto 0x0ff8

/ If the first word is "pat", process it
0x0553 (0x6173): (0x18) If var[0x24] == (constant) 0x3a then Goto 0x0f95

/ If the first word is "dig", process it
0x0558 (0x6178): (0x18) If var[0x24] == (constant) 0x3b then Goto 0x0f9b

/ If the first word is "insert", print a variant of "I don't understand"
0x055d (0x617d): (0x18) If var[0x24] == (constant) 0x3d then Goto 0x169e

/ If the first word is "turn" or "twist" or "rotate", process it
0x0562 (0x6182): (0x18) If var[0x24] == (constant) 0x3e then Goto 0x1014

/ NOTE: This word does not exist in the dictionary
/ It calls the routine to fire/shoot the rocket
0x0567 (0x6187): (0x18) If var[0x24] == (constant) 0x3f then Goto 0x0ff8

/ If the first word is "pull", process it
0x056c (0x618c): (0x18) If var[0x24] == (constant) 0x40 then Goto 0x1034

/ If the first word is "wind", process it
0x0571 (0x6191): (0x18) If var[0x24] == (constant) 0x41 then Goto 0x1137

/ If the first word is "kiss", process it
0x0576 (0x6196): (0x18) If var[0x24] == (constant) 0x42 then Goto 0x1155

/ If the first word is "shuffle", process it
0x057b (0x619b): (0x18) If var[0x24] == (constant) 0x43 then Goto 0x11a6

/ If the first word is "inventory", process it
0x0580 (0x61a0): (0x18) If var[0x24] == (constant) 0x16 then Goto 0x0883

/ If the first word is "listen" or "hear", process it
0x0585 (0x61a5): (0x18) If var[0x24] == (constant) 0x17 then Goto 0x08a1

/ If the first word is "plugh" or "plover" or "sesame" or "xyzzy", process it
/ (routine just prints "the magic word doesn't work")
0x058a (0x61aa): (0x18) If var[0x24] == (constant) 0x19 then Goto 0x08a4

/ If the first word is "quit", process it
0x058f (0x61af): (0x18) If var[0x24] == (constant) 0x1a then Goto 0x08a7

/ If the first word is "restore", process it
0x0594 (0x61b4): (0x18) If var[0x24] == (constant) 0x1b then Goto 0x08b5

/ If the first word is "save", process it
0x0599 (0x61b9): (0x18) If var[0x24] == (constant) 0x1c then Goto 0x08c8

/ If the first word is "score", process it
0x059e (0x61be): (0x18) If var[0x24] == (constant) 0x1d then Goto 0x08d1

/ If the first word is "affirmative", process it
0x05a3 (0x61c3): (0x18) If var[0x24] == (constant) 0x1e then Goto 0x08cd

/ If the first word is "negative", process it
0x05a8 (0x61c8): (0x18) If var[0x24] == (constant) 0x1f then Goto 0x08cd

/ If the first word is "wait", process it
0x05ad (0x61cd): (0x18) If var[0x24] == (constant) 0x20 then Goto 0x0936

/ If the first word is "shout", process it
0x05b2 (0x61d2): (0x18) If var[0x24] == (constant) 0x21 then Goto 0x1142

/ If the first word is "say", process it
0x05b7 (0x61d7): (0x18) If var[0x24] == (constant) 0x22 then Goto 0x1188

/ If the first word is "search" or "examine", process it
0x05bc (0x61dc): (0x18) If var[0x24] == (constant) 0x23 then Goto 0x1070

/ If the first word is "blink" or "wink", process it
0x05c1 (0x61e1): (0x18) If var[0x24] == (constant) 0x24 then Goto 0x16bb

/ If the first word is "look", check if it's light / dark 
/ and print the location description if light
0x05c6 (0x61e6): (0x18) If var[0x24] == (constant) 0x25 then Goto 0x0165

/ If the first word is "kneel" or "grovel", process it
0x05cb (0x61eb): (0x18) If var[0x24] == (constant) 0x26 then Goto 0x11b4

/ If the first word is "pray" or "worship", process it
0x05d0 (0x61f0): (0x18) If var[0x24] == (constant) 0x27 then Goto 0x11b8

/ If the first word is "carry" or "get" or "take", process it
0x05d5 (0x61f5): (0x18) If var[0x24] == (constant) 0x28 then Goto 0x0b18

/ If the first word is "drop" or "put" or "abandon", process it
0x05da (0x61fa): (0x18) If var[0x24] == (constant) 0x29 then Goto 0x0bba

/ Command not understood - print one of the cyclic "I don't understand" messages
0x05df (0x61ff): (0x00) Goto 0x169e

/ Print message "\n\n"
0x05e2 (0x6202): (0x05) Print message (constant) 0x05

/ Set the target location to match the current location
/ and check if it's dark and if so if the player has anything that 
/ can make it light
0x05e4 (0x6204): (0x00) Goto 0x022a

**************************************************************************
* Command - "again" 
* -----------------
* Set the current word ids and count to the previously cached 
* word ids and count
**************************************************************************
/ Player entered "again" so set the current words to the previously entered
/ words that were cached in 0x28 to 0x2b

/ Set the first word to the cached first word from the previous user input
0x05e7 (0x6207): (0x09) Set var[0x24] = var[0x28]

/ Set the second word to the cached first word from the previous user input
0x05ea (0x620a): (0x09) Set var[0x25] = var[0x29]

/ Set the third word to the cached first word from the previous user input
0x05ed (0x620d): (0x09) Set var[0x26] = var[0x2a]

/ Set the count to the cached count from the previous input
0x05f0 (0x6210): (0x09) Set var[0x27] = var[0x2b]

/ Continue with the previous words
0x05f3 (0x6213): (0x02) Return

**************************************************************************
* Second word is "everything" so work out if get or drop or something else
**************************************************************************

/ If the verb is either "get" or "take" or "carry" then branch ahead
/ and try and add all the objects in the current location to the player's 
/ inventory
0x05f4 (0x6214): (0x18) If var[0x24] == (constant) 0x28 then Goto 0x05ff

/ If the verb is "drop" or "put" or "abandon" then branch ahead 
0x05f8 (0x6218): (0x18) If var[0x24] == (constant) 0x29 then Goto 0x0617

/ For any other verb e.g. attach everything, "You can't"
0x05fc (0x621c): (0x00) Goto 0x1681

**************************************************************************
* Process "get everything" / "take everything" / "carry everything"
**************************************************************************

/ Set the working object id to the id of the first object (0x50)
/ the code will then loop through each object checking to see if it's
/ in this current location and add it to the inventory if it can
0x05ff (0x621f): (0x08) Set var[0x1a] = (constant) 0x50

/ Get the current location of the current object
0x0602 (0x6222): (0xa2) Set var[0x18] = list#2[var[0x1a]] (list address 0x0500)

/ If the object is not in the current location, branch ahead and move to the
/ next object
0x0605 (0x6225): (0x11) If var[0x18] != var[0x49] then Goto 0x060f

/ Object is in the current location

/ Set the second word to be the current object
0x0609 (0x6229): (0x09) Set var[0x25] = var[0x1a]

/ Try and add the object to the player's inventory
/ (the sub-routine will perform all sorts of checks)
0x060c (0x622c): (0x01) Gosub 0x0b18

/ Increment the current object id to move to the next object
/ var[0x05] is the constant 0x01
0x060f (0x622f): (0x0a) Set var[0x1a] += var[0x05]

/ The "tooth" (0x9f) is the last object processed here - loop back around 
/ if there's still another object to process
0x0612 (0x6232): (0x1a) If var[0x1a] < (constant) 0xa0 then Goto 0x0602

/ All items picked up
0x0616 (0x6236): (0x02) Return

**************************************************************************
* Process "drop everything" / "abandon everything" / "put everything"
**************************************************************************

/ Set the working object id to the id of the first object (0x50)
/ the code will then loop through each object checking to see if it's
/ in the inventory or being worn and therefore can be dropped
/ NOTE: dropping everything does not drop items that you are wearing
0x0617 (0x6237): (0x08) Set var[0x1a] = (constant) 0x50

/ Get the current location of the current object
0x061a (0x623a): (0xa2) Set var[0x18] = list#2[var[0x1a]] (list address 0x0500)

/ If the current location of the object is NOT in the player's inventory, 
/ skip ahead
/ var[0x09] is the constant for the inventory location 0xe1
0x061d (0x623d): (0x11) If var[0x18] != var[0x09] then Goto 0x0627

/ Object is in the inventory

/ Set the second word to be the current object 
0x0621 (0x6241): (0x09) Set var[0x25] = var[0x1a]

/ Drop the object (remove from the player's inventory and put it in the current location)
0x0624 (0x6244): (0x01) Gosub 0x0bba

/ Increment the current object id to move to the next object
/ var[0x05] is the constant 0x01
0x0627 (0x6247): (0x0a) Set var[0x1a] += var[0x05]

/ The "tooth" (0x9f) is the last object processed here - loop back around 
/ if there's still another object to process
0x062a (0x624a): (0x1a) If var[0x1a] < (constant) 0xa0 then Goto 0x061a

/ All items dropped
0x062e (0x624e): (0x02) Return

**************************************************************************
* Process "them" or "its" in a sentence
**************************************************************************

/ It appears that if you type "them" or "its" then that word
/ will be replaced with the cached input from the previous command (the last
/ command that did not contain "them" or "its").  I guess this is so that 
/ you can type "give them" or "get them" etc after e.g. "exam <object>" or
/ "drop <object>"

/ If the second word is NOT "its" or "them" (0xfb) branch ahead
0x062f (0x624f): (0x19) If var[0x25] != (constant) 0xfb then Goto 0x0636

/ Second word is "its" or "them"

/ Replace the second word with the cached second word from the player's previous command
0x0633 (0x6253): (0x09) Set var[0x25] = var[0x29]

/ If the third word is NOT "its" or "them" (0xfb) branch ahead
0x0636 (0x6256): (0x19) If var[0x26] != (constant) 0xfb then Goto 0x063d

/ Third word is "it"

/ Replace the third word with the cached third word from the player's previous command
0x063a (0x625a): (0x09) Set var[0x26] = var[0x2a]

/ Re-sort the words so that the dictionary ids (verbs/objects/npcs etc)
/ are in ascending order
0x063d (0x625d): (0x01) Gosub 0x14ee

/ Completed processing "it"
0x0640 (0x6260): (0x02) Return

**************************************************************************
* Process direction e.g. North or across or climb (code will always be
* less than 0x14)
**************************************************************************

/ Check to see if the direction is a compass direction e.g. North
/ If it is skip ahead
0x0641 (0x6261): (0x1a) If var[0x24] < (constant) 0x09 then Goto 0x064a

/ If the second word is "look" (0x25) - then branch ahead and see if it's
/ a look into or across etc where it'll convert into an "examine object"
0x0645 (0x6265): (0x18) If var[0x25] == (constant) 0x25 then Goto 0x07e4

/ Second word is NOT "look"

/ If the current location is NOT the grandfather clock (0x03)
/ branch ahead
/ var[0x07] is the constant 0x03 and only used here because of the cogs
0x064a (0x626a): (0x11) If var[0x48] != var[0x07] then Goto 0x0651

/ Location is the grandfather clock

/ NOTE: You can go any direction when inside the grandfather clock even though the 
/ door is listed as being to the North e.g. you can go IN or WEST or SOUTHEAST.
/ Not sure why they did that...

/ Set the first matched word to the zone number so if in Zone 1 (0x01)
/ this would set the first word to North
0x064e (0x626e): (0x09) Set var[0x24] = var[0x2c]

/ If the direction is any of these, then branch ahead
/ Any compass direction, up, down, in (etc), out (etc), cross (etc)
0x0651 (0x6271): (0x1a) If var[0x24] < (constant) 0x0d then Goto 0x068d

/ Direction is > 0x0d e.g. climb or up or down etc

**************************************************************************
* Check to see if they are climbing up or down and change the first word
* to reflect this
**************************************************************************

/ If the direction is NOT climb (0x0e) branch ahead
0x0655 (0x6275): (0x19) If var[0x24] != (constant) 0x0e then Goto 0x0663

/ Direction is climb (0x0e) - this part checks if it's climb or climb down

/ Climb does not have a handler, it's treated the same as "up" (0x09)
/ So change "climb" to "up"
0x0659 (0x6279): (0x08) Set var[0x24] = (constant) 0x9

/ Check the second word - if it's NOT down or downwards (0x0a) then skip ahead
0x065c (0x627c): (0x19) If var[0x25] != (constant) 0x0a then Goto 0x0663

/ Second word is down or downwards
/ Set the first word to down as they are not climbing up
0x0660 (0x6280): (0x09) Set var[0x24] = var[0x25]

**************************************************************************
* Check to see if they are jumping - if so change the first word to down
**************************************************************************

/ Check the first word to see if it is "jump" (0x0f), if NOT branch ahead
0x0663 (0x6283): (0x19) If var[0x24] != (constant) 0x0f then Goto 0x0671

/ First word is "jump"

/ Change the first word to "down" (0x0a) as jumping is treated as going down
0x0667 (0x6287): (0x08) Set var[0x24] = (constant) 0xa

**************************************************************************
* Check to see if the second word is up 
**************************************************************************

/ This deals with when a player types "jump up", replaces
/ the "down" that was substitued for "jump" earlier and puts "up" in its
/ place

/ Check to see if the second word is "up", if NOT branch ahead
0x066a (0x628a): (0x19) If var[0x25] != (constant) 0x09 then Goto 0x0671

/ Second word is "up" 

/ Set the first word to be "up"
0x066e (0x628e): (0x09) Set var[0x24] = var[0x25]

**************************************************************************
* Check to see if the direction in the first word is left, right, 
* forwards or backwards
**************************************************************************

/ NOTE so this is a bit all a bit weird... 
/ 
/ 1. It generates a random direction for each of these words and will
/ then try and go in that direction 
/ 2. The random direction will either be NE, SE, SW or NW
/ 3. The random direction is based on the current value held in var[0x11]
/ 4. For FORWARDS it just takes the current direction held in var[0x11] (does not change it)
/ 5. For RIGHT it moves to the next cardinal clockwise e.g. NE -> SE or SE -> SW etc
/ 6. For BACKWARDS it moves two cardinal directions clockwise e.g. NE -> SW or SW -> NE  etc
/ 7. For LEFT it moves three cardinal directions clockwise e.g NE -> NW or SW -> SE etc
/
/ Except... the first time through for FORWARDS, it's set to 0 and there's no 0 direction
/ Why not initialise var[0x11] to 0x02?
/
/ If it's a valid direction now (command code is < 0x0f) then
/ branch and check they can move in that direction
/ NOTE comparison should really be 0x0d as climb "0x0e" is substituted above
0x0671 (0x6291): (0x1a) If var[0x24] < (constant) 0x0f then Goto 0x068d

/ Not a compass direction nor in, out, cross 

/ Check to see if the first word is "forwards" or "ahead" (0x11) if so branch ahead
0x0675 (0x6295): (0x18) If var[0x24] == (constant) 0x11 then Goto 0x068a

/ First word is NOT "forwards" or "ahead"

/ Move the current random diagonal direction held in var[0x11] to the next clockwise diaganal direction (e.g. NE -> SE)
0x0679 (0x6299): (0x01) Gosub 0x14a9

/ Check to see if the first word is "right" (0x13) if so branch ahead
0x067c (0x629c): (0x18) If var[0x24] == (constant) 0x13 then Goto 0x068a

/ Move the current random diagonal direction held in var[0x11] to the next clockwise diaganal direction (e.g. SE -> SW)
0x0680 (0x62a0): (0x01) Gosub 0x14a9

/ Check to see if the first word is "backwards" (0x10) if so branch ahead
0x0683 (0x62a3): (0x18) If var[0x24] == (constant) 0x10 then Goto 0x068a

/ First word must be "left"

/ Move the current random diagonal direction held in var[0x11] to the next clockwise diaganal direction (e.g. SW -> NW)
0x0687 (0x62a7): (0x01) Gosub 0x14a9

/ Set the first word to the random diagonal direction
0x068a (0x62aa): (0x09) Set var[0x24] = var[0x11]

**************************************************************************
* Check to see if the player can move in that direction
**************************************************************************

/ Check to see if the player can move in the required direction
/ from this location
0x068d (0x62ad): (0x0f) Exits - check location var[0x48] can move var[0x24] - exit flags returned in var[0x4e] and target location (or 0x00) in var[0x49]

/ If var[0x49] is set then the player can move in that direction 
/ and it contains the location id for the target location. If they can't 
/ it'll be set to 0x00 
/ var[0x0d] is the constant 0x00
0x0692 (0x62b2): (0x13) If var[0x49] > var[0x0d] then Goto 0x0699

/ Player cannot move in that direction

/ Print message "You can't go in that direction"
0x0696 (0x62b6): (0x05) Print message (constant) 0x3d

/ Nothing else to do - player can't move in that direction
0x0698 (0x62b8): (0x02) Return

**************************************************************************
* See if the player can cross the stream in zone 1
**************************************************************************

/ Check to see if the player's current location is "You are west of the 
/ stream. You can see a single beautiful narcissus standing proudly 
/ amongst the weeds." If it is then planks already bridge across the 
/ stream
0x0699 (0x62b9): (0x18) If var[0x48] == (constant) 0x13 then Goto 0x06a1

/ If the target location where the player wants to move to is NOT "...west
/ of the stream..." then branch ahead
0x069d (0x62bd): (0x19) If var[0x49] != (constant) 0x13 then Goto 0x06aa

/ If the "planks bridge the stream" no need to print the message, skip ahead
0x06a1 (0x62c1): (0x18) If var[0x4b] == (constant) 0x12e then Goto 0x06aa

/ Planks are NOT bridging the stream

/ Print message "The stream is too wide to cross"
0x06a6 (0x62c6): (0x05) Print message (constant) 0x101

/ Completed printing the description
0x06a9 (0x62c9): (0x02) Return

**************************************************************************
* See if the player is by the tiger by the cave
**************************************************************************

/ If the current NPC isn't the tiger (0xcb) then branch ahead
0x06aa (0x62ca): (0x19) If var[0x4c] != (constant) 0xcb then Goto 0x06b6

/ NPC is the tiger

/ If the target location of the player is NOT the cave that the tiger is guarding
/ "You are in a huge subterranean chamber with smooth walls." (0x22) then 
/ skip ahead 
0x06ae (0x62ce): (0x19) If var[0x49] != (constant) 0x22 then Goto 0x06b6

/ Print message "The tiger blocks you, snarling to show its impressive array of mottled teeth"
0x06b2 (0x62d2): (0x05) Print message (constant) 0x154

/ Player cannot move in that direction so complete
0x06b5 (0x62d5): (0x02) Return

**************************************************************************
* See if the player is by the silver fox in the silver fox lair
**************************************************************************

/ If the current NPC is NOT the silver fox, skip ahead
0x06b6 (0x62d6): (0x19) If var[0x4c] != (constant) 0xe2 then Goto 0x06c2

/ If the player is NOT in the "...silver fox lair..." skip ahead 
0x06ba (0x62da): (0x19) If var[0x49] != (constant) 0x26 then Goto 0x06c2

/ Print message "The fox trips you up"
0x06be (0x62de): (0x05) Print message (constant) 0x153

/ Player cannot move in that direction so complete
0x06c1 (0x62e1): (0x02) Return

**************************************************************************
* Check if the player is blocked by the ice wall when trying to move 
* to the hidden silver vault
**************************************************************************

/ If the player's target location is NOT "...the hidden silver vault..." skip ahead 
0x06c2 (0x62e2): (0x19) If var[0x49] != (constant) 0x27 then Goto 0x06cc

/ The player's target location is the "the hidden silver vault"

/ See if the additional message has been set to "There's a hole to the south"
/ (0x12f), otherwise branch and say the player can't go in that direction
0x06c6 (0x62e6): (0x19) If var[0x4a] != (constant) 0x12f then Goto 0x0696

**************************************************************************
* Check if the lake has been frozen if the player is moving to the intricate
* alpine garden
**************************************************************************

/ Branch if the player's current location is NOT "in the frozen forest, 
/ amidst tall, snow-laden tree" (0x2a)
0x06cc (0x62ec): (0x19) If var[0x48] != (constant) 0x2a then Goto 0x06df

/ Branch if the player's target location is NOT "in an intricate alpine garden" (0x2b)
0x06d0 (0x62f0): (0x19) If var[0x49] != (constant) 0x2b then Goto 0x06df

/ Player is "in the frozen forest" and trying to move to "an intricate alpine garden"

/ Set the current working object to the ice sheet (0xab)
0x06d4 (0x62f4): (0x08) Set var[0x17] = (constant) 0xab

/ Get the ice sheet's current location
0x06d7 (0x62f7): (0xa2) Set var[0x18] = list#2[var[0x17]] (list address 0x0500)

/ Branch if the ice sheet's current location is not the player's current location
/ which will be "in a frozen forest" (0x2a)
0x06da (0x62fa): (0x11) If var[0x18] != var[0x48] then Goto 0x0696

/ Lake is frozen from above - player allowed to walk there

/ Now check the mammoth

**************************************************************************
* Check to see if the mammoth is blocking the player
**************************************************************************

/ Check to see if the mammoth (0xca) is in the same location as the 
/ player's current location
0x06df (0x62ff): (0x19) If var[0x4c] != (constant) 0xca then Goto 0x06e7

/ Mammoth is in the same location (and player is blocked)

/ Print message "That's towards the mammoth! You are trapped."
0x06e3 (0x6303): (0x05) Print message (constant) 0x107

/ Player cannot move past the mammoth
0x06e6 (0x6306): (0x02) Return


**************************************************************************
* Check to see if the T-Rex dinosaur is blocking the player or make it follow
* the player
**************************************************************************

/ Branch if "the dinosaur is ..." NOT "... approaching menacingly" (0x131)
0x06e7 (0x6307): (0x19) If var[0x4b] != (constant) 0x131 then Goto 0x06ff

/ Dinosaur approaching menacingly

/ If the target location is < 0x31 or greater than > 0x3a make the Dinosaur
/ block the player (don't think that can happen as opening the door to the clock
/ gets you killed by the T Rex if it's following you)
0x06ec (0x630c): (0x1a) If var[0x49] < (constant) 0x31 then Goto 0x06f8
0x06f0 (0x6310): (0x1b) If var[0x49] > (constant) 0x3a then Goto 0x06f8

/ Branch if the player is trying to move to "a deep pit, presumably an animal trap" (0x36)
0x06f4 (0x6314): (0x19) If var[0x49] != (constant) 0x36 then Goto 0x06fc

/ Print message "The dinosaur blocks you"
0x06f8 (0x6318): (0x05) Print message (constant) 0x143

/ Blocked
0x06fb (0x631b): (0x02) Return

/ Set the location of the dinosaur to the player's location
0x06fc (0x631c): (0xe2) Set list#2[var[0x4c]] = var[0x49] (list address 0x0500)

**************************************************************************
* Check to see if the brontosaurus is blocking the player
**************************************************************************

/ If the brontosaurus (0xce) is the current NPC (therefore here), 
/ branch and say the player is blocked
0x06ff (0x631f): (0x18) If var[0x4c] == (constant) 0xce then Goto 0x06f8

/ Branch if the current NPC (therefore here) is the cavemen
0x0703 (0x6323): (0x19) If var[0x4c] != (constant) 0xcf then Goto 0x0711

/ NPC is the cavemen

/ Branch if the target location is to " a large dry cave, warmed 
/ by a blazing fire" (0x3a) or any earlier location (not attacked)
0x0707 (0x6327): (0x1a) If var[0x49] < (constant) 0x3b then Goto 0x0711

/ The cavemen are still in the cave so going North, they will attack

/ Print message "The cavemen attack!"
0x070b (0x632b): (0x05) Print message (constant) 0x115

/ And the player is killed so branch ahead to the 
/ print "You've been killed" and process
0x070e (0x632e): (0x00) Goto 0x11f1

**************************************************************************
* See if the skeleton is blocking an exit
**************************************************************************

/ Branch if the current NPC is NOT the skeleton (0xd1)
0x0711 (0x6331): (0x19) If var[0x4c] != (constant) 0xd1 then Goto 0x071d

/ Branch if the target location is NOT "the treasure vault (0x42)
/ Player gets there from the trophy cave where the skeleton is
0x0715 (0x6335): (0x19) If var[0x49] != (constant) 0x42 then Goto 0x071d

/ Print message  "The skeleton blocks you "
0x0719 (0x6339): (0x05) Print message (constant) 0x2d0

/ Player is not allowed to go to the treasure room
0x071c (0x633c): (0x02) Return

**************************************************************************
* See if the black knight is blocking an exit
**************************************************************************

/ Branch if the current NPC is NOT the Black Night (0xd6)
0x071d (0x633d): (0x19) If var[0x4c] != (constant) 0xd6 then Goto 0x0729

/ Branch if the target location is NOT " above a narrow flight of stairs" (0x5a)
/ Player gets there from the great hall where the black night is
0x0721 (0x6341): (0x19) If var[0x49] != (constant) 0x5a then Goto 0x0729

/ Print message  "The Black Knight is in the way "
0x0725 (0x6345): (0x05) Print message (constant) 0x2d6

/ Player is blocked by the black knight
0x0728 (0x6348): (0x02) Return

**************************************************************************
* Make the prince follow the player
**************************************************************************

/ Set the working object id to the prince (0xd7)
0x0729 (0x6349): (0x08) Set var[0x17] = (constant) 0xd7

/ Get the prince's current location
0x072c (0x634c): (0xa2) Set var[0x18] = list#2[var[0x17]] (list address 0x0500)

/ Branch if the prince is not in the same location as the player
0x072f (0x634f): (0x11) If var[0x18] != var[0x48] then Goto 0x073a

/ Branch if the target location is before "in a small recess which sounds
/ hollow underfoot" (0x46)
0x0733 (0x6353): (0x1a) If var[0x49] < (constant) 0x46 then Goto 0x073a

/ Set the location of the prince to where the player is going (player's
/ target location
0x0737 (0x6357): (0xe2) Set list#2[var[0x17]] = var[0x49] (list address 0x0500)

**************************************************************************
* See if the player is blocked by the rocking stone
**************************************************************************

/ Branch if the target location is not "walking along a sloping east-west passage. 
/ The ground is very damp and seaweed clings to the walls" (player will be
/ in the "low cave smelling of seaweed")
0x073a (0x635a): (0x19) If var[0x49] != (constant) 0x66 then Goto 0x074c

/ Location is as above

/ Set the working object id to the rocking stone (0xae)
0x073e (0x635e): (0x08) Set var[0x17] = (constant) 0xae

/ Get the current location of the stone
0x0741 (0x6361): (0xa2) Set var[0x18] = list#2[var[0x17]] (list address 0x0500)

/ Branch if the stone is NOT in the player's current location
0x0744 (0x6364): (0x11) If var[0x18] != var[0x48] then Goto 0x074c

/ Stone and player are in the same location

/ Print message  "The stone blocks you "
0x0748 (0x6368): (0x05) Print message (constant) 0x2dd

/ Stone blocks the player
0x074b (0x636b): (0x02) Return

**************************************************************************
* Check for the lute having opened the wooden panel and also if the 
* huge ironbound chest is closed - 
**************************************************************************

/ Branch if the target location is NOT the first hedge maze location (0x81)
0x074c (0x636c): (0x19) If var[0x49] != (constant) 0x81 then Goto 0x0755

/ Target is first hedge maze location

/ Branch if the lute has not been played to open the wooden panel
/ var[0x0d] is the constant 0x00
0x0750 (0x6370): (0x10) If var[0x47] == var[0x0d] then Goto 0x0696

/ Lute has been played and target is first hedge maze location

/ Branch if the target location is NOT "in the large, empty chest" (0x71)
0x0755 (0x6375): (0x19) If var[0x49] != (constant) 0x71 then Goto 0x0766

/ Branch if the huge ironbound chest is closed (0x00)
/ var[0x0d] is the constant 0x00
0x0759 (0x6379): (0x10) If var[0x40] == var[0x0d] then Goto 0x0696

/ Branch if there is no NPC in this location (NPC is 0x00)
/ var[0x0d] is the constant 0x00
0x075e (0x637e): (0x10) If var[0x4c] == var[0x0d] then Goto 0x0766

/ Print message  "Pete blocks you "
0x0762 (0x6382): (0x05) Print message (constant) 0x2c8

/ Player cannot get past Pete
0x0765 (0x6385): (0x02) Return

**************************************************************************
* Check if the player is blocked by the grate if entering the hypocaust
**************************************************************************

/ Branch if the target location is NOT in the first hypocaust location (0x9e)
0x0766 (0x6386): (0x19) If var[0x49] != (constant) 0x9e then Goto 0x0772

/ Branch If the grating has already been removed (0x01)
/ var[0x05] is the constant 0x01
0x076a (0x638a): (0x10) If var[0x21] == var[0x05] then Goto 0x0772

/ Grating stil in place

/ Print message  "The grating blocks you "
0x076e (0x638e): (0x05) Print message (constant) 0x2e2

/ Player can't go that way
0x0771 (0x6391): (0x02) Return

**************************************************************************
* Check to see if the player is blocked by the gladiator
**************************************************************************

/ If the player's current location is NOT "in the arena of the amphitheatre, 
/ surrounded by an immense cheering crowd" (0x9a)
0x0772 (0x6392): (0x19) If var[0x48] != (constant) 0x9a then Goto 0x0784

/ Location as above

/ Set the current working variable to the winged sandals
0x0776 (0x6396): (0x08) Set var[0x17] = (constant) 0x99

/ Get the current location of the winged sandals
0x0779 (0x6399): (0xa2) Set var[0x18] = list#2[var[0x17]] (list address 0x0500)

/ Branch if the player is not wearing the winged sandals
/ var[0x0a] is the constant for the location of an item when it's being worn
0x077c (0x639c): (0x10) If var[0x18] == var[0x0a] then Goto 0x0784

/ Player is NOT wearing the sandals

/ Print message  "The gladiator is too quick for you - he blocks your escape "
0x0780 (0x51a0): (0x05) Print message (constant) 0x2e5

/ Player is blocked
0x0783 (0x63a3): (0x02) Return

**************************************************************************
* Check to see if the player has the mattress to break their fall - 
* needed in two locations (see below)
**************************************************************************

/ Branch if the target location is "... a dull, lifeless crater." (0xb4)
0x0784 (0x63a4): (0x18) If var[0x49] == (constant) 0xb4 then Goto 0x078c

/ Branch if the target location is NOT "a dark, dingy hole between a ladder 
/ and a low tunnel" (0xbc)
0x0788 (0x63a8): (0x19) If var[0x49] != (constant) 0xbc then Goto 0x07a7


0x078c (0x63ac): (0x1a) If var[0x24] < (constant) 0x09 then Goto 0x07a7

/ Set the working object id to the mattress
0x0790 (0x63b0): (0x08) Set var[0x17] = (constant) 0x8d

/ Get the location of the mattress
0x0793 (0x63b3): (0xa2) Set var[0x18] = list#2[var[0x17]] (list address 0x0500)

/ Branch if the location of the mattress is in the player's inventory (0xe1)
/ var[0x09] is the constant 0xe1 which is the location for the inventory
0x0796 (0x63b6): (0x10) If var[0x18] == var[0x09] then Goto 0x07a4

/ Branch if the location is the same as the player's target location
0x079a (0x63ba): (0x10) If var[0x18] == var[0x49] then Goto 0x07a4

/ Print message  "There's nothing to break your fall "
0x079e (0x63be): (0x05) Print message (constant) 0x2ea

/ Kill the player
0x07a1 (0x63c1): (0x00) Goto 0x11f1

/ Print message "The mattress breaks your fall"
0x07a4 (0x63c4): (0x05) Print message (constant) 0x2eb

**************************************************************************
* Check to see if the player has the star otherwise they will not be
* authorised by the guards to enter either the alcove or the cubicle
**************************************************************************

/ Branch if the player's target location is not "in a cubicle" 0xb8 nor 
/ "in the alcove room" (0xb7)
0x07a7 (0x63c7): (0x1a) If var[0x49] < (constant) 0xb7 then Goto 0x07b2
0x07ab (0x63cb): (0x1b) If var[0x49] > (constant) 0xb9 then Goto 0x07b2

/ The player's target location IS "in a cubicle" 0xb8 nor 
/ "in the alcove room" (0xb7)

/ Check to see if the player has the star otherwise the guards will NOT
/ let the player into the alcove room nor the cubicle
0x07af (0x63cf): (0x01) Gosub 0x11dc

**************************************************************************
* Check to see if the cyberman is blocking the player
**************************************************************************

/ Branch if the current NPC is NOT the cyberman
0x07b2 (0x63d2): (0x19) If var[0x4c] != (constant) 0xe0 then Goto 0x07bd

/ Current NPC is the cyberman

/ Branch if the target location is back from where the cyberman is 
0x07b6 (0x63d6): (0x12) If var[0x49] < var[0x48] then Goto 0x07bd

/ Print message  "The cyberman blocks you "
0x07ba (0x63da): (0x05) Print message (constant) 0xea

/ Cyberman blocks the player
0x07bc (0x63dc): (0x02) Return

**************************************************************************
* Check to see if the force field is blocking the player
**************************************************************************

/ If the player's current location is NOT "outside a sports and aerobotics arena" (0xba)
0x07bd (0x63dd): (0x19) If var[0x48] != (constant) 0xba then Goto 0x07cc

/ Player is "outside a sports and aerobotics arena"

/ Branch if the target location is back from where the force field is
0x07c1 (0x63e1): (0x12) If var[0x49] < var[0x48] then Goto 0x07cc

/ Branch if the player has paid the galactic groat
0x07c5 (0x63e5): (0x13) If var[0x64] > var[0x0d] then Goto 0x07cc

/ Print message "A force field blocks you: Payment, please" (0xe7)
0x07c9 (0x63e9): (0x05) Print message (constant) 0xe7

/ Player is blocked by the forcefield
0x07cb (0x63eb): (0x02) Return

**************************************************************************
* Check to see if the plant is eating the player - if so the player 
* cannot move 
**************************************************************************

/ Branch to say "You can't go in that direction" if "the plant is eating
/ you" message is set (0x133)
0x07cc (0x63ec): (0x18) If var[0x4a] == (constant) 0x133 then Goto 0x0696

**************************************************************************
* Check for doors in the direction of travel and if it is open
**************************************************************************

/ Get the exit flags 
0x07d2 (0x63f2): (0x09) Set var[0x56] = var[0x4e]

/ Branch if there is NO door present - value will be less than 4 because
/ the third bit is set if there's a door
0x07d5 (0x63f5): (0x1a) If var[0x56] < (constant) 0x04 then Goto 0x07e2

/ Door present

/ If the door is open, skip ahead
/ var[0x0d] is the constant 0x00
0x07d9 (0x63f9): (0x13) If var[0x0f] > var[0x0d] then Goto 0x07e0

/ Door is closed

/ Print message "you bump into a door"
0x07dd (0x63fd): (0x05) Print message (constant) 0x3e

/ Player can't move that way
0x07df (0x63ff): (0x02) Return

/ Print message "the door closes behind you" (0x3f)
0x07e0 (0x6400): (0x05) Print message (constant) 0x3f

/ Move player to target location and perform location specific checks
0x07e2 (0x6402): (0x00) Goto 0x1225

**************************************************************************
* This is for phrases such as:
* "look into <object>" or
* "look across <object>" or 
* "look inside <object>" or 
* "look outside <object>" or 
* "look up <object>" or 
* "look down <object>" etc etc
*
* It converts phrase into "examine <object>" and runs it through the
* interpreter again
**************************************************************************

**************************************************************************
* Command: look into/across/inside/outside/up/down <object>
**************************************************************************

/ If the second word is NOT "look" (0x25) branch ahead
0x07e5 (0x6405): (0x19) If var[0x25] != (constant) 0x25 then Goto 0x07f5

/ Second word is "look"

/ Set the first word, the verb, to "examine" (0x23)
0x07e9 (0x6409): (0x08) Set var[0x24] = (constant) 0x23

/ Set the second word to the third word
0x07ec (0x640c): (0x09) Set var[0x25] = var[0x26]

/ Set the third word to null 
/ var[0x0d] is the constant 0
0x07ef (0x640f): (0x09) Set var[0x26] = var[0x0d]

/ Go back to the main loop but with the phrase changed to 
/ "examine <object>"
0x07f2 (0x6412): (0x00) Goto 0x04d1

**************************************************************************
* Command: attack/fight/kick/kill
**************************************************************************

**************************************************************************
* Process the chopping down of the tearful willow
**************************************************************************
/ Check the object in the second word is in the inventory or 
/ being worn by the player or if it's in the same location
/ as the player (if not, it won't return here)
0x07f5 (0x6415): (0x01) Gosub 0x1492

/ Object is being worn or is in the inventory or is in the same
/ location as the player

/ Is the object that "willow" (0xa7) if so, skip ahead
0x07f8 (0x6418): (0x18) If var[0x25] == (constant) 0xa7 then Goto 0x0800

/ Second word is NOT "willow"

/ If the third word is NOT "willow" branch ahead
0x07fc (0x641c): (0x19) If var[0x26] != (constant) 0xa7 then Goto 0x081a

/ Second or third word is "willow"

/ Set the second word to "axe" (0x76)
0x0800 (0x6420): (0x08) Set var[0x25] = (constant) 0x76

/ Check the "axe" is in the inventory or 
/ being worn by the player (if not, won't return here)
0x0803 (0x6423): (0x01) Gosub 0x1492

/ If the first supplemental message wasn't just set to "tears rain down
/ from the willow tree" either the player is in the wrong location or 
/ the willow is in the wrong state
0x0806 (0x6426): (0x19) If var[0x4a] != (constant) 0x12c then Goto 0x0817

/ Print message "With one swift blow you cut down the tree and it falls...."
0x080b (0x642b): (0x05) Print message (constant) 0xfc

/ Set the status of the weeping willow to "chopped down" (0x01)
0x080d (0x642d): (0x09) Set var[0x12] = var[0x05]

/ Set the second word (object) to the "sparkling teardrop"
0x0810 (0x6430): (0x08) Set var[0x25] = (constant) 0x55

/ Set the current location of the "sparkling teardrop" to the player's current location
0x0813 (0x6433): (0xe2) Set list#2[var[0x25]] = var[0x48] (list address 0x0500)

/ Willow chopped down
0x0816 (0x6436): (0x02) Return

/ Reset the second word to the "willow" (0xa7) (it was changed 
/ to "axe" above) but the supplemental message wasn't set so 
/ either the player is in the wrong location or the willow is in the
/ the wrong state. Just tidying up.
0x0817 (0x6437): (0x08) Set var[0x25] = (constant) 0xa7

**************************************************************************
* Process the shattering of the ice wall
**************************************************************************

/ Execution can reach here from immediately above or if "willow" was not in
/ player's input words
/ If the second object is not the "ice wall (0xa9) branch ahead
0x081a (0x643a): (0x19) If var[0x25] != (constant) 0xa9 then Goto 0x082d

/ Set the second word to "a grubby pick" 0x93
0x081e (0x643e): (0x08) Set var[0x25] = (constant) 0x93

/ Check to see if the player has the "grubby pick"
/ If they don't the "You don't have a grubby pick" will be printed 
/ and will not return here
0x0821 (0x6441): (0x01) Gosub 0x165b

/ Player has the "grubby pick"

/ Print message "The ice wall shatters"
0x0824 (0x6444): (0x05) Print message (constant) 0x145

/ Set the second word to the "wall" (0xa9) object
0x0827 (0x6447): (0x08) Set var[0x25] = (constant) 0xa9

/ Remove the "wall" object from the game by setting its 
/ location to 0xff
0x082a (0x644a): (0x00) Goto 0x1625

**************************************************************************
* Process the smashing of the ice cube around the throne
**************************************************************************

/ Branch if the second word is not the "cube" of ice object (0xac)
0x082d (0x644d): (0x19) If var[0x25] != (constant) 0xac then Goto 0x0846

/ It is the "cube" of ice

/ Set the second word to be the "pick" 
0x0831 (0x6451): (0x08) Set var[0x25] = (constant) 0x93

/ Check if player has the pick
0x0834 (0x6454): (0x01) Gosub 0x165b

/ Print message "The ice cube shatters, freeing the Snow Queen. 
/ She smiles, taps your shoulder with a sword and glides away" (0x144ff)
0x0837 (0x6457): (0x05) Print message (constant) 0x144

/ Set the second word back to being the "cube" (0xac)
0x083a (0x645a): (0x08) Set var[0x25] = (constant) 0xac

/ Remove the "ice cube" from the game by setting its location to 0xff
0x083d (0x645d): (0x01) Gosub 0x1625

/ Set the working object id to the sword (0x89)
0x0840 (0x6460): (0x08) Set var[0x25] = (constant) 0x89

/ Add the sword to inventory and increment number of items carried
0x0843 (0x6463): (0x00) Goto 0x1269

**************************************************************************
* Check if the player is attacking the cyberman and process it if so 
**************************************************************************

/ Check to see if the second word is "cyberman" or "cybermen" (0xe0)
/ if not skip ahead
0x0846 (0x6466): (0x19) If var[0x25] != (constant) 0xe0 then Goto 0x085d

/ Second word IS "cyberman" or "cybermen"

/ Change the second word to the "light sabre" object (0x68)
0x084a (0x646a): (0x08) Set var[0x25] = (constant) 0x68

/ Check to see if the player has the "light sabre"
/ If they don't the "You don't have a light sabre" will be printed 
/ and will not return here
0x084d (0x646d): (0x01) Gosub 0x165b

/ Print message "Your lightsabre makes short work of the cyberman"
0x0850 (0x6470): (0x05) Print message (constant) 0x2ee

/ Set the location of the cyberman to destroying (0xff)
/ var[0x4c] at this point contains the object id for the cyberman (0xe0)
/ var[0xc] contains the location id constant 0xff for detroyed / out of game
0x0853 (0x6473): (0xe2) Set list#2[var[0x4c]] = var[0xc] (list address 0x0500)

/ Set the working object id to "a jumble of broken robots" (0xb6)
0x0856 (0x6476): (0x08) Set var[0x17] = (constant) 0xb6

/ Set the current location of the robots to the current location
0x0859 (0x6479): (0xe2) Set list#2[var[0x17]] = var[0x48] (list address 0x0500)

/ Completed
0x085c (0x647c): (0x02) Return

**************************************************************************
* Check to see if it's an NPC that's being attacked otherwise 
* mesage "Only a fool would attack <object>"
**************************************************************************

/ Check to see if it's something you would attack (person/dinosaur etc)
/ all of which are beyond 0xc8.  Branch ahead to process it.
0x085d (0x647d): (0x1b) If var[0x25] > (constant) 0xc8 then Goto 0x0866

/ Everything below 0xc9 is an inanimate object 
/ so you'd be a fool to attack it

/ Print message "Only a fool would attack"
0x0861 (0x6481): (0x05) Print message (constant) 0x44

/ Print the object that the player is attacking, it's in var[0x25]
0x0863 (0x6483): (0x00) Goto 0x16d3

**************************************************************************
* Check to the size of the the NPC, which is held in list#3 
* depending on its size, drives a different outcome
**************************************************************************

0x0866 (0x6486): (0x1a) If var[0x4d] < (constant) 0x08 then Goto 0x0872

/ NPC value is 0x08 or greater inclusive

/ Print message "Only a fool would attack"
0x086a (0x648a): (0x05) Print message (constant) 0x44

/ Print the living thing that the player is attacking, it's in var[0x25]
0x086c (0x648c): (0x01) Gosub 0x16d3

/ Kill the player
0x086f (0x648f): (0x00) Goto 0x11f1

/ NPC strength is less than 0x08 at this point
0x0872 (0x6492): (0x1a) If var[0x4d] < (constant) 0x04 then Goto 0x087f

/ NPC value is between 0x04 and 0x07 inclusive

/ Set the current location of the NPC to out of the game 
0x0876 (0x6496): (0xe2) Set list#2[var[0x4c]] = var[0xb] (list address 0x0500)

/ Print message "You attack ferociously, scaring off"
0x0879 (0x6499): (0x05) Print message (constant) 0x16c

/ Print the name of the NPC
0x087c (0x649c): (0x00) Goto 0x16d3

/ NPC value is between 0x00 and 0x03 inclusive

/ Print message "Your blows are futile"
0x087f (0x649f): (0x05) Print message (constant) 0x16b

/ Return to the game
0x0882 (0x64a2): (0x02) Return

**************************************************************************
* Print the inventory
**************************************************************************

/ Print message "You own  \n"
0x0883 (0x64a3): (0x05) Print message (constant) 0x19

/ Set the contextual suffix for objects to the empty string
/ so nothing is accidentally print for objects in the inventory
0x0885 (0x64a5): (0x08) Set var[0x35] = (constant) 0x02

/ Set the target location to be the inventory (0xe1)
/ var[0x09] is the constant 0xe1
0x0888 (0x64a8): (0x09) Set var[0x49] = var[0x09]

/ Print all the objects in the inventory
0x088b (0x64ab): (0x01) Gosub 0x1552

/ Update the number of carried items variable to what was 
/ counted in the sub-routine
0x088e (0x64ae): (0x09) Set var[0x3a] = var[0x3c]

/ Check to see if the player has any objects in their inventory
/ if so skip ahead as the objects were printed above
/ (var[0x0d] is the constant 0x00)
0x0891 (0x64b1): (0x13) If var[0x3a] > var[0x0d] then Goto 0x0897

/ No items in the inventory so no object decriptions printed

/ Print message " nothing."
0x0895 (0x64b5): (0x05) Print message (constant) 0x3c

**************************************************************************
* Print what the player is wearing
**************************************************************************

/ Set the message id to the intro phrase "And you're wearing"
/ This will be printed before the first object
0x0897 (0x64b7): (0x08) Set var[0x35] = (constant) 0x1a

/ Set the location to check for and print objects to the 
/ wearing location (0xe2)
/ var[0x0a] is the constant 0xe2
0x089a (0x64ba): (0x09) Set var[0x49] = var[0x0a]

/ Print the objects the player is wearing with the 
/ prefix "And you're wearing" held in var[0x35]
0x089d (0x64bd): (0x01) Gosub 0x1552

/ Inventory command finished
0x08a0 (0x64c0): (0x02) Return

**************************************************************************
* Process "listen" or "hear"
**************************************************************************

/ This is a bug in this version of the a-code - it's printing the wrong message
/ when the player types "listen" or "hear" - the descriptions also do not
/ include the phrase "You hear nothing special"
/ Print message "an old mattress" (0x8d)
0x08a1 (0x64c1): (0x05) Print message (constant) 0x8d

/ Listen command complete
0x08a3 (0x64c3): (0x02) Return

**************************************************************************
*  Command "plugh" or "plover" or "sesame" or "xyzzy",
**************************************************************************

/ Print message "the magic word doesn't work" (0xe6)
0x08a4 (0x64c4): (0x05) Print message (constant) 0xe6

/ Magic word command complete
0x08a6 (0x64c6): (0x02) Return

**************************************************************************
* Ask if the player really wants to quit and process response
**************************************************************************

/ Set the temporary message id to "Really stop?" (0x35)
0x08a7 (0x64c7): (0x08) Set var[0x35] = (constant) 0x35

/ Print the message and get the user response
0x08aa (0x64ca): (0x01) Gosub 0x1522

/ Skip ahead and quit if the user said yes
/ var[0x0d] is the constant 0x00, which is no in this instance
0x08ad (0x64cd): (0x13) If var[0x5f] > var[0x0d] then Goto 0x1215

/ Print message "be more careful in the future" 0xbf
0x08b2 (0x64d2): (0x05) Print message (constant) 0xbf

/ Back to the game
0x08b4 (0x64d4): (0x02) Return

**************************************************************************
* Ask if the player really wants to restore and process response
**************************************************************************

/ Set the temporary message id to "Really restore?" (0x37)
0x08b5 (0x64d5): (0x08) Set var[0x35] = (constant) 0x37

/ Print the message and get the user response
0x08b8 (0x64d8): (0x01) Gosub 0x1522

/ Skip ahead and quit if the user said yes
/ var[0x0d] is the constant 0x00, which is no in this instance
0x08bb (0x64db): (0x13) If var[0x5f] > var[0x0d] then Goto 0x08c2

/ Print message "be more careful in the future" 0xbf
0x08bf (0x64df): (0x05) Print message (constant) 0xbf

/ Back to the game
0x08c1 (0x64e1): (0x02) Return

**************************************************************************
* Restore the game
**************************************************************************

/ Restore from the save game
0x08c2 (0x64e2): (0x06) Function - Restore (0x04)

/ Print the location description or "it's dark"
0x08c4 (0x64e4): (0x00) Goto 0x0165

**************************************************************************
/ NOTE Isn't called by anything...
0x08c7 (0x64e7): (0x02) Return

**************************************************************************
* Save the game
**************************************************************************

/ Call the save game function
0x08c8 (0x64e8): (0x06) Function - Save (0x03)

/ Print the location description or "it's dark"
0x08ca (0x64ea): (0x00) Goto 0x0165

**************************************************************************
* Print "I didn't expect that!"
**************************************************************************

/ Print message "I didn't expect that!"
0x08cd (0x64ed): (0x05) Print message (constant) 0x134
0x08d0 (0x64f0): (0x02) Return

**************************************************************************
* Print player's score 
**************************************************************************

/ Set the score to zero
/ var[0x0d] is the constant 0x00
0x08d1 (0x64f1): (0x09) Set var[0x4f] = var[0x0d]

/ Score increment is 25 (0x19) per hourglass marked item
0x08d4 (0x64f4): (0x08) Set var[0x56] = (constant) 0x19

/ Going to loop through all the game objects so start with the first 
/ that has object id (0x50)
0x08d7 (0x64f7): (0x08) Set var[0x17] = (constant) 0x50

/ Get the location of the object 
0x08da (0x64fa): (0xa2) Set var[0x18] = list#2[var[0x17]] (list address 0x0500)

/ If the object is in the player's inventory (0xe1) then skip ahead to add score
/ var[0x09] is the constant 0xe1
0x08dd (0x65fd): (0x10) If var[0x18] == var[0x09] then Goto 0x08ed

/ If the object is being worn by the player (0xE2) then the skip ahead to add acore
/ var[0x0a] is the constant 0xe2
0x08e1 (0x6501): (0x10) If var[0x18] == var[0x0a] then Goto 0x08ed

/ If the object is the in the location "...grandfather clock..." (0x03) then skip ahead to add score
/ NOTE weird it doesn't use the constant var[0x07] here
0x08e5 (0x6505): (0x18) If var[0x18] == (constant) 0x03 then Goto 0x08ed

/ If the object is NOT in the "cauldron", branch ahead and move to the next object
/ (Object not in inventory, being worn, in the clock or in the cauldron at this point)
0x08e9 (0x6509): (0x19) If var[0x18] != (constant) 0xdc then Goto 0x0901

/ Object IS in the inventory, being worn, in the clock or in the cauldron

/ If the object id is greater than 0x58 branch ahead - only objects 
/ 0x50 - 0x58 score 50 points each
0x08ed (0x650d): (0x1b) If var[0x17] > (constant) 0x58 then Goto 0x08f7

/ Object is either in the player's inventory, being worn by the player, 
/ in the "grandfather clock" or in the cauldron" so add it to the score
/ and it's one of these valuble objects. Note the "fine looking 
/ golden hourglass" (0x66) doesn't score 50 points, only 25.
/ So maximum 450 points here
/ 0x50 - an olive branch
/ 0x51 - a golden buckle
/ 0x52 - the jester's cap
/ 0x53 - a silicon chip
/ 0x54 - a tightly-closed box
/ 0x55 - a diamond teardrop
/ 0x56 - an ivory tusk
/ 0x57 - a little dragon's wing
/ 0x58 - a dinosaur egg

/ Add 25 (0x19) to the player's score
0x08f1 (0x6511): (0x0a) Set var[0x4f] += var[0x56]

/ Add another 25 (0x19) to the player's score
0x08f4 (0x6514): (0x0a) Set var[0x4f] += var[0x56]

/ Reminder that object IS in the inventory, being worn, in the clock or in the cauldron
/ Object is any object at this point

/ Get the value of the item - only scores here if the value >= 2 and valid values
/ appear to be 0x00, 0x01 and 0x03
0x08f7 (0x6517): (0xa3) Set var[0x18] = list#3[var[0x17]] (list address 0x1ef0)

/ Check list#3 to see if this item can be scored 25 points
/ if not, then branch ahead to move to the next object
/ (var[0x06] is the constant 0x02)
0x08fa (0x651a): (0x12) If var[0x18] < var[0x06] then Goto 0x0901

/ The following objects can be scored 25 points (each has a list value of 0x03)
/ Need to be dropped in the grandfather clock, be in the inventory or wearing them
/
/ Only these objects will score here @ 25 points each (max 475):
/ 0x5f - an oriental rug
/ 0x60 - a jewellery case
/ 0x65 - a drinking horn 
/ 0x66 - a fine golden hourglass
/ 0x6a - a lute
/ 0x6c - a fine metronome
/ 0x6f - a stone pot
/ 0x74 - The Wheel
/ 0x79 - a silver candelabra
/ 0x7b - <candlestick in dictionary but missing description and not available in game>
/ 0x7c - a flimsy cloak
/ 0x7f - jewelled coffer
/ 0x81 - a jewelled crown
/ 0x82 - an emerald
/ 0x84 - an onyx figurine
/ 0x8a - a carved lodestone
/ 0x92 - a glass phial
/ 0x97 - a curved ruby
/ 0x9b - a fallen star

/ Add 25 (0x19) to the player's score
0x08fe (0x651e): (0x0a) Set var[0x4f] += var[0x56]

/ Move onto the next object (add 0x01 to the working object id)
0x0901 (0x6521): (0x0a) Set var[0x17] += var[0x05]

/ Last object has id 0x9f so if the working object id is less than that
/ loop back around above and consider it for the scores
0x0904 (0x6524): (0x1a) If var[0x17] < (constant) 0xa0 then Goto 0x08da

/ All objects processed for the score

/ Check player game progress and add to score as required

/ Check if the player has "abandoned hope" at the "ugly arch" 
/ If it's set to one, add to the score 
/ If it's set to zero, skip ahead and don't add to the score
/ var[0x0d] is the constant 0x00
0x0908 (0x6528): (0x10) If var[0x5a] == var[0x0d] then Goto 0x090f

/ Add 25 (0x19) to the score
0x090c (0x652c): (0x0a) Set var[0x4f] += var[0x56]

/ If the "cages" are still closed in the "experimental laboratory", skip ahead
/ var[0x0d] is the constant 0x00
0x090f (0x652f): (0x10) If var[0x5d] == var[0x0d] then Goto 0x0916

/ Cages are open, animals released

/ Add 25 (0x19) to the score
0x0913 (0x6533): (0x0a) Set var[0x4f] += var[0x56]

/ If the "bars" are still closed in the "worse laboratory", skip ahead
/ var[0x0d] is the constant 0x00 
0x0916 (0x6536): (0x10) If var[0x5e] == var[0x0d] then Goto 0x091d

/ Bars open, humans released

/ Add 25 (0x19) to the score
0x091a (0x653a): (0x0a) Set var[0x4f] += var[0x56]

/ Check to see if he player has completed the cauldron recipe 
/ (completed the game).  If not, skip ahead
0x091d (0x653d): (0x10) If var[0x60] == var[0x0d] then Goto 0x0924

/ Recipe complete, game complete

/ Add 25 (0x19) to the score
0x0921 (0x6541): (0x0a) Set var[0x4f] += var[0x56]

/ Subtract the death score (amount of resurrections * 100) from
/ the score
0x0924 (0x6544): (0x0b) Set var[0x4f] -= var[0x62]

/ If the score is less than 2000 skip ahead
0x0927 (0x6547): (0x1a) If var[0x4f] < (constant) 0x7d0 then Goto 0x092f

/ Score is greater than or equal to 2000

/ Set the score to zero (NOTE WHY?)
0x092c (0x654c): (0x09) Set var[0x4f] = var[0x0d]

/ Print message "\nYou score\n"
0x092f (0x654f): (0x05) Print message (constant) 0x39

/ Print the player's score held in var[0x4f]
0x0931 (0x6551): (0x03) Print Number var[0x4f]

/ Print " out of 1000"
0x0933 (0x6553): (0x05) Print message (constant) 0x3a

/ Finished!
0x0935 (0x6555): (0x02) Return

**************************************************************************
* Print "Time goes by" with five dots with a pause between each
**************************************************************************

/ Print message "Time goes by \n"
0x0936 (0x6556): (0x05) Print message (constant) 0x16e

/ Set the dot counter to zero 
/ var[0x0d] is the constant zero
0x0939 (0x6559): (0x09) Set var[0x56] = var[0x0d]

/ Set the delay counter to zero
0x093c (0x655c): (0x09) Set var[0x57] = var[0x0d]

/ Add one to the delay counter
/ var[0x05] is the constant one
0x093f (0x655f): (0x0a) Set var[0x57] += var[0x05]

/ Count to 1000 (0x3e8) as a delay - if we've reached 100 then stop looking
0x0942 (0x6562): (0x1a) If var[0x57] < (constant) 0x3e8 then Goto 0x093f

/ Print message ". "
0x0947 (0x6567): (0x05) Print message (constant) 0x04

/ Increment the dot counter
0x0949 (0x6569): (0x0a) Set var[0x56] += var[0x05]

/ If less than five dots have been printed (starts at 0) then 
/ loop above
0x094c (0x656c): (0x1a) If var[0x56] < (constant) 0x05 then Goto 0x093c

/ All dots printed
0x0950 (0x6570): (0x02) Return

**************************************************************************
* Command: give/feed/pay
**************************************************************************

/ Check to see if the player has the <object> in word 2 in their inventory
/ or they are wearing it - won't return if they don't have it
0x0951 (0x6571): (0x01) Gosub 0x165b

**************************************************************************
* Check to see if the player is outside the sports and aerobatic arena
* if so set the third word to cyberman so it can trigger the galactic
* groat check which seems reliant on that
**************************************************************************

/ If the current location is NOT "outside a sports and aerobotic arena"
/ skip ahead
0x0954 (0x6574): (0x19) If var[0x48] != (constant) 0xba then Goto 0x0960

/ Outside a sports and aerobotic arena

/ Set the current NPC to the cyberman
0x0958 (0x6578): (0x08) Set var[0x4c] = (constant) 0xe0

/ Set the third word to cyberman (0xe0) 
/ NOTE seems to be a feature for switching loater on when the player is 
/ giving the galactic groat - it enters that processing by looking for the
/ cyberman as the third word (not that the cyberman is actually in this
/ location as he's in the fencing hall)
0x095b (0x657b): (0x09) Set var[0x26] = var[0x4c]

/ Process the NPCs (and see if the galactic groat is being given)
0x095e (0x657e): (0x00) Goto 0x0983

/ If the NPC or fixed object is being referenced, branch ahead
0x0960 (0x6580): (0x1b) If var[0x26] > (constant) 0xa0 then Goto 0x096e

/ Branch if there's an NPC in this location
/ var[0x0d] is the constant 0x00
0x0964 (0x6584): (0x13) If var[0x4c] > var[0x0d] then Goto 0x096b

/ No NPC

/ Print message  "There's no one to give it to "
0x0968 (0x6588): (0x05) Print message (constant) 0xf0

/ No NPC to give an item to 
0x096a (0x658a): (0x02) Return

**************************************************************************
* Check to see if the NPC or fixed object (e.g. mushroom heap) is in this location
**************************************************************************

/ Set the second word to the NPC in this location
0x096b (0x658b): (0x09) Set var[0x26] = var[0x4c]

/ Get the current location of the NPC or fixed object (depending on whether
/ the code went through 0x096b or not)
0x096e (0x658e): (0xa2) Set var[0x18] = list#2[var[0x26]] (list address 0x0500)

/ Branch if the NPC's location is the same as the player's
0x0971 (0x6591): (0x10) If var[0x18] == var[0x48] then Goto 0x0979

/ NPC is not in this location

/ Print message  "You can't see "
0x0975 (0x6595): (0x05) Print message (constant) 0x29

/ NPC couldn't be seen
0x0977 (0x6597): (0x00) Goto 0x098b

**************************************************************************
* If the player is trying to give an object with a code > 0xa0 to 
* an NPC, say "What a queer thing to do to (e.g.) a compost heap
* spilling onto the path". Example command "give heap to fairy"
**************************************************************************

/ Check the third input word, 
0x0979 (0x6599): (0x10) If var[0x26] == var[0x4c] then Goto 0x0983

/ Print message "What a queer thing to do to"
0x097d (0x659d): (0x05) Print message (constant) 0x16a

/ Print the NPC or fixed object name
0x0980 (0x65a0): (0x00) Goto 0x16da

**************************************************************************
* When the player offers the fairy the tooth, the fairy offers first 
* just a coin, if the player refuses, the fairy then also offers the 
* firefly. If the player refuses this, then the player gets nothing
**************************************************************************

/ If the third matched word isn't "fairy" branch ahead
0x0983 (0x65a3): (0x19) If var[0x26] != (constant) 0xc9 then Goto 0x09bc

/ Third word is "fairy"

/ If the second matched word isn't "tooth" branch ahead
0x0987 (0x65a7): (0x19) If var[0x25] != (constant) 0x9f then Goto 0x09bc

/ Second word is tooth - if the fairy is given the tooth, the fairy first
/ offers to give the player just the silver coin - but if the player
/ refuses this, the player is also offfered the firefly 
/ (to be used once the candle is burnt out)

/ Remove the "tooth" from the game by setting it to the location 0xff
0x098b (0x65ab): (0x01) Gosub 0x1625

/ Set the message id to "The tooth fairy examines it closely and says, 
/ "This isn't our usual kind of tooth, most odd - tell you what, I'll swap it 
/ for one silver coin. Is that a deal?"
0x098e (0x65ae): (0x08) Set var[0x35] = (constant) 0x15e

/ Print the message (offer just the silver coin) and ask the player
/  to enter a yes/no response and capture the response
0x0992 (0x65b2): (0x01) Gosub 0x1522

/ If the response wasn't "No", branch ahead
0x0995 (0x65b5): (0x11) If var[0x24] != var[0x05] then Goto 0x09af

/ Response was "no"

/ Set the message id to ""Mmm. Perhaps I could throw in a firefly too. OK?"
0x0999 (0x65b9): (0x08) Set var[0x35] = (constant) 0x15f

/ Print the message and ask the user to enter a yes/no response 
/ and capture the response
0x099d (0x65bd): (0x01) Gosub 0x1522

/ If the response wasn't "No", branch ahead
0x09a0 (0x65c0): (0x11) If var[0x24] != var[0x05] then Goto 0x09a9

/ Response was "no" to the silver coin AND the firefly

/ Print message "Then you'll get NOTHING!" (0x160)
0x09a4 (0x65c4): (0x05) Print message (constant) 0x160

/ Print the message that the fairy takes the tooth and remove the fairy
/ from the game
0x09a7 (0x65c7): (0x00) Goto 0x09b5

**************************************************************************
* Player said yes to the firefly and silver coin from the fairy
**************************************************************************

/ Set the working object id to the "firefly"
0x09a9 (0x65c9): (0x08) Set var[0x25] = (constant) 0x85

/ Add the item to the player's inventory and increment number of items held
0x09ac (0x65cc): (0x01) Gosub 0x1269

/ Set the working object id to the "coins"
0x09af (0x65cf): (0x08) Set var[0x25] = (constant) 0x80

/ Add the item to the player's inventory and increment number of items held
0x09b2 (0x65d2): (0x01) Gosub 0x1269

/ Print message "\nThe fairy takes your tooth and leaves." (0x161)
0x09b5 (0x65d5): (0x05) Print message (constant) 0x161

/ Remove the fairy from the game by setting its location to 0xff
/ var[0xc] is the constant 0xff
0x09b8 (0x65d8): (0xe2) Set list#2[var[0x4c]] = var[0xc] (list address 0x0500)

/ Fairy processing complete
0x09bb (0x65db): (0x02) Return

**************************************************************************
* Check to see if the player is feeding the tiger with the tinned food
**************************************************************************

/ If the third word is NOT "tiger" (0xcb) and branch ahead
0x09bc (0x65dc): (0x19) If var[0x26] != (constant) 0xcb then Goto 0x09da

/ Third word is tiger

/ Check to see if the second word is "tin" (0x9c) and branch if not
0x09c0 (0x65e0): (0x19) If var[0x25] != (constant) 0x9c then Goto 0x09da

/ Check to see if the "tin" is open, it no branch to where the tiger kills the player
(var[0x0d] is the constant 0x00 and var[0x42] holds the tin state)
0x09c4 (0x65e4): (0x10) If var[0x42] == var[0x0d] then Goto 0x09d1

/ Print message "The tiger gulps down the food greedily and purrs at you" (0x162)
0x09c8 (0x65e8): (0x05) Print message (constant) 0x162

/ Set the flag that indicates that the tiger has been fed (0x01)
/ var[0x05] is the constant 0x01
0x09cb (0x65eb): (0x09) Set var[0x1d] = var[0x05]

/ Remove the "tin" from the inventory and remove it from the game (set location to 0xff)
0x09ce (0x65ee): (0x00) Goto 0x1625

/ Print message "You forgot to open it!\n" (0x155)
0x09d1 (0x65f1): (0x05) Print message (constant) 0x155

/ Print message "The tiger does not like that one bit. It attacks.." (0x156)
0x09d4 (0x65f4): (0x05) Print message (constant) 0x156

/ Kill the player
0x09d7 (0x65f7): (0x00) Goto 0x11f1

**************************************************************************
* Check to see if the player is feeding the leaves to the brontosaurus
**************************************************************************

/ If the third word is NOT brontosaurus (0xce) branch ahead
0x09da (0x65fa): (0x19) If var[0x26] != (constant) 0xce then Goto 0x09f1

/ If the second word is NOT leaves (0x5d) branch ahead
0x09de (0x65fe): (0x19) If var[0x25] != (constant) 0x5d then Goto 0x09f1

/ Print message "The brontosaurus grabs the leaves and pulls them into the air. It carries you out of the pit!"
0x09e2 (0x6602): (0x05) Print message (constant) 0x163

/ Remove the leaves (0x5d) from the game by setting the location to 0xff
0x09e5 (0x6605): (0x01) Gosub 0x1625

/ Change the player's target location to "You are by the edge of the pit." (0x37)
0x09e8 (0x6608): (0x08) Set var[0x49] = (constant) 0x37

/ Change the Brontosaurus's current location to "You are by the edge of the pit." (0x37)
0x09eb (0x660b): (0xe2) Set list#2[var[0x4c]] = var[0x49] (list address 0x0500)

/ Move player to target location and perform location specific checks
0x09ee (0x660e): (0x00) Goto 0x1225

**************************************************************************
* Check to see if the player is giving the bartender the nugget or coin or groat
**************************************************************************

/ If the third word is NOT the bartender (0xd2) then branch ahead
0x09f1 (0x6611): (0x19) If var[0x26] != (constant) 0xd2 then Goto 0x0a0e

/ It IS the bartender

/ If the second word is the nugget (0x8f) then branch ahead as the 
/ barman will give the player the ale
0x09f5 (0x6615): (0x18) If var[0x25] == (constant) 0x8f then Goto 0x0a05

/ If the second word is the coins (0x80) then branch ahead as it's not worth 
/ enough
0x09f9 (0x6619): (0x18) If var[0x25] == (constant) 0x80 then Goto 0x0a01

/ If the second word is NOT the galactic groat (0x80) then branch ahead
0x09fd (0x661d): (0x19) If var[0x25] != (constant) 0x87 then Goto 0x0a0e

/ Bartender doesn't like what he's been given

/ Print message  "Not worth enough "
0x0a01 (0x6621): (0x05) Print message (constant) 0x165

/ No ale for the player...
0x0a04 (0x6624): (0x02) Return

/ Print message  ""OK, the ale's yours" "
0x0a05 (0x6625): (0x05) Print message (constant) 0x164

/ Set the bartender has been paid flag to 0x01
/ var[0x05] is the constant 0x01
0x0a08 (0x6628): (0x09) Set var[0x45] = var[0x05]

/ Remove the nugget from the game by setting its location to 0xff
0x0a0b (0x662b): (0x00) Goto 0x1625

**************************************************************************
* Check to see if the player is giving the thirsty messenger the ale
**************************************************************************

/ If the third word is NOT the thirsty messenger (0xd4) then branch ahead
0x0a0e (0x662e): (0x19) If var[0x26] != (constant) 0xd4 then Goto 0x0a25

/ Third word is the thirsty messenger

/ If the second word is NOT the ale (0x61) then branch ahead
0x0a12 (0x6632): (0x19) If var[0x25] != (constant) 0x61 then Goto 0x0a25

/ Second word is the ale

/ Print message  ""Thanks very much! Just what I wanted!" The messenger drinks the ale and shares some of his food with you "
0x0a16 (0x6636): (0x05) Print message (constant) 0x166

/ Remove the ale from the game by setting its location to 0xff
0x0a19 (0x6639): (0x01) Gosub 0x1625

/ Remove the thirsty messenger from the game by setting the location to 0xff
/ var[0xc] is the constant 0xff
0x0a1c (0x663c): (0xe2) Set list#2[var[0x4c]] = var[0xc] (list address 0x0500)

/ The thirsty messenger gives the player delicious food, so set the working object it to the food (0x86)
0x0a1f (0x663f): (0x08) Set var[0x25] = (constant) 0x86

/ Add the food to the player's inventory
0x0a22 (0x6642): (0x00) Goto 0x1269

**************************************************************************
* Check if the player is giving food to the dragon
**************************************************************************

/ Branch ahead if the second word is NOT "food"
0x0a25 (0x6645): (0x19) If var[0x25] != (constant) 0x86 then Goto 0x0a4e

/ Second word is "food" (0x86)

/ Branch ahead if the third word is NOT "dragon"
0x0a29 (0x6649): (0x19) If var[0x26] != (constant) 0xd5 then Goto 0x0a4e

/ Remove the dragon from the game by setting its location to 0xff
/ var[0xc] is the constant 0xff
0x0a2d (0x664d): (0xe2) Set list#2[var[0x26]] = var[0xc] (list address 0x0500)

/ Print message  "The dragon eats the food with obvious relish: "Thanks mate, that was very good - could have done with a touch more mustard though."\n "
0x0a30 (0x6650): (0x05) Print message (constant) 0x15c

/ Remove the food from the inventory and game by setting its location to 0xff
0x0a33 (0x6653): (0x01) Gosub 0x1625

/ Set the message to "I feel like a walk now, would you like a ride on my back?" (0x15b)
0x0a36 (0x6656): (0x08) Set var[0x35] = (constant) 0x15b

/ Print the question and get the player's response
0x0a3a (0x665a): (0x01) Gosub 0x1522

/ Check to see if the first word has a dictionary code of 0x01
/ When a player answers No it's interpreted as North (0x01)
/ And yes as 0x1e
/ var[0x05] is the constant 1 
0x0a3d (0x665d): (0x11) If var[0x24] != var[0x05] then Goto 0x0a45

/ Player said no

/ Print message "The dragon stalks off in a huff"
0x0a41 (0x6661): (0x05) Print message (constant) 0x159

/ Finished
0x0a44 (0x6664): (0x02) Return

/ Player said yes

/ Print message "The dragon lets you climb on his back and you travel along quite happily, 
/ back the way you came, until you reach the edge of a moat. The dragon 
/ tries to fly over it but only succeeds in belly-flopping into the water. It slinks off, dripping"
/ (0x15a)
0x0a45 (0x6665): (0x05) Print message (constant) 0x15a

/ Set the target location to "standing in ankle deep scummy water below 
/ the south bank of the moat" (0x53)
0x0a48 (0x6668): (0x08) Set var[0x49] = (constant) 0x53

/ Move player to target location and perform location specific checks
0x0a4b (0x666b): (0x00) Goto 0x1225

**************************************************************************
* Check if the player is giving the coat to the viking
**************************************************************************

/ Branch if the third word is NOT the viking
0x0a4e (0x666e): (0x19) If var[0x26] != (constant) 0xda then Goto 0x0a65

/ Branch if the second word is NOT the coat 
0x0a52 (0x6672): (0x19) If var[0x25] != (constant) 0x7e then Goto 0x0a65

/ Player is giving the coat to the viking

/ Print message "The viking is delighted by the warm fur and hands you a lur. 
/ "There is a reward for capturing the pirate", he says" (0x126)
0x0a56 (0x6676): (0x05) Print message (constant) 0x126

/ Remove the coat from the game by setting its location of 0xff
0x0a59 (0x6679): (0x01) Gosub 0x1625

/ Remove the viking from the game by setting his location to 0xff
/ var[0x0c] is the constant 0xff
0x0a5c (0x667c): (0xe2) Set list#2[var[0x4c]] = var[0xc] (list address 0x0500)

/ Set the second word to the lur (0x8b)
0x0a5f (0x667f): (0x08) Set var[0x25] = (constant) 0x8b

/ Add it to the player's inventory 
0x0a62 (0x6682): (0x00) Goto 0x1269

**************************************************************************
* Check if the player is giving the coin to the android
**************************************************************************

/ Branch if the third word is NOT the android (0xdf)
0x0a65 (0x6685): (0x19) If var[0x26] != (constant) 0xdf then Goto 0x0a79

/ Branch if the second word is NOT the coin (0x80)
0x0a69 (0x6689): (0x19) If var[0x25] != (constant) 0x80 then Goto 0x0a79

/ Player is giving the coin to the android

/ Print message "The android exchanges your coin for a Galactic Groat" (0x15d)
0x0a6d (0x668d): (0x05) Print message (constant) 0x15d

/ Remove the coin from the player's inventory and game by setting its location to 0xff
0x0a70 (0x6690): (0x01) Gosub 0x1625

/ Set the second word to the galactic groat (0x87)
0x0a73 (0x6693): (0x08) Set var[0x25] = (constant) 0x87

/ Add the galactic groat to the player's inventory
0x0a76 (0x6696): (0x00) Goto 0x1269

**************************************************************************
* Check if the player is giving the looking glass to the narcissus
**************************************************************************

/ Branch if the third word is NOT the narcissus (0xe1)
0x0a79 (0x6699): (0x19) If var[0x26] != (constant) 0xe1 then Goto 0x0a8d

/ Branch if the second word is NOT the looking glass (0x69)
0x0a7d (0x669d): (0x19) If var[0x25] != (constant) 0x69 then Goto 0x0a8d

/ Player is giving the looking glass to the narcissus

/ Print message "The narcissus squeaks with joy and rewards you with a 
/ lodestone. He admires himself delightedly in the looking-glass" (0x168)
0x0a81 (0x66a1): (0x05) Print message (constant) 0x168

/ Remove the looking glass from the player's inventory by setting its location to 0xff
0x0a84 (0x66a4): (0x01) Gosub 0x1625

/ Set the second word to the lodestone (0x8a)
0x0a87 (0x66a7): (0x08) Set var[0x25] = (constant) 0x8a

/ Add the lodestone to the player's inventory
0x0a8a (0x66aa): (0x00) Goto 0x1269

**************************************************************************
* Check if the player is giving the sweetmeats to the dogs
**************************************************************************

/ Branch if the third word is NOT the hunting dogs (0xe3)
0x0a8d (0x66ad): (0x19) If var[0x26] != (constant) 0xe3 then Goto 0x0aaa

/ Branch if the second word is NOT the sweetmeats (0x72)
0x0a91 (0x66b1): (0x19) If var[0x25] != (constant) 0x72 then Goto 0x0a9e

/ Player is giving the sweetmeats to the dogs

/ Print message "The dogs gulp down the delicacies, wagging their tails, 
/ before waddling off for a nap"
0x0a95 (0x66b5): (0x05) Print message (constant) 0x169

/ Remove the dogs from the game by setting their location to 0xff 
/ var[0x0c] is the constant 0xff
0x0a98 (0x66b8): (0xe2) Set list#2[var[0x26]] = var[0xc] (list address 0x0500)

/ Remove the sweetmeats from the player's inventory by setting their location to 0xff
0x0a9b (0x66bb): (0x00) Goto 0x1625

/ Branch if the second word is the bone (0x5b)
0x0a9e (0x66be): (0x18) If var[0x25] == (constant) 0x5b then Goto 0x0aa6

/ Branch if the second word is NOT the food (0x86)
0x0aa2 (0x66c2): (0x19) If var[0x25] != (constant) 0x86 then Goto 0x0aaa

/ Neither sweetmeats of food

/ Print message "The dogs turn up their cultured noses"
0x0aa6 (0x66c6): (0x05) Print message (constant) 0x2de

/ Finished 
0x0aa9 (0x66c9): (0x02) Return

**************************************************************************
* Check if the player is giving the joker to the jester
**************************************************************************

/ Branch if the third word is NOT the Jester (0xd9)
0x0aaa (0x66ca): (0x19) If var[0x26] != (constant) 0xd9 then Goto 0x0ac1

/ Is the Jester

/ Branch if the second word is NOT the joker card (0x88)
0x0aae (0x66ce): (0x19) If var[0x25] != (constant) 0x88 then Goto 0x0ac1

/ Player is giving the joker to the jester

/ Print message "The Jester laughs with glee, "Thank you my friend"! He gives 
/ you his belled cap before dancing off" (0x167)
0x0ab2 (0x66d2): (0x05) Print message (constant) 0x167

/ Remove the joker from the player's inventory by setting its location to 0xff
0x0ab5 (0x66d5): (0x01) Gosub 0x1625

/ Remove the jester from the game by setting his location to 0xff
/ var[0x0c] is the constant 0xff
0x0ab8 (0x66d8): (0xe2) Set list#2[var[0x4c]] = var[0xc] (list address 0x0500)

/ Set the second word to the belled cap (0x52)
0x0abb (0x66db): (0x08) Set var[0x25] = (constant) 0x52

/ Add the belled cap to the player's inventory
0x0abe (0x66de): (0x00) Goto 0x1273

**************************************************************************
* Check if the player is giving the bone to the fox
**************************************************************************

/ Branch if the third word is NOT the fox (0xe2)
0x0ac1 (0x66e1): (0x19) If var[0x26] != (constant) 0xe2 then Goto 0x0ad5

/ Branch if the second word is NOT the bone (0x5b)
0x0ac5 (0x66e5): (0x19) If var[0x25] != (constant) 0x5b then Goto 0x0ad5

/ Print message "The fox grabs the bone and slinks off"
0x0ac9 (0x66e9): (0x05) Print message (constant) 0x152

/ Remove the bone from the player's inventory
0x0acc (0x66ec): (0x01) Gosub 0x1625

/ Set the second word to the fox (0xe2)
0x0acf (0x66ef): (0x09) Set var[0x25] = var[0x26]

/ Remove the fox from the game by setting it's location to 0xff
0x0ad2 (0x66f2): (0x00) Goto 0x1625

**************************************************************************
* Check to see if sword is being given to the prince
**************************************************************************

/ Check to see if the player's target for the give is the prince (0xd7)
/ If not, branch away
0x0ad5 (0x66f5): (0x19) If var[0x26] != (constant) 0xd7 then Goto 0x0ae5

/ Check to see if the player is giving the sword (0x89)
/ If not, branch away
0x0ad9 (0x66f9): (0x19) If var[0x25] != (constant) 0x89 then Goto 0x0ae5

/ Print message "Ta, love"
0x0add (0x66fd): (0x05) Print message (constant) 0xeb

/ Set the flag that indicates that the sword has been given to the prince
/ var[0x05] is the constant 0x01
0x0adf (0x66ff): (0x09) Set var[0x46] = var[0x05]

/ Remove the sword from the game by setting its location to 0xff
0x0ae2 (0x6702): (0x00) Goto 0x1625

**************************************************************************
* Check to see if the player is giving the galactic groat to the android
**************************************************************************

/ Earlier, if the player was "outside the sports and aerobatic arena"
/ the NPC was set tot he Cyberman as a hack to allow a trigger here
/ against the cyberman and galatic groat.  They player is NOT giving the
/ groat to the cyberman, but to the android.
/ NOTE why couldn't the use the Android NPC instead as it's actually at the
/ location

/ Branch if the third word is NOT the cyberman (0xe0)
0x0ae5 (0x6705): (0x19) If var[0x26] != (constant) 0xe0 then Goto 0x0af5

/ It is the cyberman

/ Branch if the second word is NOT the galactic groat (0x87)
0x0ae9 (0x6709): (0x19) If var[0x25] != (constant) 0x87 then Goto 0x0af5

/ It is the cyberman and the galactic groat

/ Print message "Entry now authorised today"
0x0aed (0x670d): (0x05) Print message (constant) 0xe8

/ Set the flag that indicates if the galactic groat has been paid to paid (0x01)
/ var[0x05] is the constant 0x01
0x0aef (0x670f): (0x09) Set var[0x64] = var[0x05]

/ Remove the galactic groat from the games
0x0af2 (0x6712): (0x00) Goto 0x1625

**************************************************************************

/ Get the current location of the object in word 2
0x0af5 (0x6715): (0xa2) Set var[0x18] = list#2[var[0x25]] (list address 0x0500)

/ If the object's current location is 0x00 branch ahead and say
/ no one wants it 
/ 
/ NOTE why would it be 0x00?!?! Never set to that or initialised to that
/ and not a known special location
/ var[0x0d] is the constant 0x00
0x0af8 (0x6718): (0x10) If var[0x18] == var[0x0d] then Goto 0x0b13

/ Depending on the value of the NPC, will drive whether it's 
/ wanted or not - basically keeps subtracting 4 until the value
/ is 0x00 to 0x03
/
/ 0 - no one here wants it
/ 1 - no one here wants it
/ 2 - I don't really want that but thanks
/ 3 - I don't really want that but thanks (not used as a value in this game)
/
/ 4 - no one here wants it
/ 5 - no one here wants it (not used as a vlaue in this game)
/ 6 - I don't really want that but thanks (not used as a vlaue in this game)
/ 7 - I don't really want that but thanks
/
/ 8 - no one here wants it
/ 9 - no one here wants it
/ A - I don't really want that but thanks
/ B - I don't really want that but thanks

/ Check to see if the value is less than 0x04
/ var[0x08] is the constant 0x04
0x0afc (0x671c): (0x12) If var[0x4d] < var[0x08] then Goto 0x0b05

/ Keep subtracting 0x04 until the value is less than 0x08
/ var[0x08] is the constant 0x04
0x0b00 (0x6720): (0x0b) Set var[0x4d] -= var[0x08]

/ Loop back around
0x0b03 (0x6723): (0x00) Goto 0x0afc

/ If the adjusted NPC value is less than 2 branch ahead to "no one
/ here wants it"
/ var[0x06] is the constant 0x02
0x0b05 (0x6725): (0x12) If var[0x4d] < var[0x06] then Goto 0x0b13

/ Adjusted NPC value is 0x02 or 0x03

/ Print message "I don't really want that but thanks"
0x0b09 (0x6729): (0x05) Print message (constant) 0x2d9

/ Items taken by an NPC are stored the the location
/ "in the large empty chest" (0x71)
0x0b0c (0x672c): (0x08) Set var[0x49] = (constant) 0x71

/ Set the object's location to "in the large empty chest"
0x0b0f (0x672f): (0x01) Gosub 0x1281

/ Finished moving the item to the large empty chest
0x0b12 (0x6732): (0x02) Return

/ Print message "No one here wants"
0x0b13 (0x6733): (0x05) Print message (constant) 0xec

/ Print the <object> description
0x0b15 (0x6735): (0x00) Goto 0x16d3


**************************************************************************
* Command: get/take/carry
**************************************************************************

**************************************************************************
* Check to see if the current NPC is the Tiger and perform checks
**************************************************************************

/ If the current location's NPC isn't the tiger (0xcb), skip ahead
0x0b18 (0x6738): (0x19) If var[0x4c] != (constant) 0xcb then Goto 0x0b21

/ NPC is the tiger

If the second word is "tooth" (0x9f) branch ahead
0x0b1c (0x673c): (0x18) If var[0x25] == (constant) 0x9f then Goto 0x1034



/ Get the location of the object in the second word (the tooth)
0x0b21 (0x6741): (0xa2) Set var[0x18] = list#2[var[0x25]] (list address 0x0500)

/ If the object is in the current location branch ahead
0x0b24 (0x6744): (0x10) If var[0x18] == var[0x49] then Goto 0x0b39

/ If the object is in being worn, skip ahead
0x0b28 (0x6748): (0x10) If var[0x18] == var[0x0a] then Goto 0x0b39

/ If the object is in the inventory skip ahead and print that the 
/ player already has the object
0x0b2c (0x674c): (0x10) If var[0x18] == var[0x09] then Goto 0x0b34

/ Object is NOT in the current location, being worn on in the
/ inventory so print "You can't see <object>"

/ Print message "You can't see "
0x0b30 (0x6750): (0x05) Print message (constant) 0x29

/ Skip ahead and then print the name of the object in the second word the player entered
0x0b32 (0x6752): (0x00) Goto 0x0b36

/ Print message "You already have" and later add the object description
0x0b34 (0x6754): (0x05) Print message (constant) 0x2b

/ Print the name of the object in var[0x25]
0x0b36 (0x6756): (0x00) Goto 0x16d3

**************************************************************************
* Check to see if the player is trying to get the icicle
**************************************************************************

/ If the object is NOT the "icicle" (0x67), branch ahead
0x0b39 (0x6759): (0x19) If var[0x25] != (constant) 0x67 then Goto 0x0b45

/ It's the icicle

/ If the icicle is NOT attached to the roof (status 0x01)
/ var[0x0d] is the constant 0x00
0x0b3d (0x675d): (0x13) If var[0x1f] > var[0x0d] then Goto 0x0b45

/ Print message "Nice try but the icicle is out of reach"
0x0b41 (0x6761): (0x05) Print message (constant) 0x149

/ Icicle processed
0x0b44 (0x6764): (0x02) Return

0x0b45 (0x6765): (0x1a) If var[0x25] < (constant) 0xa0 then Goto 0x0b52
0x0b49 (0x6769): (0x1b) If var[0x25] > (constant) 0xeb then Goto 0x16ae

/ Print message "You can't take"
0x0b4e (0x676e): (0x05) Print message (constant) 0x2d

0x0b50 (0x6770): (0x00) Goto 0x0bb7

**************************************************************************
* Will the fairy allow the player to grab the silver coin
**************************************************************************

/ If the second word is NOT the coins (0x80) then branch ahead
0x0b52 (0x6772): (0x19) If var[0x25] != (constant) 0x80 then Goto 0x0b64

/ If the player's current location is NOT at the "...compost heap" (0x18)
/ branch ahead
0x0b56 (0x6776): (0x19) If var[0x48] != (constant) 0x18 then Goto 0x0b64

/ Branch ahead if the NPC IS the fairy (0xc9) 
0x0b5a (0x677a): (0x18) If var[0x4c] == (constant) 0xc9 then Goto 0x0b61

/ Player cannot see the fairy yet (hasn't eaten the mushroom ring)

/ Print message  "Something slaps the coin from your hand! "
0x0b5e (0x677e): (0x05) Print message (constant) 0xf6

/ No coin for the player
0x0b60 (0x6780): (0x02) Return

/ Print message  "The fairy snatches it back. "This coin may not be taken", she trills, "It may only be exchanged for a tooth!" "
0x0b61 (0x6781): (0x05) Print message (constant) 0xf7

/ No coin for the player
0x0b63 (0x6783): (0x02) Return

/ If the second word is NOT the keys (0x63) then branch ahead
0x0b64 (0x5584): (0x19) If var[0x25] != (constant) 0x63 then Goto 0x0b73

/ If the second word is NOT agaig (0x14) then branch ahead
0x0b68 (0x5588): (0x19) If var[0x48] != (constant) 0x14 then Goto 0x0b73

/ Branch if the third word is the magnet/lodestone (0x8a)
0x0b6c (0x558c): (0x18) If var[0x26] == (constant) 0x8a then Goto 0x0b73

/ Print message  "You can't quite reach the keys "
0x0b70 (0x5590): (0x05) Print message (constant) 0xf8

/ Player cannot reach the keys
0x0b72 (0x5592): (0x02) Return

**************************************************************************
* Can the player take the ale in front of the bartender
**************************************************************************

/ If the second word is NOT ale (0x61) then branch ahead
0x0b73 (0x5593): (0x19) If var[0x25] != (constant) 0x61 then Goto 0x0b83

/ If the current NPC in this location is NOT the bartender (0xd2), branch
/ ahead to the next check
0x0b77 (0x5597): (0x19) If var[0x4c] != (constant) 0xd2 then Goto 0x0b83

/ Check to see if the bartender has been paid by being given the nugget 
/ If so var[0x45] will be set to 0x01
/ var[0x0d] is the constant 0x00
0x0b7b (0x559b): (0x13) If var[0x45] > var[0x0d] then Goto 0x0b83

/ Bartender has NOT been paid

/ Print message  "Oy! Pay for that!"
0x0b7f (0x559f): (0x05) Print message (constant) 0x2d4

/ No ale for the player...
0x0b82 (0x55a2): (0x02) Return

**************************************************************************
* Can the player take the buckle
**************************************************************************

/ Branch if the second word is not the buckle (0x51)
0x0b83 (0x67a3): (0x19) If var[0x25] != (constant) 0x51 then Goto 0x0b97

/ Check to see if the gladiator has previously stolen the buckle 
/ If so, variable 0x04 will be set to 0x01
/ (var[0x0d] is the constant zero)
/ So branch if he has previously stolen it so he doesn't steal it again
0x0b87 (0x67a7): (0x13) If var[0x04] > var[0x0d] then Goto 0x0b97

/ Print message "A gladiator steals the buckle and runs south to the arena!"
0x0b8b (0x67ab): (0x05) Print message (constant) 0x2df

/ Set the flag (0x04) to value 0x01 to indicates the gladiator has stolen 
/ the buckle so he doesn't steal it again.  
/ var[0x05] is the constant 0x01
0x0b8e (0x67ae): (0x09) Set var[0x04] = var[0x05]

/ Set the target location to "in the arena..." (0x9a)
0x0b91 (0x67b1): (0x08) Set var[0x49] = (constant) 0x9a

/ Call the routine that sets an object's location - so move the 
/ buckle to the arena
0x0b94 (0x67b4): (0x00) Goto 0x1281

**************************************************************************
* Can the player take the Galactic groat? 
**************************************************************************

/ If the object in the second word is not "galactic" or "groat" (0x87)
/ then skip ahead
0x0b97 (0x67b7): (0x19) If var[0x25] != (constant) 0x87 then Goto 0x0ba5

/ Object word is "galactic" or "groat" (0x87)

/ Branch if the current NPC is NOT the android (0xdf)
0x0b9b (0x67bb): (0x19) If var[0x4c] != (constant) 0xdf then Goto 0x0ba5

/ Print message "You receive 6,000,000 volts up the arm"
0x0b9f (0x67bf): (0x05) Print message (constant) 0x2d2

/ Kill the player as they were just electrocuted
0x0ba2 (0x67c2): (0x00) Goto 0x11f1

**************************************************************************
* Has the poison bottle been dug out
**************************************************************************

/ If the object in the second word is not "poison" or "bottle" (0x5c)
/ then skip ahead
0x0ba5 (0x67c5): (0x19) If var[0x25] != (constant) 0x5c then Goto 0x0bb0

/ Object word is "poison" or "bottle" (0x5c)

/ Check to see if the bottle has been dug out (will be set to 0x01 when 
/ dug and loosened), branch if it has to the next check
0x0ba9 (0x67c9): (0x11) If var[0x5c] != var[0x0d] then Goto 0x0bb0

/ Poison bottle has not been dug out

/ Print message "it's held fast" as it hasn't been dug out yet
0x0bad (0x67cd): (0x05) Print message (constant) 0xc4

/ Player failed to get poison bottl
0x0baf (0x67cf): (0x02) Return

**************************************************************************
* Check room in the inventory
**************************************************************************

/ Check to see if the the number of carried items by the player 
/ is less than the inventory limit, is so, call the routine
/ that adds the bottle to the inventory
0x0bb0 (0x67d0): (0x12) If var[0x3a] < var[0x3d] then Goto 0x1269

/ No capacity in inventory

/ Print message "You're carrying too much to take" (0x2f) 
0x0bb5 (0x67d5): (0x05) Print message (constant) 0x2f

/ Print the name of the object that the player cannot take
0x0bb7 (0x67d7): (0x00) Goto 0x16d3

**************************************************************************
* Drop command - pre-check they are carrying / wearing the item
**************************************************************************

/ Check to see if the player has the object they want to drop
0x0bba (0x67da): (0x01) Gosub 0x165b

/ They have it so drop it 
0x0bbd (0x67dd): (0x00) Goto 0x1281

**************************************************************************
* Command: wear <object>
**************************************************************************

/ Get the object's current location
0x0bc0 (0x67e0): (0xa2) Set var[0x18] = list#2[var[0x25]] (list address 0x0500)

/ If the object is in the player's current location, skip ahead
0x0bc3 (0x67e3): (0x10) If var[0x18] == var[0x49] then Goto 0x0bd7

/ If the object is in the player's inventory, skip ahead
/ var[0x09] is the constant 0xe1 
0x0bc7 (0x67e7): (0x10) If var[0x18] == var[0x09] then Goto 0x0bd7

/ If the object is already worn by the player, skip ahead
/ to print "you already have"
/ var[0x0a] is the constant 0xe1 
0x0bcb (0x67eb): (0x10) If var[0x18] == var[0x0a] then Goto 0x0bd3

/ Print message "You can't see "
0x0bcf (0x67ef): (0x05) Print message (constant) 0x29

/ Skip ahead to print the object description
0x0bd1 (0x67f1): (0x00) Goto 0x0bdd

/ Print "You already have"
0x0bd3 (0x67f3): (0x05) Print message (constant) 0x2b

/ Skip ahead to print the object description
0x0bd5 (0x67f5): (0x00) Goto 0x0bdd

0x0bd7 (0x67f7): (0x1a) If var[0x25] < (constant) 0xa1 then Goto 0x0be0

/ Object id is >= 0xa1

/ Print message "You can't wear"
0x0bdb (0x67fb): (0x05) Print message (constant) 0x2e

/ Print the object description in var[0x25]
0x0bdd (0x67fd): (0x00) Goto 0x16d3

/ For any of the objects below, branch ahead to the "wear <object>" 
/ command to put it in location 0xe2

/ "the jester's cap"
0x0be0 (0x6800): (0x18) If var[0x25] == (constant) 0x52 then Goto 0x0c07

/ "a battered suit of armour"
0x0be4 (0x6804): (0x18) If var[0x25] == (constant) 0x5a then Goto 0x0c07

/ "a rugged gauntlet"
0x0be8 (0x6808): (0x18) If var[0x25] == (constant) 0x64 then Goto 0x0c07

/ "a filmy cloak"
0x0bec (0x680c): (0x18) If var[0x25] == (constant) 0x7c then Goto 0x0c07

/ "a fur coat"
0x0bf0 (0x6810): (0x18) If var[0x25] == (constant) 0x7e then Goto 0x0c07

/ "a jewelled crown"
0x0bf4 (0x6814): (0x18) If var[0x25] == (constant) 0x81 then Goto 0x0c07

/ "a battered rucksack"
0x0bf8 (0x6818): (0x18) If var[0x25] == (constant) 0x98 then Goto 0x0c07

/ "winged shoes"
0x0bfc (0x681c): (0x18) If var[0x25] == (constant) 0x99 then Goto 0x0c07

/ "a fallen star"   
0x0c00 (0x6820): (0x18) If var[0x25] == (constant) 0x9b then Goto 0x0c07

/ For any other object, print "Don't be silly"
0x0c04 (0x6824): (0x00) Goto 0x1686

/ Move the object to location 0xe2 so the player is wearing it
0x0c07 (0x6827): (0x00) Goto 0x1273

**************************************************************************
* Command: throw/hurl
**************************************************************************

/ Check to see if the object is in the inventory or wearing it
0x0c0a (0x682a): (0x01) Gosub 0x165b

**************************************************************************
* Throw stone club at caveman
**************************************************************************

/ If the second word is NOT the "stone club" branch ahead
0x0c0d (0x682d): (0x19) If var[0x25] != (constant) 0x7d then Goto 0x0c24

/ If the NPC isn't "a caveman dragging..." branch ahead
0x0c11 (0x6831): (0x19) If var[0x4c] != (constant) 0xd0 then Goto 0x0c24

/ Second word is the stone club and the NPC is the caveman

/ Print message "The vile caveman is knocked off the bridge. The 
/ rescued woman thanks you profusely and presses something into your hand"
0x0c15 (0x6835): (0x05) Print message (constant) 0x2d1

/ Remove the stone club from the game byt setting its location to 0xff
0x0c18 (0x6838): (0x01) Gosub 0x1625

/ Set the location of the "..caveman dragging..." to the
/ destroyed location (0xff)
0x0c1b (0x683b): (0xe2) Set list#2[var[0x4c]] = var[0xc] (list address 0x0500)

/ Set the object in the second word to "a gold nugget" (0x8f) which the
/ cavewoman gave the player
0x0c1e (0x683e): (0x08) Set var[0x25] = (constant) 0x8f

/ Add the "gold nugget" to the player's inventory
0x0c21 (0x6841): (0x00) Goto 0x1269

**************************************************************************
* Throw painted pebble at skeleton
**************************************************************************

/ If the second word is NOT the "painted pebble" branch ahead
0x0c24 (0x6844): (0x19) If var[0x25] != (constant) 0x91 then Goto 0x0c32

/ If the NPC isn't the "animated cave skeleton" (0xd1) the branch ahead
0x0c28 (0x6848): (0x19) If var[0x4c] != (constant) 0xd1 then Goto 0x0c32

/ Print message "The skeleton collapses in a heap of dry bones"
0x0c2c (0x684c): (0x05) Print message (constant) 0x2cf

/ Set the location of the "animated cave skeleton" to the
/ destroyed location (0xff)
0x0c2f (0x684f): (0xe2) Set list#2[var[0x4c]] = var[0xc] (list address 0x0500)

**************************************************************************
* Throw apple at stocks
**************************************************************************

If the second word is NOT the "rotten apple" branch ahead
0x0c32 (0x6852): (0x19) If var[0x25] != (constant) 0x59 then Goto 0x0c40

/ If the NPC "an unfortunate wretch in the stocks" branch ahead
0x0c36 (0x6856): (0x19) If var[0x4c] != (constant) 0xd3 then Goto 0x0c40

/ NPC is the unfortunate wretch and player is throwing the "rotten apple"

/ Print message "Shame on you! You're in the stocks now!"
0x0c3a (0x685a): (0x05) Print message (constant) 0x2d5

/ Game ends for the player
0x0c3d (0x685d): (0x00) Goto 0x1215

**************************************************************************
* Throw net at lion
**************************************************************************

0x0c40 (0x6860): (0x19) If var[0x49] != (constant) 0x9a then Goto 0x0c5b

/ If the second word is NOT the object "net' (0x8e) then branch 
/ ahead to see if it's a "trident"
0x0c44 (0x6864): (0x19) If var[0x25] != (constant) 0x8e then Goto 0x0c51

/ Player is throwing the "net"

/ Print message "It entangles the lion" (0x2e3)
0x0c48 (0x6868): (0x05) Print message (constant) 0x2e3

/ Increase the number of moves that the player has before the lion
/ eats them (when free) from zero to one 
/ var[0x05] is the constant 0x01s
0x0c4b (0x686b): (0x0a) Set var[0x33] += var[0x05]

/ Set the status indicator of the lion to trapped by net (0x01)
0x0c4e (0x686e): (0x09) Set var[0x34] = var[0x05]

**************************************************************************
* Throw trident at lion in the net
**************************************************************************

/ Check to see if the second word object is the "trident" (0x9d) if not,
/ skip ahead for next checkd
0x0c51 (0x6871): (0x19) If var[0x25] != (constant) 0x9d then Goto 0x0c5b

/ Second word is "trident" so the player is throwing it

/ Print message "The trident pins the net in place, holding the lion securely"
0x0c55 (0x6875): (0x05) Print message (constant) 0x2e4

/ Set the number of turns until the lion a struggles free to a 255 turns (0xff)
/ var[0x0c] is the constant 0xff
0x0c58 (0x6878): (0x09) Set var[0x33] = var[0x0c]

**************************************************************************
* Thow mattress
**************************************************************************

/ If the current location is "on the edge of a large crater" (0xb3), skipahead
0x0c5b (0x687b): (0x18) If var[0x48] == (constant) 0xb3 then Goto 0x0c63

/ Player is NOT "on the edge of a large crater"

/ If the current location is NOT "beside a deep tropical pool" (0xbb)
/ skip ahead
0x0c5f (0x687f): (0x19) If var[0x48] != (constant) 0xbb then Goto 0x0c66

/ Player is "beside a deep tropical pool"

/ Increment the target location by 1 as this is where the mattress will end up
/ when thrown from the deep tropical pool
0x0c63 (0x6883): (0x0a) Set var[0x49] += var[0x05]

/ If the current location is NOT "lost in the mists of time" (0xdb)
/ skip ahead
0x0c66 (0x6886): (0x19) If var[0x48] != (constant) 0xdb then Goto 0x0c70

/ Player is "lost in the mists of time" (so next to the cauldron)

/ Print message "Into the cauldron!" (0x273)
0x0c6a (0x688a): (0x05) Print message (constant) 0x273

/ Increment the target location by 1 as this is where the item thrown into the cauldron
/ will end up (out of game, well at least this area), it is a real location
0x0c6d (0x688d): (0x0a) Set var[0x49] += var[0x05]

/ If the current location is NOT "in the freezing cave"
/ skip ahead
0x0c70 (0x6890): (0x19) If var[0x48] != (constant) 0x23 then Goto 0x0c7b

/ Player is in the freezing cave (which contains the icicle)

/ If the "icicle" is loose branch ahead
0x0c74 (0x6894): (0x13) If var[0x1f] > var[0x0d] then Goto 0x0c7b

/ Icicle is not loose - print the message that it's out of reach
0x0c78 (0x6898): (0x01) Gosub 0x0b41

/ Set the object's location to the location in var[0x49] either their
/ current location for the icicle or one ahead for the mattress, one ahead
/ for anything in the cauldron etc
0x0c7b (0x689b): (0x00) Goto 0x1281

**************************************************************************
* Command: fill
**************************************************************************

/ Player wants to fill <object> with water

/ Check to see if the player has the object in their inventory or wearing it
0x0c7e (0x689e): (0x01) Gosub 0x165b

/ Check to see if water is available in this location (if not it won't return here)
0x0c81 (0x68a1): (0x01) Gosub 0x144b

/ If the object id in the second word is not a "drinking horn" (0x65)
/ branch ahead
0x0c84 (0x68a4): (0x19) If var[0x25] != (constant) 0x65 then Goto 0x0c8c

/ Set the status of the "drinking horn" to full (0x01)
/ var[0x01] is the constant 0x01
0x0c88 (0x68a8): (0x09) Set var[0x54] = var[0x05]

/ Drinking horn filled
0x0c8b (0x68ab): (0x02) Return

/ Print message "You can't fill"
0x0c8c (0x68ac): (0x05) Print message (constant) 0xed

/ Print the description of "a drinking horn"
0x0c8e (0x68ae): (0x00) Goto 0x16d3
**************************************************************************
* Command: empty/pour
**************************************************************************

/ Check to see if the object is in the player's inventory
0x0c91 (0x68b1): (0x01) Gosub 0x165b

/ If the object is not "a gallon petrol can", skip ahead
0x0c94 (0x68b4): (0x19) If var[0x25] != (constant) 0x78 then Goto 0x0ca1

/ Print message "You pour out the petrol and discard its can"
0x0c98 (0x68b8): (0x05) Print message (constant) 0x106

/ Set the status of the petrol as poured on ground (0x01)
/ var[0x05] is the constant 0x01
0x0c9b (0x68bb): (0x09) Set var[0x44] = var[0x05]

/ Remove the petrol can from the game by setting its location to 0xff
0x0c9e (0x68be): (0x00) Goto 0x1625

**************************************************************************
* Object is not the petrol can so you cannot empty it
**************************************************************************

/ Print message "You can't empty"
0x0ca1 (0x68c1): (0x05) Print message (constant) 0xee

/ Print the name of the object
0x0ca3 (0x68c3): (0x00) Goto 0x16d3

**************************************************************************
* Command: open/unlock/undo/untie
**************************************************************************

/ Branch if the player is opening a door
0x0ca6 (0x68c6): (0x18) If var[0x25] == (constant) 0xf0 then Goto 0x0d63

/ Check to see if the NPC or object is in the current location or inventory
/ or being worn.  Won't return if not
0x0cab (0x68cb): (0x01) Gosub 0x1492

/ Branch if the player is opening the tightly closed box that contains the evil eye (0x54)
/ (given as a reward when you open the bars and the people escape) and kill the player
0x0cae (0x68ce): (0x18) If var[0x25] == (constant) 0x54 then Goto 0x11f1

**************************************************************************
* If you open any of the objects below it will just perform an examine <object>
**************************************************************************

/ Branch if the player is opening the poison bottle (0x5c)
0x0cb3 (0x68d3): (0x18) If var[0x25] == (constant) 0x5c then Goto 0x1070

/ Branch if the player is opening the jewellery case (0x60)
0x0cb8 (0x68d8): (0x18) If var[0x25] == (constant) 0x60 then Goto 0x1070

/ Branch if the player is opening the cask of ale (0x61)
0x0cbd (0x68dd): (0x18) If var[0x25] == (constant) 0x61 then Goto 0x1070

/ Branch if the player is opening the milestone (0x6d)
0x0cc2 (0x68e2): (0x18) If var[0x25] == (constant) 0x6d then Goto 0x1070

/ Branch if the player is opening the petrol can (0x78)
0x0cc7 (0x68e7): (0x18) If var[0x25] == (constant) 0x78 then Goto 0x1070

/ Branch if the player is opening the glass phial (0x92)
0x0ccc (0x68ec): (0x18) If var[0x25] == (constant) 0x92 then Goto 0x1070

/ Branch if the player is opening the rucksack (0x98)
0x0cd1 (0x68f1): (0x18) If var[0x25] == (constant) 0x98 then Goto 0x1070

**************************************************************************
* Check if the player is opening the catfood tin
**************************************************************************

/ Branch if the player is NOT opening the catfood tin (0x9c)
0x0cd6 (0x68f6): (0x19) If var[0x25] != (constant) 0x9c then Goto 0x0cec

/ Branch if the catfood has already been opened (0x01)
0x0cda (0x68fa): (0x1b) If var[0x42] > (constant) 0x00 then Goto 0x169b

/ Catfood tin not open 

/ Set the second word to the tin opener (0x90)
0x0cdf (0x68ff): (0x08) Set var[0x25] = (constant) 0x90

/ Check if the player has the tin opener (won't return if they don't)
0x0ce2 (0x6902): (0x01) Gosub 0x165b

/ Print message "The vile smell of whale-meat assails your nostrils"
0x0ce5 (0x6905): (0x05) Print message (constant) 0x158

/ Set the tin status to open (0x01)
/ var[0x05] is the constant 0x01
0x0ce8 (0x6908): (0x09) Set var[0x42] = var[0x05]

/ Tin processed
0x0ceb (0x690b): (0x02) Return

**************************************************************************
* Check if the player is opening the kitchen cupboard
**************************************************************************

/ If the object is not the "wall cupboard" (0xa6) skip ahead and perform
/ the next check
0x0cec (0x690c): (0x19) If var[0x25] != (constant) 0xa6 then Goto 0x0cfe

/ Object IS the wall cupboard

/ Branch if the cupboard is already open and print it's already open
0x0cf0 (0x6910): (0x13) If var[0x3f] > var[0x0d] then Goto 0x169b

/ Cupboard was NOT open 

/ Set the status of the cupboard to open (0x01)
/ var[0x05] is the constant 0x01
0x0cf5 (0x6915): (0x09) Set var[0x3f] = var[0x05]

/ Player just opened the cupboard - trigger the "You find "
/ message with "a tin of catfood"

/ Set the second word to "catfood" / "tin" (0x9c)
0x0cf8 (0x6918): (0x08) Set var[0x25] = (constant) 0x9c

/ Print that the player finds the object
0x0cfb (0x691b): (0x00) Goto 0x1480

**************************************************************************
* Check if opening the porsche or ottoman
**************************************************************************

/ If the player is opening the porsche / car just perform an "examine car"
0x0cfe (0x691e): (0x18) If var[0x25] == (constant) 0xa8 then Goto 0x1070

/ Branch if the second word is NOT the ottoman
0x0d03 (0x6923): (0x19) If var[0x25] != (constant) 0xb1 then Goto 0x0d12

/ Player is opening the ottoman 

/ Branch if the ottoman is already open 
0x0d07 (0x6927): (0x13) If var[0x41] > var[0x0d] then Goto 0x169b

/ Player is opening the ottoman

/ Set the status of the ottoman to open (0x01)
/ var[0x05] is the constant 0x01
0x0d0c (0x692c): (0x09) Set var[0x41] = var[0x05]

/ Go to redescribe the location 
0x0d0f (0x692f): (0x00) Goto 0x0165

**************************************************************************
* Check to see if the player is open the "cages" in the "experimental laboratory"
**************************************************************************

/ Check to see if the player is opening the "cages" (0xb8) - check the second 
/ input word. If not, branch ahead to check the "bars"
0x0d12 (0x6932): (0x19) If var[0x25] != (constant) 0xb8 then Goto 0x0d20

/ Player is opening the cages

/ Check to see if they have the "keys" in their inventory
/ if not, it won't return here
0x0d16 (0x6936): (0x01) Gosub 0x11d6

/ Print message "The animals bound away" (0xc1)
0x0d19 (0x6939): (0x05) Print message (constant) 0xc1

/ Set the game progress indicator that the player has opened the cages (0x5d)
/ Set it to 0x01 to indicate they are open
/ (var[0x05] is the constant 0x01)
0x0d1b (0x693b): (0x09) Set var[0x5d] = var[0x05]

/ Remove the cages
0x0d1e (0x693e): (0x00) Goto 0x0d2c

**************************************************************************
* Check to see if the player is open the "bars" in the "worse laboratory"
**************************************************************************

/ Check to see if the player is opening the "bars" (0xb9) - check the second 
/ input word. If not, branch ahead
0x0d20 (0x6940): (0x19) If var[0x25] != (constant) 0xb9 then Goto 0x0d38

/ Player is opening the bars

/ Check to see if the player has the keys (won't return if not)
0x0d24 (0x6944): (0x01) Gosub 0x11d6

/ Player has the keys

/ Print message "The people are free and hurry away, handing you a reward"
0x0d27 (0x6947): (0x05) Print message (constant) 0xc2

/ Set the game progress indicator that the player has open the bars 
/ that "imprison hundreds of poor people" in the "worse laboratory"
/ Set it to 0x01 to indicate they are open
/ (var[0x05] is the constant 0x01)
0x0d29 (0x6949): (0x09) Set var[0x5e] = var[0x05]

/ Whenever a new command is entered, if it's not "again" then the game caches
/ the command into var[0x28] through var[0x2b].  So if next turn the player
/ types "again" then it will use the values in those.  Earlier in the processing though
/ there was a test to see if the player had the keys and the code at 0x011d6 set the
/ second word at vat[0x25] to the keys (0x63) to then test if the player had them.
/ Now, var[0x25] needs to be reset to the bars so they can then be removed from the game
/ so the cached second word at var[0x29] is used.
/ (Similar for the animal cages)
0x0d2c (0x694c): (0x09) Set var[0x25] = var[0x29]

/ Remove the bars from the game by setting their location to 0xff
0x0d2f (0x694f): (0x01) Gosub 0x1625

/ Set the second word to the evil eye tighly closed box
0x0d32 (0x6952): (0x08) Set var[0x25] = (constant) 0x54

/ Add the evil eye box to the player's inventory
0x0d35 (0x6955): (0x00) Goto 0x1269

**************************************************************************
* Check to see if the player is opening the huge iron bound chest
**************************************************************************

/ Branch if the player is NOT opening the huge iron bound chest (0xaf)
0x0d38 (0x6958): (0x19) If var[0x25] != (constant) 0xaf then Goto 0x0d4e

/ Branch if the chest is already open 
/var[0x0d] is the constant 0x01
0x0d3c (0x693c): (0x13) If var[0x40] > var[0x0d] then Goto 0x169b

/ Chest is closed

/ Print message "The chest opens and a bearded rogue leaps out: "Ahoy there me hearty! 
/ Oi be Pirate Pete what gets me pleasure from robbing weary travellers like thee!`\n\n"
0x0d41 (0x6961): (0x05) Print message (constant) 0x2db

/ Set the status of the huge iron bound chest to open (0x01)
/ var[0x05] is the constant 0x01
0x0d44 (0x6964): (0x09) Set var[0x40] = var[0x05]

/ Set the second word to pirate pete
0x0d47 (0x6967): (0x08) Set var[0x25] = (constant) 0xd8

/ "Drop" pirate pete in this location
0x0d4a (0x696a): (0x00) Goto 0x1281

/ Finished with Pirate Pete
0x0d4d (0x696d): (0x02) Return

**************************************************************************
* Check to see if the player is opening the inspection panel
**************************************************************************

/ Branch if the second word is NOT a jumble of broken robots (0xb6)
0x0d4e (0x696e): (0x19) If var[0x25] != (constant) 0xb6 then Goto 0x0d63

/ Branch if the inspection panel is already open (0x01)
/ var[0x0d] is the constant 0x00
0x0d52 (0x6972): (0x13) If var[0x59] > var[0x0d] then Goto 0x169b

/ Inspection panel is closed 

/ Set the second word to the screwdriver (0x70)
0x0d57 (0x6977): (0x08) Set var[0x25] = (constant) 0x70

/ Check if the player has the screwdriver (won't return if not)
0x0d5a (0x697a): (0x01) Gosub 0x165b

/ Player has the screwdriver

/ Print message "An inspection panel opens"
0x0d5d (0x697d): (0x05) Print message (constant) 0xe9

/ Set the status of the inspection panel to open (0x01)
0x0d5f (0x697f): (0x09) Set var[0x59] = var[0x05]

/ Inspection panel open processed
0x0d62 (0x6982): (0x02) Return

**************************************************************************
* Player trying to open a door - check all exits to see if there's at least
* one door, if not print "nothing to open". Go on to check location
* specifics and if they have the right object etc in those locations
* 1. If they are in a location < 0x03 they can't "open" the door, needs 
*    special actions e.g. wind clock or turn cog <x> / swing pendulum
* 2. At the "ugly arch: abandon hope" they can't use open to open the door 
*    they have to drop the "milestone" / "hope"
* 3. They need to have the "keys" in their inventory to open the garden shed
* 4. They need to have the "star" in their inventory to open the starship door
* 5. In the invention room/alcove they need to say magic words not "open"
**************************************************************************

/ Check all exits to see if there is a door to open on at least one of them
0x0d63 (0x6983): (0x01) Gosub 0x14d0

/ Check to see if there is a door in this direction  - if so, 
/ var[0x0e] will be set to 0x01s
/ var[0x0d] is the constant 0x01
0x0d66 (0x6986): (0x13) If var[0x0e] > var[0x0d] then Goto 0x0d6d

/ No doors in any direction 

/ Print message "There's nothing to open"
0x0d6a (0x698a): (0x05) Print message (constant) 0x42

/ Can't open the door as no doors to open 
0x0d6c (0x698c): (0x02) Return

/ 0x0f is the door status... 
/ Check to see if the door is already open (0x01) - if it is then 
/ branch and print that it's already open"
/ var[0x0d] is the constant 0x00
0x0d6d (0x696d): (0x13) If var[0x0f] > var[0x0d] then Goto 0x169b

/ Skip ahead if the player isn't "outside a garden shed", branch ahead if not
0x0d72 (0x6992): (0x19) If var[0x48] != (constant) 0x14 then Goto 0x0d79

/ The player is "outside a garden shed" (0x14)

/ Check to see if the player has the "keys", if they don't it won't return 
/ here
0x0d76 (0x6996): (0x01) Gosub 0x11d6

/ Player has the keys so let it flow from here and the door will open
/ assuming they are in the right location

/ Check to see if the player isn't "standing on a floating metal platform, 
/ suspended in mid-air" (0xae), branch ahead if not
0x0d79 (0x6999): (0x19) If var[0x48] != (constant) 0xae then Goto 0x0d80

/ Player "standing on a floating metal platform...."

/ Check to see if they have the "star", if not the sub-routine will
/ print "you're not authorised to do that" and won't return here
0x0d7d (0x699d): (0x01) Gosub 0x11dc

/ The only doors in locations with ids 1-3 are for the clock.  They are
/ special doors and need opening via "wind clock" in location 2 or 
/ "turn cog <number" and then "swing pendulum" in location 3
/ If it's one of these locations, skip ahead
/ var[0x08] is the constant 0x04
0x0d80 (0x69a0): (0x12) If var[0x48] < var[0x08] then Goto 0x0d94

/ Location > 0x02

/ If the location is between 0x02 and 0x43 inclusive, then allow the door
/ to open by branching ahead
0x0d84 (0x69a4): (0x1a) If var[0x48] < (constant) 0x44 then Goto 0x0d99

/ If the location is in the "invention room"s (0x44) or "invention 
/ alcove" (0x45) inclusive, check to see if the first word is "open" 
/ and if so say "You can't" 
0x0d88 (0x69a8): (0x1a) If var[0x48] < (constant) 0x46 then Goto 0x0d94

/ If the location is in the "ugly arch" (0x8c) check to see if 
/ the first word is "open" and if so say "You can't" 
0x0d8c (0x69ac): (0x18) If var[0x48] == (constant) 0x8c then Goto 0x0d94

/ Allow the door to open if the player's location is not at the "ugly arch"
/ branch ahead to do so
0x0d90 (0x69b0): (0x19) If var[0x48] != (constant) 0xc0 then Goto 0x0d99

/ Player is at the "...ugly arch: ABANDON HOPE...."

/ If they are trying to "open" (0x24) the door at the "ugly arch" branch and 
/ say "You can't".
0x0d94 (0x69b4): (0x18) If var[0x24] == (constant) 0x2f then Goto 0x1681

/ Print message "The door opens."
0x0d99 (0x69b9): (0x05) Print message (constant) 0x116

/ Set the door status to open (0x01)
/ var[0x05] is the constant 0x01
0x0d9c (0x69bc): (0x09) Set var[0x0f] = var[0x05]

/ Open door processing complete
0x0d9f (0x69bf): (0x02) Return


**************************************************************************
* Command: close/lock/shut
**************************************************************************

/ Close the open door if there's a door in this location

/ Check to see if there is at least one door in the current location
0x0da0 (0x69c0): (0x01) Gosub 0x14d0

/ If the player's score is less than 2000, skip ahead
0x0da3 (0x69c3): (0x1a) If var[0x4f] < (constant) 0x7d0 then Goto 0x0dab

/ Reset the player's score to zero (it was greater than 2000)
/ WHY?
0x0da8 (0x69c8): (0x09) Set var[0x4f] = var[0x0d]

/ If there's at least one door in the current location, skip ahead
/ (var[0x0e] will be set to 0x01)
/ (var[0x0d] is the constant 0)
0x0dab (0x69cb): (0x13) If var[0x0e] > var[0x0d] then Goto 0x0db2

/ No door in current location

/ Print message "There's nothing to close"
0x0daf (0x69cf): (0x05) Print message (constant) 0x43

/ Finished closing doors (1)
0x0db1 (0x69d1): (0x02) Return

/ Check to see if the door is open (0x01) - if so branch
/ var[0x0d] is the constant 0x00
0x0db2 (0x69d2): (0x13) If var[0x0f] > var[0x0d] then Goto 0x0db8

/ Print message "It's already closed"
0x0db6 (0x69d6): (0x05) Print message (constant) 0x41

/ Set the door status to closed (0x00)
/ var[0x0d] is the constant 0x00
0x0db8 (0x69d8): (0x09) Set var[0x0f] = var[0x0d]

/ Finished closing the door (2)
0x0dbb (0x69db): (0x02) Return

**************************************************************************
* Command: eat/bite/swallow/taste <object>
**************************************************************************

/ Check to see if the object referenced in the second word var[0x25]
/ is in the inventory or being worn
0x0dbc (0x69dc): (0x01) Gosub 0x1492

/ Object is in the inventory or being worn

/ If the object is an "apple" (0x59) skip ahead and eat it!
0x0dbf (0x69df): (0x18) If var[0x25] == (constant) 0x59 then Goto 0x0def

/ If the object is a "bone" (0x5b) ship ahead and eat it!
0x0dc3 (0x69e3): (0x18) If var[0x25] == (constant) 0x5b then Goto 0x0def

/ If the object is a "bunch" / "leaves" (0x5d) skip ahead and eat it!
0x0dc7 (0x69e7): (0x18) If var[0x25] == (constant) 0x5d then Goto 0x0def

/ If the object is a "bunch" / "leaves" (0x5d) skip ahead and eat it
/ but say it was delicious!
0x0dcb (0x69eb): (0x18) If var[0x25] == (constant) 0x72 then Goto 0x0df4

/ If the object is "sweetmeats" (0x73) skip ahead and eat it!
0x0dcf (0x69ef): (0x18) If var[0x25] == (constant) 0x73 then Goto 0x0def

/ If the object is "food" (0x86) skip ahead and eat it
/ but say it was delicious!
0x0dd3 (0x69f3): (0x18) If var[0x25] == (constant) 0x86 then Goto 0x0df4

/ If the object is "catfood" (0x0c) skip ahead and eat it!
0x0dd7 (0x69f7): (0x18) If var[0x25] == (constant) 0x9c then Goto 0x0def

/ If the object is NOT "mushrooms" (0xbd) skip ahead and say you can't eat!
/ Basically any other object you can't eat... 
0x0ddb (0x69fb): (0x19) If var[0x25] != (constant) 0xbd then Goto 0x0dea

/ Mushrooms were eaten

/ Print message "Your vision clears. Someone's here!"
0x0ddf (0x69ff): (0x05) Print message (constant) 0xf5

/ Set the working object id to the "fairy" (0xc9)
0x0de1 (0x6a01): (0x08) Set var[0x17] = (constant) 0xc9

/ Set the current location of the "fairy" to the player's current location
0x0de4 (0x6a04): (0xe2) Set list#2[var[0x17]] = var[0x48] (list address 0x0500)

/ Remove the mushrooms from the game by setting their location to 0xff
0x0de7 (0x6a07): (0x00) Goto 0x1625

**************************************************************************

/ Print message "YEUCH! No, you can't eat"
0x0dea (0x6a0a): (0x05) Print message (constant) 0xef

/ Print the name of the object they are not allowed to eat
0x0dec (0x6a0c): (0x00) Goto 0x16d3

**************************************************************************

/ Print message "If you insist.. There's no accounting for taste!"
0x0def (0x6a0f): (0x05) Print message (constant) 0xf3

/ Remove the eaten item from the game by setting its location to 0xff
0x0df1 (0x6a11): (0x00) Goto 0x1625

**************************************************************************

/ Print message "That was delicious!"
0x0df4 (0x6a14): (0x05) Print message (constant) 0xf4

/ Remove the eaten item from the game by settting its location to 0xff
0x0df6 (0x6a16): (0x00) Goto 0x1625

**************************************************************************
* Command: drink/sip
**************************************************************************

/ Player asked to "drink" or "sip" with an optional <object>

/ If the object WAS specified, branch ahead
/ var[0x0d] is the constant 0x00
0x0df9 (0x6a19): (0x11) If var[0x25] != var[0x0d] then Goto 0x0e26

/ Object id was NOT specified

/ Set the working object id to the "drinking horn" (0x65)
0x0dfd (0x6a1d): (0x08) Set var[0x17] = (constant) 0x65

/ Get the current location of the "drinking horn"
0x0e00 (0x6a20): (0xa2) Set var[0x18] = list#2[var[0x17]] (list address 0x0500)

/ If the object is in the inventory (location id 0xe1) branch ahead
/ var[0x09] is the constant 0xe1
0x0e03 (0x6a23): (0x11) If var[0x18] != var[0x09] then Goto 0x0e11

/ If the drinking horn status (var[0x54]) is empty (0x00) then 
/ branch ahead
/ var[0x0d] is the constant 0x00
0x0e07 (0x6a27): (0x10) If var[0x54] == var[0x0d] then Goto 0x0e11

/ Drinking horn is full

/ Set the drinking horn to empty 
/ var[0x0d] is the constant zero
0x0e0b (0x6a2b): (0x09) Set var[0x54] = var[0x0d]

/ Print the message "Just what you needed!" and see if the player 
/ is at the water of strength
0x0e0e (0x6a2e): (0x00) Goto 0x0e14

/ Check to see if water is present so that player can drink
/ Won't return if there isn't any water
0x0e11 (0x6a31): (0x01) Gosub 0x144b

/ Print message "Just what you needed! \n"
0x0e14 (0x6a34): (0x05) Print message (constant) 0x13c

/ Reset the player's thirst (they just drank some water)
/ This variable is used in the hypocaust to determine how thirsty
/ the player is (they get 3 turns before this is incremented to 0x128
/ and the first message will appear)
0x0e17 (0x6a37): (0x08) Set var[0x55] = (constant) 0x125

/ Branch if the current location is not "...down the well, within reach of
/ water" (0x8a)
0x0e1b (0x6a3b): (0x19) If var[0x49] != (constant) 0x8a then Goto 0x0e25

/ Print message "You feel VERY strong!"
0x0e1f (0x6a3f): (0x05) Print message (constant) 0x13b

/ Set the flag to indiciate that the player has drunk the water of strength (0x01)
/ var[0x05] is the constant 0x01
0x0e22 (0x6a42): (0x09) Set var[0x15] = var[0x05]

/ Player was at the water of strength
0x0e25 (0x6a45): (0x02) Return

/ Check if player has the object or is wearing it (object id is held
/ in var[0x25], the second input word sorted by object id) 
/ Will not return if they player isn't wearing or has it in their
/ inventory
0x0e26 (0x6a46): (0x01) Gosub 0x165b

/ Branch back if the object is the cask (0x61)
0x0e29 (0x6a49): (0x18) If var[0x25] == (constant) 0x61 then Goto 0x0df4

/ Branch back if the object is the drinking horn (0x65)
0x0e2d (0x6a4d): (0x18) If var[0x25] == (constant) 0x65 then Goto 0x0dfd

/ NOT the cask or the drinking horn

/ No other object can be drank so say "Don't be silly!"
0x0e31 (0x6a51): (0x00) Goto 0x1686

**************************************************************************
* Command: light
**************************************************************************

/ Player asked to "light" with an optional object

/ Branch if the player is trying to light the matches
0x0e34 (0x6a54): (0x18) If var[0x25] == (constant) 0x6b then Goto 0x0e64

/ If the player's location is "in a large dry cave, warmed by a blazing fire" (0x3a)
0x0e38 (0x6a58): (0x18) If var[0x48] == (constant) 0x3a then Goto 0x0e64

/ Branch if the player's location is NOT "You are at the edge of the ice,..." (0x1d)
/ where the mammoth is
0x0e3c (0x6a5c): (0x19) If var[0x48] != (constant) 0x1d then Goto 0x0e44

/ Player is "... at the edge of the ice ..."

/ Check to see if the wood is burning (0x01) at "...the edge of the ice..." where
/ the wooly mammoth is.  If it's burning branch ahead
/ var[0x0d] is the constant 0x00
0x0e40 (0x6a60): (0x13) If var[0x53] > var[0x0d] then Goto 0x0e64

/ Set the working object id to the matches
0x0e44 (0x6a64): (0x08) Set var[0x17] = (constant) 0x6b

/ Get the current location of the matches
0x0e47 (0x6a67): (0xa2) Set var[0x18] = list#2[var[0x17]] (list address 0x0500)

/ If the matches are NOT in the player's inventory, branch ahead
0x0e4a (0x6a6a): (0x11) If var[0x18] != var[0x09] then Goto 0x0e52

/ Matches ARE in the player's inventory

/ If the match is burning branch ahead
/ var[0x0d] is the constant 0x00
0x0e4e (0x6a6e): (0x13) If var[0x37] > var[0x0d] then Goto 0x0e64

/ Matches are burning

/ Set the working object id to the candle
0x0e52 (0x6a72): (0x08) Set var[0x17] = (constant) 0x7a

/ Get the current location of the candle
0x0e55 (0x6a75): (0xa2) Set var[0x18] = list#2[var[0x17]] (list address 0x0500)

/ If the candle is NOT in the player's inventory, branch ahead
0x0e58 (0x6a78): (0x11) If var[0x18] != var[0x09] then Goto 0x0e60

/ Candle is burning

/ If the candle is burning, branch ahead
0x0e5c (0x6a7c): (0x13) If var[0x32] > var[0x0d] then Goto 0x0e64

/ Candle is in the player's inventory

/ Print message "You have no fire"
0x0e60 (0x6a80): (0x05) Print message (constant) 0x10a

/ No fire, so return 
0x0e63 (0x6a83): (0x02) Return

/ 0x78 is the petrol can
0x0e64 (0x6a84): (0x19) If var[0x25] != (constant) 0x78 then Goto 0x0e91

/ Check to see if petrol has been poured on the ground (0x01)
/ If it has not, branch ahead
0x0e68 (0x6a88): (0x10) If var[0x44] == var[0x0d] then Goto 0x0e91

/ Petrol has been poured on ground

/ Print message "The petrol burns up with a whoosh!"
0x0e6c (0x6a8c): (0x05) Print message (constant) 0x108

/ Set the petrol to no longer poured on ground (it just burnt)
0x0e6f (0x6a8f): (0x09) Set var[0x44] = var[0x0d]

/ If the player is NOT in the location for "You are at the edge 
/ of the ice, where drifting snow has banked up at the foot 
/ of the mountains" (0x1d) where the mammoth defaults to be then
/ branch ahead
0x0e72 (0x6a92): (0x19) If var[0x49] != (constant) 0x1d then Goto 0x0e63

/ Player IS in that location

/ Print message "\nThe mammoth is so surprised that it jumps clean out of its skin and runs off in terror!"
0x0e76 (0x6a96): (0x05) Print message (constant) 0x109

/ Set the indicator that wood is burning warmly here to 0x01
/ It will burn warmly for the rest of the game
/ var[0x05] is the constant 0x01
0x0e79 (0x6a99): (0x09) Set var[0x53] = var[0x05]

/ Reset the number of turns the player has been cold to zero
/ var[0x0d] is the constant 0x00
0x0e7c (0x6a9c): (0x09) Set var[0x20] = var[0x0d]

/ Set the secondary working object id to the mammoth (0xca) 
0x0e7f (0x6a9f): (0x08) Set var[0x25] = (constant) 0xca

/ Remove the mammoth from the game by setting its location to 0xff
0x0e82 (0x6aa2): (0x01) Gosub 0x1625

/ Set the working object id to the fur coat
0x0e85 (0x6aa5): (0x08) Set var[0x25] = (constant) 0x7e

/ Add the fur coat (0x7e) to this location
0x0e88 (0x6aa8): (0x01) Gosub 0x1281

/ Set the working object id to the mammoth's ivory tusk (0x56)
0x0e8b (0x6aab): (0x08) Set var[0x25] = (constant) 0x56

/ Add the mammoth's ivory tusk (0x56) to this location
0x0e8e (0x6aae): (0x00) Goto 0x1281

**************************************************************************
* Check if the player is lighting a match
**************************************************************************

/ Check if the player has the object, either in their inventory or being worn
/ Will not return if the player does not have the object
0x0e91 (0x6ab1): (0x01) Gosub 0x165b

/ If the current working object isn't the matchbox, branch ahead
0x0e94 (0x6ab4): (0x19) If var[0x25] != (constant) 0x6b then Goto 0x0ea6

/ It's the matchbox 

/ If there are no matches left, branch to  print the message 
/ that the matchbox is empty
/ var[0x63] is the number of matches left
/ var[0x0d] is the constant 0
0x0e98 (0x6ab8): (0x10) If var[0x63] == var[0x0d] then Goto 0x1679

/ Reduce the number of matches by one
/ var[0x05] is the constant 0x01
0x0e9d (0x6abd): (0x0b) Set var[0x63] -= var[0x05]

/ Set the number of turns left for the match to burnt out to be 8
0x0ea0 (0x6ac0): (0x08) Set var[0x37] = (constant) 0x8

/ Print the message "It burns well"
0x0ea3 (0x6ac3): (0x00) Goto 0x167d

**************************************************************************
* Check if the player is lighting a candle
**************************************************************************

/ Branch if the object in the second word is NOT the "candle"
0x0ea6 (0x6ac6): (0x19) If var[0x25] != (constant) 0x7a then Goto 0x1681

/ Second word is the candle 

/ Branch if the candle is lit and prnt "it burns well"
/ var[0x0d] is the constant 0x00
0x0eab (0x6acb): (0x13) If var[0x32] > var[0x0d] then Goto 0x0eb2

/ Set the number of turns left to burn to 200
0x0eaf (0x6acf): (0x08) Set var[0x32] = (constant) 0xc8

/ Print message "it burns well"
0x0eb2 (0x6ad2): (0x00) Goto 0x167d

**************************************************************************
* Command: push/swing
**************************************************************************

/ Branch if a player is trying to push/swing a major NPC and kill them 
0x0eb5 (0x6ad5): (0x1b) If var[0x25] > (constant) 0xc8 then Goto 0x07e5

/ Check to see if the player has the object/npc, is wearing it or if it's in the current location
/ Object is the second word in var[0x25]
0x0eba (0x6ada): (0x01) Gosub 0x1492

/ Branch if the player is NOT pushing the stone (0xae)
0x0ebd (0x6add): (0x19) If var[0x25] != (constant) 0xae then Goto 0x0ec7

/ Player is pushing the stone

/ Print message  "It rolls away "
0x0ec1 (0x6ae1): (0x05) Print message (constant) 0x2d

/ Remove the stone from the game by setting its location to 0xff
0x0ec4 (0x6ae4): (0x00) Goto 0x1625

/ Branch if the player is pushing/swinging the pendulum and print
/ "The door opens"
0x0ec7 (0x6ae7): (0x18) If var[0x25] == (constant) 0xa3 then Goto 0x0d99

/ Print nothing happens
0x0ecc (0x6aec): (0x00) Goto 0x16bb

**************************************************************************
* Command: fasten/tie/attach/fix
**************************************************************************

/ Check to see if the player has the object/npc, is wearing it or if it's in the current location
/ Object is the second word in var[0x25]
0x0ecf (0x6aef): (0x01) Gosub 0x1492

/ Player has the object or NPC

/ Branch if the second word is NOT the planks
0x0ed2 (0x6af2): (0x19) If var[0x25] != (constant) 0x94 then Goto 0x0ee9

/ Second word is the planks

/ NOTE this is a bug - this should be: 
/                       If var[0x43] > var[0x0d] then Goto 0x1675
/ var[0x43] will never be set greater than 0x01 - it has two states 
/ untied (0x00) or tied (0x01)
/ var[0x05] is the constant 0x01
0x0ed6 (0x6af6): (0x13) If var[0x43] > var[0x05] then Goto 0x1675

/ Set the second word to the coil or rope (0x96)
0x0edb (0x6afb): (0x08) Set var[0x25] = (constant) 0x96

/ Check to see if the player has the rope or if it's in the current location
/ Won't return if the player does not have it
0x0ede (0x6afe): (0x01) Gosub 0x165b

/ Print message "You tie the planks into a longer plank"
0x0ee1 (0x6b01): (0x05) Print message (constant) 0xfe

/ Set the status of the planks to tied (0x01)
0x0ee3 (0x6b03): (0x09) Set var[0x43] = var[0x05]

/ Remove the rope from the game by setting its location to 0xff
0x0ee6 (0x6b06): (0x00) Goto 0x1625

**************************************************************************

/ Branch ahead and print "you can't"
0x0ee9 (0x6b09): (0x00) Goto 0x1681

**************************************************************************

/ NOTE Never called

/ Branch ahead and print "you can't"
0x0eec (0x6b0c): (0x00) Goto 0x1681

**************************************************************************
* Command: shake/wave
**************************************************************************
0x0eef (0x6b0f): (0x01) Gosub 0x165b

**************************************************************************
* Process the lodestone / magnet to get the keys
**************************************************************************

/ If the second word (object) is not "lodestone" or "magnet" (0x8a)
/ skip ahead and check for the next object
0x0ef2 (0x6b12): (0x19) If var[0x25] != (constant) 0x8a then Goto 0x0f09

/ If the location isn't "outside a garden shed" (0x14) skip ahead
/ and check for the next object
0x0ef6 (0x6b16): (0x19) If var[0x48] != (constant) 0x14 then Goto 0x0f09

/ Object is the lodestone/magnet and location is "outside a garden shed"

/ Set the object to be "a bunch of keys" (0x63)
0x0efa (0x6b1a): (0x08) Set var[0x25] = (constant) 0x63

/ Get the current location of the keys
0x0efd (0x6b1d): (0xa2) Set var[0x18] = list#2[var[0x25]] (list address 0x0500)

/ If the keys are not in the current location, skip ahead and check the next object
0x0f00 (0x6b20): (0x11) If var[0x18] != var[0x48] then Goto 0x0f09

/ Print message "The magnetic lodestone attracts the keys" (0xf9)
0x0f04 (0x6b24): (0x05) Print message (constant) 0xf9

/ Put the lodestone in the inventory and return
0x0f06 (0x6b26): (0x00) Goto 0x1269

**************************************************************************
* Check if the player is waving/shaking the valerian by the willow tree
**************************************************************************

/ If the second word (object) is not "valerian" (0x73)
/ skip ahead and check for the next object
0x0f09 (0x6b29): (0x19) If var[0x25] != (constant) 0x73 then Goto 0x0f15

/ If the player is by the willow tree and it has not been chopped down
/ the first message to print between the list of objects and the location exits
/ will be "tears rain down from the willow tree" (0x12c)

/ Branch if that message is not 0x12c (see above)
0x0f0d (0x6b2d): (0x19) If var[0x4a] != (constant) 0x12c then Goto 0x0f15

/ Player is by the living willow tree

/ Print message "The tree speaks: "When I was planted the stream was clear and 
sparkling. Now I am old, it is polluted and I just want to die.""
0x0f12 (0x6b32): (0x05) Print message (constant) 0xfa

/ Willow tree processed
0x0f14 (0x6b34): (0x02) Return

**************************************************************************
* Check if the player is waving/shaking the valerian by the willow tree
**************************************************************************

/ Branch if the player is NOT waving the mirror
0x0f15 (0x6b35): (0x19) If var[0x25] != (constant) 0x6e then Goto 0x0f2d

/ Branch if the Brontosaurus is already captured in the mirror
0x0f19 (0x6b39): (0x13) If var[0x38] > var[0x0d] then Goto 0x0f2d

/ Waving the mirror and the brontosaurus has NOT been captured

/ Print message "The air shimmers"
0x0f1d (0x6b3d): (0x05) Print message (constant) 0x140

/ Branch if there is NOT an NPC here
/ var[0x0d] is the constant 0x00
0x0f20 (0x6b40): (0x10) If var[0x4c] == var[0x0d] then Goto 0x0f2a

/ Set the captured NPC in the mirror to the current NPC
0x0f24 (0x6b44): (0x09) Set var[0x38] = var[0x4c]

/ Set the location of the captured NPC to out of game (0xff)
0x0f27 (0x6b47): (0xe2) Set list#2[var[0x38]] = var[0xc] (list address 0x0500)

/ Check if it's light / dark and print the location description if light
0x0f2a (0x6b4a): (0x00) Goto 0x0165

**************************************************************************
* Check if the player is waving/shaking the bunch of leaves
**************************************************************************

/ Branch if the second word is the bunch of leaves (0x5c)
0x0f2d (0x6b4d): (0x18) If var[0x25] == (constant) 0x5d then Goto 0x0951

/ Print the "Nothing happens" cyclic message
0x0f32 (0x6b52): (0x00) Goto 0x16bb

**************************************************************************
* Command: blow/play
**************************************************************************

**************************************************************************
* Check if the player is playing the lute
**************************************************************************
/ Check if a player has the object/npc or its in the same location
0x0f35 (0x6b55): (0x01) Gosub 0x165b

/ Branch if the second word is NOT the lute
0x0f38 (0x6b58): (0x19) If var[0x25] != (constant) 0x6a then Goto 0x0f5b

/ Second word IS the lute

/ Branch if the player's location is NOT "climbing the short stairs. 
/ Several wall panels sound hollow" (0x79)
0x0f3c (0x6b5c): (0x19) If var[0x48] != (constant) 0x79 then Goto 0x0f4d

/ Branch if the lute has already been played and opened (0x01) the secret panel
/ var[0x0d] is the constant 0x00
0x0f40 (0x6b60): (0x13) If var[0x47] > var[0x0d] then Goto 0x0f4d

/ Pring "A panel moves!"
0x0f44 (0x6b64): (0x05) Print message (constant) 0x2ca

/ Set the status of the secret panel to (0x01)
/ var[0x05] is the constant 0x01
0x0f47 (0x6b67): (0x09) Set var[0x47] = var[0x05]

/ CHeck if it's light / dark and print the location description if light
0x0f4a (0x6b6a): (0x00) Goto 0x0165

**************************************************************************
* Check if the player is playing the lute elsewhere
**************************************************************************

/ Print nothing happens if the player is not on of the following locations:
/ 0x78 : at the top of the stairway, in the minstrel's gallery. A short staircase leads up
/ 0x79 : climbing the short stairs. Several wall panels sound hollow
/ 0x7a : in the middle of a long east-west portrait gallery. Leaded windows overlook the beautiful knot gardens below
/ 0x7b : at the west end of the portrait gallery
/ 0x7c : in a bedroom with a four poster bed
/ 0x7d : in the bedroom of the master of the house
/ 0x7e : at the east end of the long gallery
/ 0x7f : in a bedroom, hung about with lavender
/ 0x80 : in the music room
0x0f4d (0x6b6d): (0x1a) If var[0x48] < (constant) 0x78 then Goto 0x16bb
0x0f52 (0x6b72): (0x1b) If var[0x48] > (constant) 0x80 then Goto 0x16bb

/ Player is playing the lute 

/ Print message "Ghostly footsteps plod to the short stairs and fade away"
0x0f57 (0x6b77): (0x05) Print message (constant) 0x2c9

/ Done
0x0f5a (0x6b7a): (0x02) Return

**************************************************************************
* Check if the player is playing the lur
**************************************************************************

/ Branch if the the second word is NOT the lur (0x8b)
0x0f5b (0x6b7b): (0x19) If var[0x25] != (constant) 0x8b then Goto 0x0f78

/ Player IS playing the lur

/ Print message "The lur booms out, summoning a horde of Vikings. \n"
0x0f5f (0x6b7f): (0x05) Print message (constant) 0x123

/ Branch if the current NPC in this location is Pirate Pete (0xd8)
0x0f62 (0x6b82): (0x18) If var[0x4c] == (constant) 0xd8 then Goto 0x0f6c

/ Print message "They are furious that Pirate Pete is not here!"
0x0f66 (0x6b86): (0x05) Print message (constant) 0x124

/ Kill the player
0x0f69 (0x6b89): (0x00) Goto 0x11f1

/ Print message "They grab the pirate and drag him off, rewarding you with an olive branch"
0x0f6c (0x6b8c): (0x05) Print message (constant) 0x125

/ Set the location of Pirate Pete (the current NPC) to 0xff removing him from the game
/ var[0x0c] is the constant 0xff
0x0f6f (0x6b8f): (0xe2) Set list#2[var[0x4c]] = var[0xc] (list address 0x0500)

/ Set the second word to the olive branch (0x50)
0x0f72 (0x6b92): (0x08) Set var[0x25] = (constant) 0x50

/ Add the olive branch to the player's inventory
0x0f75 (0x6b95): (0x00) Goto 0x1269

**************************************************************************
* Check if the player is playing the bell
**************************************************************************

/ Branch if the second word isn't "bell" (0x77)
0x0f78 (0x6b98): (0x19) If var[0x25] != (constant) 0x77 then Goto 0x0f92

/ Second word is "bell"

/ Note that you don't have to be in any particular location 
/ to ring the bell, the jester will appear anywhere

/ If there are any other non-player characters in the room, the bell
/ will not work 
0x0f7c (0x6b9c): (0x11) If var[0x4c] != var[0x0d] then Goto 0x16bb

/ Check to see if the "jester" has appeared yet, if so branch ahead
0x0f81 (0x6ba1): (0x11) If var[0x2d] != var[0x0d] then Goto 0x16bb

/ Jester has not appeared yet

/ Print message "A jester appears: "The Lord of misrule is angry for I have 
/ lost one of the tools of my trade. Have you seen it?"" (0x2cb)
0x0f86 (0x6ba6): (0x05) Print message (constant) 0x2cb

/ Set the flag the indicates if the jester has appeared to 0x01 as he has
0x0f89 (0x6ba9): (0x09) Set var[0x2d] = var[0x05]

/ Print message "A jester appears: "The Lord of misrule is angry for I have 
/ lost one of the tools of my trade. Have you seen it?""

/ Set the second word object to be the "jester" (0xd9)
0x0f8c (0x6bac): (0x08) Set var[0x25] = (constant) 0xd9

/ Set the location of the jester to be the current location 
0x0f8f (0x6baf): (0x00) Goto 0x1281
**************************************************************************
/ Branch ahead and print "you can't"
0x0f92 (0x6bb2): (0x00) Goto 0x1681

**************************************************************************
* Command: pat
**************************************************************************

/ Check if the player has the object in their inventory or is wearing it
0x0f95 (0x6bb5): (0x01) Gosub 0x165b

/ "Print nothing happens"
0x0f98 (0x6bb8): (0x00) Goto 0x16bb

**************************************************************************
* Command: dig
**************************************************************************

/ Set the second word to the shovel (0x9a)
0x0f9b (0x6bbb): (0x08) Set var[0x25] = (constant) 0x9a

/ Check to see if the player has the shovel (checks the object in var[0x25])
0x0f9e (0x6bbe): (0x01) Gosub 0x165b

/ If the current location is 0x01 to 0x0e print "The ground is too hard"
0x0fa1 (0x6bc1): (0x1a) If var[0x48] < (constant) 0x0f then Goto 0x0ff4

/ If the current location is between 0x0f to 0x14 along the river bank
/ the player can dig a hole repeatedly until it kills them
0x0fa5 (0x6bc5): (0x1a) If var[0x48] < (constant) 0x15 then Goto 0x0fee

/ If the current location is between 0x15 0x30 to 0x0e print "The ground is too hard"
0x0fa9 (0x6bc9): (0x1a) If var[0x48] < (constant) 0x31 then Goto 0x0ff4

/ If the current location is between 0x31 to 0x39
/ the player can dig a hole repeatedly until it kills them
/ 0x31 : standing below a small hill rising from a lush green grassy valley. There's an opening in the hillside. Far to the east is a watering hole, surrounded by grazing animals
/ 0x32 : west of the waterhole. The grazing animals watch you with interest: some of them look very large
/ 0x33 : by a pool of muddy water. The grazing dinosaurs walk slowly away as you approach
/ 0x34 : west of the hill
/ 0x35 : on the prairie
/ 0x36 : in a deep pit, presumably an animal trap
/ 0x37 : by the edge of the pit
/ 0x38 : climbing a well-worn path
/ 0x39 : on a wide ledge outside a warm cave
0x0fad (0x6bcd): (0x1a) If var[0x48] < (constant) 0x3a then Goto 0x0fee

/ Branch if the location is NOT "in the dungeons which are dank and depressing."
0x0fb1 (0x6bd1): (0x19) If var[0x48] != (constant) 0x5c then Goto 0x0fce

/ Player is in the dungeons

/ Branch if the player is NOT in a hole 
0x0fb5 (0x6bd5): (0x19) If var[0x14] != (constant) 0x11f then Goto 0x0fc0

/ Set the second word to the coffer (0x7f)
0x0fba (0x6bda): (0x08) Set var[0x25] = (constant) 0x7f

/ Print that the player finds the coffer 
0x0fbd (0x6bdd): (0x01) Gosub 0x1480

/ Branch if the player is NOT in a deeper hole 
0x0fc0 (0x6be0): (0x19) If var[0x14] != (constant) 0x120 then Goto 0x0fee

/ Player is in a deeper hole

/ Print message "The ground under your feet gives way"
0x0fc5 (0x6be5): (0x05) Print message (constant) 0x2d8

/ Set the player's target location to the grandfather clock (0x03)
0x0fc8 (0x6be8): (0x08) Set var[0x49] = (constant) 0x3

/ Perform location checks and move the player there
0x0fcb (0x6beb): (0x00) Goto 0x1225

**************************************************************************

/ Branch if the current location is NOT "an old, musty, dry cave floored
/ with very soft earth" (0x65)
0x0fce (0x6bee): (0x19) If var[0x49] != (constant) 0x65 then Goto 0x0fdf

/ In the musty cave

/ Branch if the player is NOT in a hole
0x0fd2 (0x6bf2): (0x19) If var[0x14] != (constant) 0x11f then Goto 0x0fee

/ Player is in a hole

/ Set the second word to the map
0x0fd7 (0x6bf7): (0x08) Set var[0x25] = (constant) 0x8c

/ Player has discovered the map - print that they found it 
0x0fda (0x6bfa): (0x01) Gosub 0x1480

/ Go increment the message id for the how deep in the hole the player is
0x0fdd (0x6bfd): (0x00) Goto 0x0fee
**************************************************************************

/ If the player's location is NOT "in a putrescent chamber" (0xc6)
0x0fdf (0x6bff): (0x19) If var[0x49] != (constant) 0xc6 then Goto 0x0ff4

/ Player is in a putrescent chamber

/ Branch if the bottle has already been loosened
/ var[0x05] is the constant 0x00
0x0fe3 (0x6c03): (0x13) If var[0x5c] > var[0x0d] then Goto 0x0fee

/ Print message "The bottle is loosened"
0x0fe7 (0x6c07): (0x05) Print message (constant) 0xc3

/ Set the bottle loosened status to loosened (0x01)
/ var[0x05] is the constant 0x01
0x0fe9 (0x6c09): (0x09) Set var[0x5c] = var[0x05]

/ Go increment the message id for the how deep in the hole the player is
0x0fec (0x6c0c): (0x00) Goto 0x0fee

/ Actually increment the message id for the how deep in the hole the player is
0x0fee (0x6c0e): (0x0a) Set var[0x14] += var[0x05]

/ Check if it's light / dark and print the location description if light
0x0ff1 (0x6c11): (0x00) Goto 0x0165

/ Print message "The ground is too hard"
0x0ff4 (0x6c14): (0x05) Print message (constant) 0x2d7

/ Done
0x0ff7 (0x6c17): (0x02) Return

**************************************************************************
* Command: fire/shoot
**************************************************************************

/ Check the rocket grappling hook location - if it's in the right
/ place, allows it to fire and moves the player to the sports and aerobics
/ arena.  Otherwise, falls back to the ground

/ Check if player has the object or is wearing it
0x0ff8 (0x6c18): (0x01) Gosub 0x165b

/ Check to see if the object (second word) is "rocket" (0x95)
/ if it isn't goto the routine that says "Don't be silly!"
0x0ffb (0x6c1b): (0x19) If var[0x25] != (constant) 0x95 then Goto 0x1686

/ Second word is "rocket"

/ Print message "The rocket shoots up \m"
0x1000 (0x6c20): (0x05) Print message (constant) 0x2ef

/ Check to see if the current location (0x48) is "in a room with no roof.
/ An opening is visible far above". (0xb9), if so skip ahead
0x1003 (0x6c23): (0x18) If var[0x48] == (constant) 0xb9 then Goto 0x100b

/ Print message "but falls back\n"
0x1007 (0x6c27): (0x05) Print message (constant) 0x2f0

/ Return as the rocket failed to grapple (no opening in current location)
0x100a (0x6c2a): (0x02) Return

/ Rocket successfully fired in the right location so 
/ print "and you climb its rope"
0x100b (0x6c2b): (0x05) Print message (constant) 0x2ec

/ Set the target location to "outside a sports and aerobics arena" (0xba)
0x100e (0x6c2e): (0x08) Set var[0x49] = (constant) 0xba

/ Move player to target location and perform location specific checks
0x1011 (0x6c31): (0x00) Goto 0x1225

**************************************************************************
* Command: turn/twist
**************************************************************************

/ Check to see if the player has the object or its in the same location
/ Doesn't return if the player doesn't have it
0x1014 (0x6c34): (0x01) Gosub 0x1492

/ Branch ahead if the second word isn't cogs (0xa3)
0x1017 (0x6c37): (0x19) If var[0x25] != (constant) 0xa2 then Goto 0x1031

/ Second word is cogs

/ Branch ahead if the third word is not one of the numbers from 1 to 9
/ 0xf1 is the dictionary entry for one
0x101b (0x6c3b): (0x1a) If var[0x26] < (constant) 0xf1 then Goto 0x16ae

/ Branch ahead if the third word is not one of the numbers from 1 to 9
/ 0xf1 is the dictionary entry for nine
0x1020 (0x6c40): (0x1b) If var[0x26] > (constant) 0xf9 then Goto 0x16ae

/ The player turned a numbered cog

/ Print message "The room shakes"
0x1025 (0x6c45): (0x05) Print message (constant) 0xe5

/ Use var[0x56] as a temporary variable
/ Set it to the dictionary code before the number one
0x1027 (0x6c47): (0x08) Set var[0x56] = (constant) 0xf0

/ Set the current zone to the dictionary id of the third word e.g. 0xf3 for THREE
0x102a (0x6c4a): (0x09) Set var[0x2c] = var[0x26]

/ Subtract 0xf0 from the dictionary id to get to the zone number 
/ e.g. THREE is 0xf3 - 0xf0 = 3
0x102d (0x6c4d): (0x0b) Set var[0x2c] -= var[0x56]

/ Finished turning the cog
0x1030 (0x6c50): (0x02) Return

/ Print "Nothing happens"
0x1031 (0x6c51): (0x00) Goto 0x16bb

**************************************************************************
* Command: pull
**************************************************************************

/ Check to see if the player pulled the "tooth" 

/ Check to see if the second word is "tooth" (0x9f) and branch if not
0x1034 (0x6c54): (0x19) If var[0x25] != (constant) 0x9f then Goto 0x104d

/ Branch if the NPC is NOT the tiger (0xcb)
0x1038 (0x6c58): (0x19) If var[0x4c] != (constant) 0xcb then Goto 0x104d

/ NPC is the tiger

/ Branch if the player has not yet fed the tiger the tin of catfood
/ var[0x0d] is the constant 0x00
0x103c (0x6c5c): (0x10) If var[0x1d] == var[0x0d] then Goto 0x09d4

/ Tiger has been fed

/ Pring message "The bad tooth comes loose easily. The tiger is delighted 
/ and bounds off joyfully" (0x14c)
0x1041 (0x6c61): (0x05) Print message (constant) 0x14c      

/ Add the tooth to the player's inventory
0x1044 (0x6c64): (0x01) Gosub 0x1269

/ Set the second word to the tiger (current NPC)
0x1047 (0x6c67): (0x09) Set var[0x25] = var[0x4c]

/ Remove the tiger from the game
0x104a (0x6c6a): (0x00) Goto 0x1625

/ NOTE weird check - checks to see if the tiger is in the inventory
/ which it obviously isn't.  Think it's just used to loop back to 
/ the normal location checks
0x104d (0x6c6d): (0x01) Gosub 0x1492

**************************************************************************
* Check to see if the player pulled the "recessed handle" 
**************************************************************************
/ If the second word isn't the object "recessed handle", skip ahead 
0x1050 (0x6c70): (0x19) If var[0x25] != (constant) 0xb0 then Goto 0x105d

/ It's the recessed handle

/ Print message "The ground under your feet gives way"
0x1054 (0x6c74): (0x05) Print message (constant) 0x2d8

/ Set the target location of the player to "inside the gigantic clock" (0x03)
0x1057 (0x6c77): (0x08) Set var[0x49] = (constant) 0x3

/ Move the player to the target location
0x105a (0x6c7a): (0x00) Goto 0x1225

**************************************************************************
* Check to see if the player pulled the "grate" 
**************************************************************************
/ If the second word isn't the object "grate", skip ahead
0x105d (0x6c7d): (0x19) If var[0x25] != (constant) 0xb3 then Goto 0x106d

/ It's the "grate in the south wall"

0x1061 (0x6c81): (0x01) Gosub 0x1440

/ Print message  "It comes loose "
0x1064 (0x6c84): (0x05) Print message (constant) 0x2e0

/ Set the flag that indicates the grate has been pulled from the wall
/ var[0x05] is the constant 0x01
0x1067 (0x6c87): (0x09) Set var[0x21] = var[0x05]

/ Remove the grate from the game by setting its location to 0xff
0x106a (0x6c8a): (0x00) Goto 0x1625

/ Branch ahead and print "you can't"
0x106d (0x6c8d): (0x00) Goto 0x1681

**************************************************************************
* Command: examine
**************************************************************************

/ Branch if the word count is 0x01 and print "You'll need
/ to say more than that"
/ var[0x05] is the constant 0x01
0x1070 (0x6c90): (0x10) If var[0x27] == var[0x05] then Goto 0x16a6

/ If there isn't a second word print "Sorry, I can't tell you any more "
0x1075 (0x6c95): (0x10) If var[0x25] == var[0x0d] then Goto 0x1081

/ If second word is a non-object / non-NPC print 
/ "Sorry, I can't tell you any more "
0x1079 (0x6c99): (0x1b) If var[0x25] > (constant) 0xe3 then Goto 0x1081

/ Anything between 0x50 and 0xe3 is a valid object or NPC 

/ Branch if it's a valid NPC or object
/ to check to see if the object or NPC is in the same location as the player
0x107d (0x6c9d): (0x1b) If var[0x25] > (constant) 0x4f then Goto 0x1084

/ Not a valid object or NPC

/ Print message  "Sorry, I can't tell you any more "
0x1081 (0x6ca1): (0x05) Print message (constant) 0x3b

/ Finished 
0x1083 (0x6ca3): (0x02) Return

/ Check to see if the object or NPC is in the same location as the player
/ Won't return here if invalid
0x1084 (0x6ca4): (0x01) Gosub 0x1492

**************************************************************************
* Player is examining the cupboard
**************************************************************************

/ Branch if the second word is NOT the cupboard "0xa6"
0x1087 (0x6ca7): (0x19) If var[0x25] != (constant) 0xa6 then Goto 0x1090

/ Second word is the cupboard

/ Branch if the cupboard is closed (0x00)
/ var[0x0d] is the constant 0x00
0x108b (0x6cab): (0x10) If var[0x3f] == var[0x0d] then Goto 0x1672

**************************************************************************
* Player is examining the porsche
**************************************************************************

/ Branch if the second word is NOT the porsche / car (0xa8)
0x1090 (0x6cb0): (0x19) If var[0x25] != (constant) 0xa8 then Goto 0x109a

/ Second word IS the porsche / car

/ Set the second word to the petrol can (0x78)
0x1094 (0x6cb4): (0x08) Set var[0x25] = (constant) 0x78

/ Say that the player has found the petrol can after examinig the car
0x1097 (0x6cb7): (0x00) Goto 0x1480

**************************************************************************
* Player is examining the huge iron bound chest
**************************************************************************

/ Branch if the second word is NOT the huge iron bound chest (0xaf)
0x109a (0x6cba): (0x19) If var[0x25] != (constant) 0xaf then Goto 0x10a3

/ Second word is the huge iron bound chest

/ NOTE this should be var[0x40] for the open / closed status of the 
/ chest not var[0x3f] which is the status of the kitchen cupboard

/ Branch if the kitchen cupboard is closed (0x00) and say it's closed
/ var[0x0d] is the constant 0x00
0x109e (0x6cae): (0x10) If var[0x3f] == var[0x0d] then Goto 0x1672

**************************************************************************
* Player is examining the ottoman
**************************************************************************

/ Branch if the second word is NOT the ottoman (0xb1)
0x10a3 (0x6cc3): (0x19) If var[0x25] != (constant) 0xb1 then Goto 0x10b2

/ Second word is the ottoman

/ Branch if the ottoman is closed (0x00)
/ var[0x0d] is the constant 0x00
0x10a7 (0x6cc7): (0x10) If var[0x41] == var[0x0d] then Goto 0x1672

/ Ottoman is open and being examined 

/ Set the second word to the jewelled crown (0x81)
0x10ac (0x6ccc): (0x08) Set var[0x25] = (constant) 0x81

/ Player finds the crown, add it to their inventory
0x10af (0x6ccf): (0x00) Goto 0x1480

**************************************************************************
* Player is examining the compost heap
**************************************************************************

/ Branch if the second word is NOT the compost heap
0x10b2 (0x6cd2): (0x19) If var[0x25] != (constant) 0xba then Goto 0x10c6

/ Player is examining the compost heap

/ Set the second word to the silver coin
0x10b6 (0x6cd6): (0x08) Set var[0x25] = (constant) 0x80

/ Check the locationof the silver coin
0x10b9 (0x6cd9): (0xa2) Set var[0x18] = list#2[var[0x25]] (list address 0x0500)

/ Branch if the location is "undiscovered (0xfe)
/ var[0x0b] is the constant for undiscovered (0xfe)
0x10bc (0x6cdc): (0x10) If var[0x18] == var[0x0b] then Goto 0x10c3

/ Silver coin has already been discovered

/ Set the second word to the mushroom ring (0xbd)
0x10c0 (0x6ce0): (0x08) Set var[0x25] = (constant) 0xbd

/ Player finds the mushroom ring, add to their inventory if not already there
0x10c3 (0x6ce3): (0x00) Goto 0x1480

**************************************************************************
* Player is examining the rubbish pile
**************************************************************************

/ Branch if the second word is NOT the rubbish pile (0xa5)
0x10c6 (0x6ce6): (0x19) If var[0x25] != (constant) 0xa5 then Goto 0x10d0

/ Player is examining the rubbish pile

/ Set the second word to the tin opener (0x90)
0x10ca (0x6cea): (0x08) Set var[0x25] = (constant) 0x90

/ Player finds the tin opener, add to their inventory if not already there
0x10cd (0x6ced): (0x00) Goto 0x1480

**************************************************************************
* Player is examining the tiger
**************************************************************************

/ Branch if the second word is NOT the tiger (0xcb)
0x10d0 (0x6cf0): (0x19) If var[0x25] != (constant) 0xcb then Goto 0x10de

/ Player is examining the tiger

/ Set the tiger's message to the base message "lean and hungry look" (0x14d)
0x10d4 (0x6cf4): (0x08) Set var[0x35] = (constant) 0x14d

/ Add on the tiger's status to the message id to show the right message for its
/ state e.g. "pats one puffy cheek"
0x10d8 (0x6cf8): (0x0a) Set var[0x35] += var[0x1d]

/ Print the tiger's state message
0x10db (0x6cfb): (0x04) Print message var[0x35]

/ Tiger processing complete
0x10dd (0x6cfd): (0x02) Return

**************************************************************************
* Player is examining the silicate workbench
**************************************************************************

/ Branch if the second word is NOT the silicate workbench
0x10de (0x6cfe): (0x19) If var[0x25] != (constant) 0xb7 then Goto 0x10e8

/ Set the second word to the screwdriver (0x70)
0x10e2 (0x6d02): (0x08) Set var[0x25] = (constant) 0x70

/ Player finds the screwdriver , add to their inventory if not already there
0x10e5 (0x6d05): (0x00) Goto 0x1480

**************************************************************************
* Player is examining the jumble of broken robots, check if they have the lesn
**************************************************************************

/ Branch if the second word is NOT the jumble of broken robots (0xb6)
0x10e8 (0x6d08): (0x19) If var[0x25] != (constant) 0xb6 then Goto 0x1105

/ Player is examining the jumble of broken robots

/ Branch ahead if the inspection panel is closed (0x00)
/ var[0x0d] is the constant 0x00
0x10ec (0x6d0c): (0x10) If var[0x59] == var[0x0d] then Goto 0x1672

/ Inspection panel open

/ Set the working object to the carved ruby (0x97)
0x10f1 (0x6d11): (0x08) Set var[0x17] = (constant) 0x97

/ Get the location of the carved ruby (lens)
0x10f4 (0x6d14): (0xa2) Set var[0x18] = list#2[var[0x17]] (list address 0x0500)

/ Branch if the location of the carved ruby is IN the player's inventory (0xe1)
/ var[0x09] is the constant 0xe1
0x10f7 (0x6d17): (0x10) If var[0x18] == var[0x09] then Goto 0x10ff

/ Print message "The components are too minute to see" (0x2ed)
0x10fb (0x6d1b): (0x05) Print message (constant) 0x2ed

/ Player doesn't have the lens
0x10fe (0x6d1e): (0x02) Return

**************************************************************************
* Player is examining the jumble of broken robots and finds the silicon chips
**************************************************************************

/ Set the second word to the object "silicon chip"
0x10ff (0x6d1f): (0x08) Set var[0x25] = (constant) 0x53

/ Print that the player finds "a silicon chip"
0x1102 (0x6d22): (0x00) Goto 0x1480

**************************************************************************
* Player is examining the "clock"
**************************************************************************

/ If the object in the second word is NOT the "clock" (0xa1)
/ skip ahead
0x1105 (0x6d25): (0x19) If var[0x25] != (constant) 0xa1 then Goto 0x110c

/ Print message "needs winding"
0x1109 (0x6d29): (0x05) Print message (constant) 0xe4

0x110b (0x6d2b): (0x02) Return

**************************************************************************
* Player is examining the matchbox, print the number of matches
**************************************************************************

/ If the object in the second word is NOT "matches" or "matchbox" (0x6b)
/ skip ahead
0x110c (0x6d2c): (0x19) If var[0x25] != (constant) 0x6b then Goto 0x1112

/ Object is the matches

/ Player is examing the "matchbox" / "matches"

/ Print the number of matches in the matchbox
0x1110 (0x6d31): (0x03) Print Number var[0x63]

**************************************************************************
* Show the NPC / Object description 
**************************************************************************

/ Branch if the player is examining an object that can't be picked up
/ (dictionary id > 0x9f) and print "Sorry I can't tell you more" as
/ there are no messages for those items
0x1112 (0x6d32): (0x1b) If var[0x25] > (constant) 0x9f then Goto 0x1081

/ Set the message to the base message for "in the market, at a bread stall" (0x226)
/ This message is not important - it's used to get to the messages for all objects/NPCs
/ The lowest object id is 0x50 and therefore the messages for all the objects start
/ at 0x226 + 0x50 = 0x276 "A symbol of peace" and the last message is
/ at 0x225 + 0x9e = 0x2c4 "A small valuable vase" (which is no longer inthe dictionary/game)
0x1117 (0x6d37): (0x08) Set var[0x35] = (constant) 0x226

/ And the second word's object id to the base message id to get the object's description
0x111b (0x6d3b): (0x0a) Set var[0x35] += var[0x25]

/ Print the object's description
0x111e (0x6d3e): (0x04) Print message var[0x35]

/ Branch if the object is the mirror (0x6e) and kill the player (they get sucked in)!
0x1120 (0x6d40): (0x18) If var[0x25] == (constant) 0x6e then Goto 0x11f1

/ Branch if the object has a code higher then 0x58 
/ Only objects with ids of 0x50 to 0x58 have hourglass symbols
0x1125 (0x6d45): (0x1b) If var[0x25] > (constant) 0x58 then Goto 0x112c

/ Print message "\n\nIt is marked with an hourglass symbol"
0x1129 (0x6d49): (0x05) Print message (constant) 0x16d

/ Get the treasure value from list#3
0x112c (0x6d4c): (0xa3) Set var[0x18] = list#3[var[0x25]] (list address 0x1ef0)

/ It's only worth something if this value is greater than (>) 0x01 
/ This checks to see if the value is less than (<) the constant 0x02
/ and if so skips ahead and doesn't primt the message
0x112f (0x6d4f): (0x12) If var[0x18] < var[0x06] then Goto 0x1136

/ Worth something - value is 0x03

/ Print message "\n\nIt is a valuable treasure"
0x1133 (0x6d53): (0x05) Print message (constant) 0x16f

/ Finished!
0x1136 (0x6d56): (0x02) Return

**************************************************************************
* Comamnd: wind
**************************************************************************

/ Check to see if the second word object is either being worn, in the 
/ inventory or in the same location as the player
0x1137 (0x6d57): (0x01) Gosub 0x1492

/ Object is in the inventory, being worn or in the same location

/ Check to see if the second word object is the clock, if it is branch
/ to print the message "the door opens"
0x113a (0x6d5a): (0x18) If var[0x25] == (constant) 0xa1 then Goto 0x0d99

/ It's NOT the clock so print the "You can't" message i.e. you can wind <object>
0x113f (0x6d5f): (0x00) Goto 0x1681

**************************************************************************
* Comamnd: shout
**************************************************************************

/ Print message "noisy little beggar aren't you!"
0x1142 (0x6d62): (0x05) Print message (constant) 0x14b

/ If the player's current location is not "in the freezing cave"
/ skip ahead and return 
0x1145 (0x6d65): (0x19) If var[0x48] != (constant) 0x23 then Goto 0x1153

/ Branch if the icicle is already fallen from the ceiling
/ var[0x0d] is the constant 0x00
0x1149 (0x6d69): (0x13) If var[0x1f] > var[0x0d] then Goto 0x1153

/ Icicle is still in place

/ Print message "The din shakes the icicle loose"
0x114d (0x6d6d): (0x05) Print message (constant) 0x14a

/ Set that status of the icicle to loose (0x01)
/ var[0x05] is the constant 0x01
0x1150 (0x6d70): (0x09) Set var[0x1f] = var[0x05]

/ Finished
0x1153 (0x6d73): (0x02) Return

**************************************************************************

/ Not used by anything
0x1154 (0x6d74): (0x02) Return

**************************************************************************
* Command: kiss
**************************************************************************

/ Check that the player has the object or npc or it is in the same location
0x1155 (0x6d75): (0x01) Gosub 0x1492

/ Branch if the object is NOT the frog
0x1158 (0x6d78): (0x19) If var[0x25] != (constant) 0x62 then Goto 0x1169

/ NPC IS the frog

/ Print message "The frog turns into a handsome prince"
0x115c (0x6d7c): (0x05) Print message (constant) 0x148

/ Remove the frog from the game by setting its location to 0xff
0x115f (0x6d7f): (0x01) Gosub 0x1625

/ Set the current working object to the "prince" (0xd7)
0x1162 (0x6d82): (0x08) Set var[0x17] = (constant) 0xd7

/ Set the location of the "prince" to the player's current location
0x1165 (0x6d85): (0xe2) Set list#2[var[0x17]] = var[0x48] (list address 0x0500)

/ Finished
0x1168 (0x6d88): (0x02) Return

/ Branch and print "Nothing happens" if the dictionary id is not a 
/ proper NPC (<0xc8)
0x1169 (0x6d89): (0x1a) If var[0x25] < (constant) 0xc8 then Goto 0x16bb

/ Set the working object to the size / hit points of the NPC
0x116e (0x6d8e): (0x09) Set var[0x56] = var[0x4d]

/ Gets the hit points / size of the NPC into a working variable, and keeps reducing it
/ by 0x02 until it's less than 0x02 (so either 0x00 or 0x01)
/ If it's 0x00, print "Only a real dodo would kiss <NPC>"
/ If it's 0x01, print "MMMMMM!"

/ If the size / hit points have been reduced to < 0x02 branch
/ var[0x06] is the constant 0x02
0x1171 (0x6d91): (0x12) If var[0x56] < var[0x06] then Goto 0x117a

/ Subtract 0x02 from the size/hit points of the NPC
/ var[0x06] is the constant 0x02
0x1175 (0x6d95): (0x0b) Set var[0x56] -= var[0x06]

/ Loop back to see if the value is less than 0x02
0x1178 (0x6d98): (0x00) Goto 0x1171

/ Branch if the residual value is 0x01 
/ var[0x05] is the constant 0x01
0x117a (0x6d9a): (0x10) If var[0x56] == var[0x05] then Goto 0x1184

/ Residual value is 0x00

/ Print message  "Only a real dodo would kiss "
0x117e (0x6d9e): (0x05) Print message (constant) 0x147

/ Print the name of the object/npc that the player cannot kiss
0x1181 (0x6da1): (0x00) Goto 0x16d3

/ Print message "MMMMMMM!"
0x1184 (0x6da4): (0x05) Print message (constant) 0x146

/ Finished
0x1187 (0x6da7): (0x02) Return

**************************************************************************
* Command: say
**************************************************************************

/ Branch if the first word is plugh/plover/sesame/xyzzy and print
/ "the magical word doesn't work"
0x1188 (0x6da8): (0x18) If var[0x24] == (constant) 0x19 then Goto 0x08a4

/ Branch if the second word is NOT eureka/ureka
0x118d (0x6dad): (0x19) If var[0x25] != (constant) 0xe6 then Goto 0x1196

/ Second word is "eureka"

/ Branch if the player's current location is "the invention room." (0x44)
0x1191 (0x6db1): (0x18) If var[0x48] == (constant) 0x44 then Goto 0x0d63

/ Location is NOT the "the invention room"

/ Branch if the second word is not "james" (0xe7)
0x1196 (0x6db6): (0x19) If var[0x25] != (constant) 0xe7 then Goto 0x11a3

/ Branch if the third word is not "watt" (0xe8)
0x119a (0x6dba): (0x19) If var[0x26] != (constant) 0xe8 then Goto 0x11a3

/ Second and third words are "james watt"

/ Branch if the player's current location is "in the invention alcove..." (0x45)
0x119e (0x6dbe): (0x18) If var[0x48] == (constant) 0x45 then Goto 0x0d63

/ Go and print "nothing happens"
0x11a3 (0x6dc3): (0x00) Goto 0x16bb

**************************************************************************
* Command: shuffle 
**************************************************************************

/ Check if player has the object or is wearing it (object id is held
/ in var[0x25], the second input word sorted by object id) 
/ Will not return if they player isn't wearing or has it in their
/ inventory
0x11a6 (0x6dc6): (0x01) Gosub 0x165b

/ Branch if the object is not the pack of cards (0x5e)
0x11a9 (0x6dc9): (0x19) If var[0x25] != (constant) 0x5e then Goto 0x1681

/ Object is the pack of cards

/ Set the second word to the "joker" (0x88)
0x11ae (0x6dce): (0x08) Set var[0x25] = (constant) 0x88

/ Player discovers the joker
0x11b1 (0x6dd1): (0x00) Goto 0x1480

**************************************************************************
* Command: kneel
**************************************************************************

/ Kneeling and worshipping in the temple

/ Set the player's kneeling status to kneeling (0x01)
/ var[0x01] is the constant 0x01
0x11b4 (0x6dd4): (0x09) Set var[0x2e] = var[0x05]

/ All done
0x11b7 (0x6dd7): (0x02) Return

**************************************************************************
* Command: kneel
**************************************************************************

/ Branch ahead if the player is kneeling (0x01)
/ var[0x0d] contains the constant 0x00
0x11b8 (0x6dd8): (0x13) If var[0x2e] > var[0x0d] then Goto 0x11c0

/ Player is standing

/ Print message ""SHOW SOME RESPECT!""
0x11bc (0x6ddc): (0x05) Print message (constant) 0x2cd

/ Do not give the player the winged sandals
0x11bf (0x6ddf): (0x02) Return

/ Player is praying - see if it's in the temple to give them the winged shoes

/ If the location is NOT "inside the temple, which contains shrines to many gods" (0x8f)
/ branch ahead  to print one of the "nothing happens" cyclical messages
0x11c0 (0x6de0): (0x19) If var[0x49] != (constant) 0x8f then Goto 0x16bb

/ If the god Mercury has already given the "winged sandals" branch ahead to print
/ one of the "nothing happens" cyclical messages
0x11c5 (0x6de5): (0x13) If var[0x39] > var[0x0d] then Goto 0x16bb

/ Print message "The god Mercury appears and solemnly hands you a pair of winged sandals" (0x2cc
0x11ca (0x6dea): (0x05) Print message (constant) 0x2cc

/ Set teh status indicator to 0x01 to show the winged sandals have
/ been given to the player
0x11cd (0x6ded): (0x09) Set var[0x39] = var[0x05]

/ Set the second word to the object id for "winged shoes" (0x99)
0x11d0 (0x6df0): (0x08) Set var[0x25] = (constant) 0x99

/ Add the "winged shoes" to the player's inventory
0x11d3 (0x6df3): (0x00) Goto 0x1269

**************************************************************************
* Check to see if the player has the keys when opening the cages
**************************************************************************
/ Set the second word object id to the "keys" (0x63)
0x11d6 (0x6df6): (0x08) Set var[0x25] = (constant) 0x63

/ Check to see if the player has the keys in their inventory
/ Will return if the player has the keys to the caller
0x11d9 (0x6df9): (0x00) Goto 0x165b

**************************************************************************
* Check to see if the player has the star otherwise they will not be 
* authorised to event the cubicle, nor the alcove room or go north from
* the floating platform 
**************************************************************************
/ Set the working object id to "star" (0x9b)
0x11dc (0x6dfc): (0x08) Set var[0x17] = (constant) 0x9b

/ Get the current location of the "star"
0x11df (0x6dff): (0xa2) Set var[0x18] = list#2[var[0x17]] (list address 0x0500)

/ If the "star" is in the players inventory (0xe1) return
0x11e2 (0x6e02): (0x10) If var[0x18] == var[0x09] then Goto 0x11f0

/ If the "star" is being worn (0xe2) by the player, return
0x11e6 (0x6e06): (0x10) If var[0x18] == var[0x0a] then Goto 0x11f0

/ Print message "YOU'RE NOT AUTHORISED TO DO THAT!"
0x11ea (0x6e0a): (0x05) Print message (constant) 0x2e9

/ Print two newlines and go back to the main loop to reset, assess any NPC 
/ actions, print any time based messages e.g. "the candle flickers" and 
/ say What now?
0x11ed (0x6e0d): (0x00) Goto 0x05e2

/ Player is authorised as they have the star
0x11f0 (0x6e10): (0x02) Return

**************************************************************************
* Player has been killed
**************************************************************************

/ Print message "You've been killed" 0x190
0x11f1 (0x6e11): (0x05) Print message (constant) 0x190

/ Only 3 resurrections are allowed. Everytime the player dies,
/ the death "score" is incremented by 100 (0x64) after the resurrection
/ check. When it exceeds 200, "...the sand's run out". 
/ First death, it's 0 at this point
/ Second death, it's 100 at this point
/ Third death, it's 200 at this point
/ Fourth death, it's 300 at this point and over the limit check (> 200)

/ Check to see if the player can be resurrected, only if their death
/ score is 200 or less.  If greater, go to the "...the sand's run out" message
/ and don't bother asking if they want to be resurrected
0x11f4 (0x6e14): (0x1b) If var[0x62] > (constant) 0xc8 then Goto 0x1212

/ Set the variable to the "Would you like to be resurrected?" message
0x11f8 (0x6e18): (0x08) Set var[0x35] = (constant) 0x270

/ Print the message and ask the user to enter a yes/no response 
0x11fc (0x6e1c): (0x01) Gosub 0x1522

/ If the player responded with "No" then branch ahead to end the game
0x11ff (0x6e1f): (0x10) If var[0x24] == var[0x05] then Goto 0x1215

/ Player wanted to be resurrected

/ Print message "Clouds of sand billow up...\n\n"
0x1203 (0x6e23): (0x05) Print message (constant) 0x272

/ Set the temporary variable to 100 (0x64)
0x1206 (0x6e26): (0x08) Set var[0x56] = (constant) 0x64

/ Add 100 (0x64) to the death score
/ Add the temporary value to the death score
0x1209 (0x6e29): (0x0a) Set var[0x62] += var[0x56]

/ Set the target location for the resurrection to the 
/ "grandfather clock" (0x03)
0x120c (0x6e2c): (0x08) Set var[0x49] = (constant) 0x3

/ Move the player there
0x120f (0x6e2f): (0x00) Goto 0x1225

**************************************************************************
* Player cannot be resurrected so print a message
**************************************************************************

/ Print message "Sorry the sand's run out"
0x1212 (0x6e32): (0x05) Print message (constant) 0x271

/ Print the player's score
0x1215 (0x6e35): (0x01) Gosub 0x08d1

/ Set the message to display to "Another game?" (0x36)
0x1218 (0x6e38): (0x08) Set var[0x35] = (constant) 0x36

/ Print the message and await a Y/N answer
0x121b (0x6e3b): (0x01) Gosub 0x1522

/ If the player answered "yes" reinitialise and restart the game
0x121e (0x6e3e): (0x13) If var[0x5f] > var[0x0d] then Goto 0x06

/ Quit the game
0x1223 (0x6e43): (0x06) Function - Call Driver (0x01)

**************************************************************************
* Move player to target location and perform location specific checks
**************************************************************************

**************************************************************************
* Check to see if the door outside the amphiteature should be open
* (only if the gladiator has stolen the buckle)
**************************************************************************

/ Set the current location to the target location (move the player there)
0x1225 (0x6e45): (0x09) Set var[0x48] = var[0x49]

/ Branch if the location is NOT "outside the north entrance of an amphitheatre..."
0x1228 (0x6e48): (0x19) If var[0x49] != (constant) 0x8c then Goto 0x1235

/ Player is outside the north entrance to the amphitheatre

/ If the gladiator has NOT already stolen the golden then skip ahead
/ var[0x0d] is the constant 0x00
0x122c (0x6e4c): (0x10) If var[0x04] == var[0x0d] then Goto 0x1235

/ Buckle stolen

/ Set the door status to open 
0x1230 (0x6e50): (0x09) Set var[0x0f] = var[0x05]

/ Move to the next location check
0x1233 (0x6e53): (0x00) Goto 0x1238

/ Set the door open status to closed (0x00)
/ var[0x0d] is the constant for 0x00
0x1235 (0x6e55): (0x09) Set var[0x0f] = var[0x0d]

**************************************************************************
* Reset status variables to defaults until the checks are peformed
**************************************************************************

/ Set the petrol poured on ground status to NOT (0x00)
/ var[0x0d] is the constant for 0x00
0x1238 (0x6e58): (0x09) Set var[0x44] = var[0x0d]   

/ Set the player status to NOT in a hole/deep hole
0x123b (0x6e5b): (0x08) Set var[0x14] = (constant) 0x11e

/ Set the player's kneeling status to standing (0x00)
/ var[0x0d] is the constant for 0x00
0x123f (0x6e5f): (0x09) Set var[0x2e] = var[0x0d]

/ Set the number of turns since the player abandoned hope to zero
/ var[0x0d] is the constant for 0x00
0x1242 (0x6e62): (0x09) Set var[0x5b] = var[0x0d]

/ Check to see if the current location has a location code of less than 0xdc
/ Some locations such as down from "You are in a hands and knees crawl." will
/ take you to a place without a description where the player is just killed
/ e.g. by a giant squid
0x1245 (0x6e65): (0x1a) If var[0x49] < (constant) 0xdc then Goto 0x1255

/ One of these things will happen:
/ 0x26c  /  0x502f  : A water scorpion bites you!
/ 0x26d  /  0x5040  : A giant squid attacks!
/ 0x26e  /  0x5050  : Seaweed engulfs you!
/ 0x26f  /  0x505f  : This walkway is under construction and collapses!

/ Set the working variable to the message id that's one before the
/ first location description so e.g. for location this will become 0x190 + 1
/ shortly
0x1249 (0x6e69): (0x08) Set var[0x56] = (constant) 0x190

/ Add the target location id to the 0x190 message id to get the location description
/ which in this case is actually a player death message
0x124d (0x6e6d): (0x0a) Set var[0x56] += var[0x49]

/ Print the current location description which is 0x190 + location id
0x1250 (0x6e70): (0x04) Print message var[0x56]

/ Kill the player
0x1252 (0x6e72): (0x00) Goto 0x11f1

**************************************************************************
* Check to see if the fallen star should be extinguished
**************************************************************************

/ Check to see if "fallen star" is in the inventory, if not branch ahead
0x1255 (0x6e75): (0x10) If var[0x23] == var[0x0d] then Goto 0x1266

/ "fallen star" is in the inventory

/ Determine if there is water in the current location 
/ var[0x3b] will be set to indicate this
0x1259 (0x6e79): (0x01) Gosub 0x1458

/ If the star is in NOT in a water location, skip ahead
0x125c (0x6e7c): (0x10) If var[0x3b] == var[0x0d] then Goto 0x1266

/ Star is in a water location where it can be cooled

/ Print message "The water cools the star in a hissing of steam"
0x1260 (0x6e80): (0x05) Print message (constant) 0x2e8

/ Set the hot star turn countdown counter to zero 
0x1263 (0x6e83): (0x09) Set var[0x22] = var[0x0d]

/ CHeck if it's light / dark and print the location description if light
0x1266 (0x6e86): (0x00) Goto 0x0165

**************************************************************************
* Add item to inventory and increment number of items carried
**************************************************************************

/ If the object is in the inventory already, reduce the inventory 
/ count by one before moving it to the hidden location 0xff
0x1269 (0x6e89): (0x01) Gosub 0x1625

/ Set the location for the object to be in the inventory - the location id
/ for the inventory (0xE1) is held in constant variable 0x09
0x126c (0x6e8c): (0xe2) Set list#2[var[0x25]] = var[0x9] (list address 0x0500)

/ Increment the number of carried items by 1
0x126f (0x6e8f): (0x0a) Set var[0x3a] += var[0x05]

/ Finished!
0x1272 (0x6e92): (0x02) Return

**************************************************************************
* Command: wear 
**************************************************************************
/ Reduce the inventory count by 1, remove it from the inventory by 
/ setting the object location to 0xff 
0x1273 (0x6e93): (0x01) Gosub 0x1625

/ Set the location id of the object to being worn 
/ var[0x0a] is constant and set to 0xe2, the location code for items 
/ that the player is wearing
0x1276 (0x6e96): (0xe2) Set list#2[var[0x25]] = var[0xa] (list address 0x0500)

/ If the second word object is not the "rucksack" (0x98), skip ahead
0x1279 (0x6e99): (0x19) If var[0x25] != (constant) 0x98 then Goto 0x1280

/ Second word object is "rucksack"

/ Increase the inventory limit to 15 (0xf)
0x127d (0x6e9d): (0x08) Set var[0x3d] = (constant) 0xf

/ Done
0x1280 (0x6ea0): (0x02) Return

**************************************************************************
* Command: drop/put/abandon
**************************************************************************

/ Set the object's location to the location in var[0x49]

/ Reduce the inventory count by 1, remove it from the inventory by 
/ setting the object location to hidden (0xff)
0x1281 (0x6ea1): (0x01) Gosub 0x1625

/ Now set the current object's location to the player's current location held in variable 0x49
0x1284 (0x6ea4): (0xe2) Set list#2[var[0x25]] = var[0x49] (list address 0x0500)

/ If the object in word 2 is not "planks" (0x94) skip ahead
0x1287 (0x6ea7): (0x19) If var[0x25] != (constant) 0x94 then Goto 0x129b

/ Object is "planks"

/ If the location is not "further upstream where the filthy stream is quite narrow. 
/ A lone narcissus grows amidst the nettles on the opposite bank" (0x12), skip ahead
0x128b (0x6eab): (0x19) If var[0x48] != (constant) 0x12 then Goto 0x129b

/ Object is "planks" and location is "further upstream..."

/ Set the message to "The tied planks bridge the stream" (0xff)
0x128f (0x6eaf): (0x08) Set var[0x35] = (constant) 0xff

/ Check to see if the planks have been tied together - the status of the
/ planks is held in variable 0x43, when 0x00 they are untied, when 0x01
/ they are tied.  If they are tied then branch ahead to print the message
0x1292 (0x6eb2): (0x13) If var[0x43] > var[0x0d] then Goto 0x1299

/ Planks are untied

/ Set the message to "The planks are too short to cross the stream" (0xfd)
0x1296 (0x6eb6): (0x08) Set var[0x35] = (constant) 0xfd

/ Print the planks message (for either tied or untied)
0x1299 (0x6eb9): (0x04) Print message var[0x35]

/ If the second word is NOT "icicle" (0x67), skip ahead
0x129b (0x6ebb): (0x19) If var[0x25] != (constant) 0x67 then Goto 0x12b5

/ Object is "icicle"

/ If the location is not "in the frozen forest, amidst tall, 
/ snow-laden trees" (0x2a), skip ahead
0x129f (0x6ebf): (0x19) If var[0x48] != (constant) 0x2a then Goto 0x12b5

/ Object is "icicle" and location is "in the frozen forest..."

/ Print the message "The lake freezes round the icicle!"
0x12a3 (0x6ec3): (0x05) Print message (constant) 0x104d

/ Remove the "icicle" from the inventory and hide it (set its 
/ location to 0xff) so it's effectively gone from the game
0x12a6 (0x6ec6): (0x01) Gosub 0x1625

/ Set the second word to "lake" (0xaa)
0x12a9 (0x6ec9): (0x08) Set var[0x25] = (constant) 0xaa

/ Hide the item (sets it's location to 0xff so it's no longer available)
/ In this case, the lake is removed because it's frozen
0x12ac (0x6ecc): (0x01) Gosub 0x1625

/ Set the second word to "sheet" (0xab)
0x12af (0x6ecf): (0x08) Set var[0x25] = (constant) 0xab

/ Set the current location of the ice "sheet" (the frozen lake) to the 
/ target location held in variable 0x49.  In this case it holds the location 
/ "in the frozen forest..."
0x12b2 (0x6ed2): (0xe2) Set list#2[var[0x25]] = var[0x49] (list address 0x0500)

/ If the second word object is NOT "wheel", skip ahead
0x12b5 (0x6ed5): (0x19) If var[0x25] != (constant) 0x74 then Goto 0x12bf

/ Set the current location of the wheel to be "inside a gigantic clock" (0x03) 
/ as variable 0x07 is always set to 0x03
0x12b9 (0x6ed9): (0xe2) Set list#2[var[0x25]] = var[0x7] (list address 0x0500)

/ When the wheel is dropped, "The ground under your feet gives way" and 
/ the player is placed in the gigantic clock
0x12bc (0x6edc): (0x00) Goto 0x1054

**************************************************************************
* Check to see if the player is "abandoning hope" (the milestone) at the
* "...ugly arch..." if so set the score progress flag 0x5a
**************************************************************************

/ If the player isn't dropping the "milestone" / "hope", branch ahead
0x12bf (0x6edf): (0x19) If var[0x25] != (constant) 0x6d then Goto 0x12cf

/ If the player "isn't in front of the ugly arch", branch ahead
0x12c3 (0x6ee3): (0x19) If var[0x48] != (constant) 0xc0 then Goto 0x12cf

/ Player is in location "in front of an ugly arch: "ABANDON 
/ HOPE ALL YE WHO ENTER HERE" (0xc0)" and dropping (abandoning) the 
/ "milestone" / "hope" 

/ Print message "Father Time appears. "Do not be afraid. What you are about 
/ to see is the future if the Timelords win. There is still time to defeat 
/ them." (0xc8) and is dropping the "milestone" / "hope" object (0x6d)
0x12c7 (0x6ee7): (0x05) Print message (constant) 0xc8

/ Set the flag that the player has abandoned hope to 0x01
/ var[0x05] is the constant 0x01
0x12c9 (0x6ee9): (0x09) Set var[0x5a] = var[0x05]

/ Check exits
0x12cc (0x6eec): (0x00) Goto 0x0d63

**************************************************************************
* Check to see if all the required items are in the cauldron at the end
**************************************************************************

/ Check to see if the player's current location is "lost in the mists of time"
0x12cf (0x6eef): (0x19) If var[0x49] != (constant) 0xdc then Goto 0x12ed

/ Set the current working object id to the olive branch (0x50)
0x12d3 (0x6ef3): (0x08) Set var[0x17] = (constant) 0x50

/ Get the current location of the olive branch 
0x12d6 (0x6ef6): (0xa2) Set var[0x18] = list#2[var[0x17]] (list address 0x0500)

/ Branch ahead if the location of the olive branch is NOT "lost in the mists of time"
0x12d9 (0x6ef9): (0x11) If var[0x18] != var[0x49] then Goto 0x12ed

/ Increment the working object id to the next object
0x12dd (0x6efd): (0x0a) Set var[0x17] += var[0x05]

/ Loop until all the following objects have been checked:
/ Olive branch (0x50), buckle, cap, microchip, evil eye, box, diamond,
/ teardrop, ivory, tusk, wing, egg (0x59)
0x12e0 (0x6f00): (0x1a) If var[0x17] < (constant) 0x59 then Goto 0x12d6

/ Print message "The recipe is complete! Your surroundings fade away as the 
/ structure of time is repaired. You have won!"
0x12e4 (0x6f04): (0x05) Print message (constant) 0x274

/ Set the indicator the player has conmpleted the cauldron receipe
/ (won / completed the game)
0x12e7 (0x6f07): (0x09) Set var[0x60] = var[0x05]

/ Print the player's score and ask if they want another game
0x12ea (0x6f0a): (0x00) Goto 0x1215

**************************************************************************
* Check if the object smashes when it's dropped
**************************************************************************

/ If the second word is the "poison bottle" - branch ahead
0x12ed (0x6f0d): (0x18) If var[0x25] == (constant) 0x5c then Goto 0x1301

/ If the second word is the "looking glass" - branch ahead 
0x12f1 (0x6f11): (0x18) If var[0x25] == (constant) 0x69 then Goto 0x1301

/ If the second word is the "mirror" - branch ahead 
0x12f5 (0x6f15): (0x18) If var[0x25] == (constant) 0x6e then Goto 0x1301

/ If the second word is the "glass phial" - branch ahead
0x12f9 (0x6f19): (0x18) If var[0x25] == (constant) 0x92 then Goto 0x1301

/ If the second word is NOT the object with code 0x9e
/ NOTE this object has been removed from the dictionary (the porcelain vase)
0x12fd (0x6f1d): (0x19) If var[0x25] != (constant) 0x9e then Goto 0x133d

/ It's the porcelain vase - it's smashable

/ Print message  "Oops! Smashed to smithereens "
0x1301 (0x6f21): (0x05) Print message (constant) 0x157

/ Branch ahead if the second word is not the mirror
0x1304 (0x6f24): (0x19) If var[0x25] != (constant) 0x6e then Goto 0x1328

/ Branch ahead If the brontosaurus isn't trapped in the mirror
/ var[0x0d] is the constant 0x00
0x1308 (0x6f28): (0x10) If var[0x38] == var[0x0d] then Goto 0x1328

/ Print message  "and from the debris appears "
0x130c (0x6f2c): (0x05) Print message (constant) 0x13f

/ Set word two to the brontosaurus (0xce)
0x130f (0x6f2f): (0x09) Set var[0x25] = var[0x38]

/ Print the name of the object in this case the Brontosaurus
0x1312 (0x6f32): (0x01) Gosub 0x16d3

/ Set the second word to the mirror again
0x1315 (0x6f35): (0x08) Set var[0x25] = (constant) 0x6e

/ Print message  "It wanders away "
0x1318 (0x6f38): (0x05) Print message (constant) 0x13e

/ Branch if the location is NOT "You are in a large dry cave, warmed by a blazing fire. 
/ You can see a group of cavemen." (0x3a)
0x131b (0x6f3b): (0x19) If var[0x49] != (constant) 0x3a then Goto 0x1328

/ Cavemen are here - brontosaurus will chase them away

/ Print message  ", chasing the cavemen "
0x131f (0x6f3f): (0x05) Print message (constant) 0x13d

/ Set the currnet working object id to the cave men
0x1322 (0x6f42): (0x08) Set var[0x17] = (constant) 0xcf

/ Set their location to 0xff which removes them from the game
0x1325 (0x6f45): (0xe2) Set list#2[var[0x17]] = var[0xc] (list address 0x0500)

/ Branch if the second word isn't the poison bottle (0x5c)
0x1328 (0x6f48): (0x19) If var[0x25] != (constant) 0x5c then Goto 0x133a

/ Player has asked to smash the poison bottle

/ Print message  "releasing liquid paraquat "
0x132c (0x6f4c): (0x05) Print message (constant) 0x136

/ Check to see if the "...plant is eating you"
0x132f (0x6f4f): (0x19) If var[0x4a] != (constant) 0x133 then Goto 0x133a

/ Print message  "which kills the plant "
0x1334 (0x6f54): (0x05) Print message (constant) 0x137

/ Set the number of times the player has been eaten by the plant to 0xff
/ to show it as dead
/ var[0x0c] is the constant 0xff
0x1337 (0x6f57): (0x09) Set var[0x5f] = var[0x0c]

/ Remove the poison bottle from the inventory and game by setting
/ its location to 0xff
0x133a (0x6f5a): (0x00) Goto 0x1625

/ Finished (when an object isn't breakable)
0x133d (0x6f5d): (0x02) Return

**************************************************************************
* Check to see if it's dark in the location and if they player has 
* anything to make it light 
**************************************************************************

/ Set the dark indicator to light (0x01)
/ var[0x05] is the constant 0x01
0x133e (0x6f5e): (0x09) Set var[0x2f] = var[0x05]

/ If the current location is before location 0x22
0x1341 (0x6f61): (0x1a) If var[0x48] < (constant) 0x22 then Goto 0x13a6

/ If the current location is between 0x22 and 0x30 inclusive
0x1345 (0x6f65): (0x1a) If var[0x48] < (constant) 0x31 then Goto 0x1371

/ If the current location is between 0x31 and 0x3a inclusive
0x1349 (0x6f69): (0x1a) If var[0x48] < (constant) 0x3b then Goto 0x13a6

/ If the current location is between 0x3b and 0x46 inclusive
0x134d (0x6f6d): (0x1a) If var[0x48] < (constant) 0x47 then Goto 0x1371

/ If the current location is between 0x47 and 0x55 inclusive
0x1351 (0x6f71): (0x1a) If var[0x48] < (constant) 0x56 then Goto 0x13a6

/ If the current location is between 0x56 and 0x5a inclusive
0x1355 (0x6f75): (0x1a) If var[0x48] < (constant) 0x5d then Goto 0x1371

/ If the current location is between 0x5b and 0x62 inclusive
0x1359 (0x6f79): (0x1a) If var[0x48] < (constant) 0x63 then Goto 0x13a6

/ If the current location is between 0x63 and 0x80 inclusive
0x135d (0x6f7d): (0x1a) If var[0x48] < (constant) 0x81 then Goto 0x1371

/ If the current location is between 0x81 and 0x9d inclusive
0x1361 (0x6f81): (0x1a) If var[0x48] < (constant) 0x9e then Goto 0x13a6

/ If the current location is between 0x9e and 0xa4 inclusive
0x1365 (0x6f85): (0x1a) If var[0x48] < (constant) 0xa3 then Goto 0x1371

/ If the current location is between 0xa4 and 0xc3 inclusive
0x1369 (0x6f89): (0x1a) If var[0x48] < (constant) 0xc4 then Goto 0x13a6

/ If the current location is between 0xc4 and 0xd6 inclusive
0x136d (0x6f8d): (0x1b) If var[0x48] > (constant) 0xd7 then Goto 0x13a6

/ Current location is between 0xc5 and 0xd7 inclusive 
/ Also called here from above (goto 0x1371)

/ Set the working object id to "firefly" (0x85)
0x1371 (0x6f91): (0x08) Set var[0x17] = (constant) 0x85

/ Get the location of the "firefly" (0x85)
0x1374 (0x6f94): (0xa2) Set var[0x18] = list#2[var[0x17]] (list address 0x0500)

/ If the "firefly" is in the current location (0x48), branch ahead
0x1377 (0x6f97): (0x10) If var[0x18] == var[0x48] then Goto 0x13a6

/ If the "firefly" is in the player's inventory, branch ahead
(var[0x09] contains the inventory code constant 0xE1)
0x137b (0x6f9b): (0x10) If var[0x18] == var[0x09] then Goto 0x13a6

/ If the isn't a lit match then branch ahead to check the candle
/ var[0x37] is the number of moves until the candle burns out
/ var[0x0d] is the constant 0x00
0x137f (0x6f9f): (0x10) If var[0x37] == var[0x0d] then Goto 0x1391

/ Set the working object id to the "matchbox" (0x6b)
0x1383 (0x6fa3): (0x08) Set var[0x17] = (constant) 0x6b

/ Get the location of the "matchbox" (0x6b)
0x1386 (0x6fa6): (0xa2) Set var[0x18] = list#2[var[0x17]] (list address 0x0500)

/ If the "matchbox" is in the current location (0x48), branch ahead
0x1389 (0x6fa9): (0x10) If var[0x18] == var[0x48] then Goto 0x13a6

/ If the "matchbox" is in the player's inventory, branch ahead
/ (var[0x09] contains the inventory code constant 0xE1)
0x138d (0x6fad): (0x10) If var[0x18] == var[0x09] then Goto 0x13a6

/ Check to see if the candle is lit and burning
/ var[0x32] is the number of turns until it burns out
/ var[0x0d] is the constant 0
0x1391 (0x6fb1): (0x10) If var[0x32] == var[0x0d] then Goto 0x13a3

/ Set the working object id to the "candle" (0x7a)
0x1395 (0x6fb5): (0x08) Set var[0x17] = (constant) 0x7a

/ Get the location of the "candle" (0x7a)
0x1398 (0x6fb8): (0xa2) Set var[0x18] = list#2[var[0x17]] (list address 0x0500)

/ If the "candle" is in the current location (0x48), branch ahead
0x139b (0x6fbb): (0x10) If var[0x18] == var[0x48] then Goto 0x13a6

/ If the "candle" is in the player's inventory, branch ahead
0x139f (0x6fbf): (0x10) If var[0x18] == var[0x09] then Goto 0x13a6

/ Set the dark indicator (0x2f) to dark (0x00)
0x13a3 (0x6fc3): (0x09) Set var[0x2f] = var[0x0d]

**************************************************************************
* Reset the message that's printed between the list of objects and location exits
**************************************************************************

/ Default the first message to print between the list of objects and location
/ exits to nothing/blank (0x02).
/ var[0x06] holds the constant 0x02
0x13a6 (0x6fc6): (0x09) Set var[0x4a] = var[0x06]

/ Default the second message to print between the list of objects and location
/ exits to nothing/blank (0x02).
/ var[0x06] holds the constant 0x02
0x13a9 (0x6fc9): (0x09) Set var[0x4b] = var[0x06]

**************************************************************************
* Find first NPC in player's location (if any) and get hit points
**************************************************************************

/ Set the working object id to the first non-player character (NPC)
/ which is the "fairy" (0xc9)
0x13ac (0x6fcc): (0x08) Set var[0x4c] = (constant) 0xc9

/ Loops here from 0x13b9
/ Get the location of the NPC
0x13af (0x6fcf): (0xa2) Set var[0x18] = list#2[var[0x4c]] (list address 0x0500)

/ If the NPC's location is the player's location, branch ahead 
/ and lookup its hit points etc
0x13b2 (0x6fd2): (0x10) If var[0x18] == var[0x49] then Goto 0x13c5

/ NPC is not in the player's location, so add 1 to the npc id and 
/ to reference the next npc
0x13b6 (0x6fd6): (0x0a) Set var[0x4c] += var[0x05]

/ Whilst there are still NPCs to check, loop back around to see if they
/ are in the player's location
0x13b9 (0x6fd9): (0x1a) If var[0x4c] < (constant) 0xec then Goto 0x13af

/ Reset the current NPC to "none" 
/ var[0x0d] is the constant 0
0x13bd (0x6fdd): (0x09) Set var[0x4c] = var[0x0d]

/ Reset the "size" of NPC (hit points) to zero
/ var[0x0d] is the constant 0
0x13c0 (0x6fe0): (0x09) Set var[0x4d] = var[0x0d]

/ Skip over the NPC hit point lookup that's immediately after this
0x13c3 (0x6fe3): (0x00) Goto 0x13c8

/ Get the hit point value of the current NPC
0x13c5 (0x6fe5): (0xa3) Set var[0x4d] = list#3[var[0x4c]] (list address 0x1ef0)

**************************************************************************
* Is the player by the polluted stream?
**************************************************************************

/ If the player's current location isn't "by the polluted stream" (0x16)
/ skip ahead to the next location check
0x13c8 (0x6fe8): (0x19) If var[0x49] != (constant) 0x16 then Goto 0x13d3

/ Player is "by the polluted stream" so need to process the weeping willow
/ messages based on whether it is chopped down or not 

/ Set the default message to "Tears rain down from the willow tree"
0x13cc (0x6fec): (0x08) Set var[0x4a] = (constant) 0x12c

/ Add on the willow tree status 0x00 for still alive and 0x01 
/ for chopped down to get the right message either 0x12c or 0x12d
0x13d0 (0x6ff0): (0x0a) Set var[0x4a] += var[0x12]

/ If the player's location is NOT either "further upstream where the 
/ filthy stream is quite narrow.  A lone narcissus grows admist the 
/ nettles on the opposite bank" (0x12) or "west of the stream" (0x13)
/ then skip ahead 
0x13d3 (0x6ff3): (0x1b) If var[0x49] > (constant) 0x13 then Goto 0x13ed
0x13d7 (0x6ff7): (0x1a) If var[0x49] < (constant) 0x12 then Goto 0x13ed

/ Player's location IS either "further upstream where the 
/ filthy stream is quite narrow.  A lone narcissus grows admist the 
/ nettles on the opposite bank" (0x12) or "west of the stream" (0x13)

/ If the planks are not tied together skip ahead
/ var[0x0d] is the constant 0x00
0x13db (0x6ffb): (0x10) If var[0x43] == var[0x0d] then Goto 0x13ed

/ Set the working object "planks" (0x94)
0x13df (0x6fff): (0x08) Set var[0x17] = (constant) 0x94

/ Get the current location of the "planks"
0x13e2 (0x7002): (0xa2) Set var[0x18] = list#2[var[0x17]] (list address 0x0500)

/ If the current location isn't "further upstream where the 
/ filthy stream is quite narrow...." (0x12) skip ahead
0x13e5 (0x7005): (0x19) If var[0x18] != (constant) 0x12 then Goto 0x13ed

/ "planks" are in the "further upstream..." location

/ Set the message to "Planks bridge the stream"
0x13e9 (0x7009): (0x08) Set var[0x4b] = (constant) 0x12e

**************************************************************************
* Is the player in the silver veined cave?
**************************************************************************

/ If the player's current location isn't "in the silver veined cave" (0x26)
0x13ed (0x700d): (0x19) If var[0x49] != (constant) 0x26 then Goto 0x13ff

/ Set the working object to "a wall of ice blocking the way south"
0x13f1 (0x7011): (0x08) Set var[0x17] = (constant) 0xa9

/ Get the location of "a wall of ice blocking the way south"
0x13f4 (0x7014): (0xa2) Set var[0x18] = list#2[var[0x17]] (list address 0x0500)

/ If the location of the "a wall of ice blocking the way south" is in the 
/ same location as the player, branch ahead as the way is still blocked
0x13f7 (0x7017): (0x10) If var[0x18] == var[0x49] then Goto 0x13ff

/ Wall of ice has been smashed

/ Set the message id for the first messsage to print between the list of objects
/ and the exits to be "There's a hole to the south" (0x12f)
0x13fb (0x5e1b): (0x08) Set var[0x4a] = (constant) 0x12f

/ If 53 is zero... branch
0x13ff (0x5e1f): (0x10) If var[0x53] == var[0x0d] then Goto 0x140b

/ If the player's current location is NOT  "You are at the edge 
/ of the ice, where drifting snow has banked up at the foot 
/ of the mountains" (0x1d)
/ branch ahead
0x1403 (0x5e23): (0x19) If var[0x48] != (constant) 0x1d then Goto 0x140b

/ At that location

/ Set the supplementary messaage to "The wood burns warmly"
0x1407 (0x5e27): (0x08) Set var[0x4a] = (constant) 0x130

/ Branch if the NPC in this location is NOT the t-rex (0xcd)
0x140b (0x5e2b): (0x1a) If var[0x4c] < (constant) 0xcc then Goto 0x1417
0x140f (0x5e2f): (0x1b) If var[0x4c] > (constant) 0xcd then Goto 0x1417

/ NPC is the T-Rex

/ Set the supplementary messaage to "The dinosaur approaches menacingly"
0x1413 (0x5e33): (0x08) Set var[0x4b] = (constant) 0x131

/ Branch if the player's current location is NOT "You are climbing the short stairs. 
/ Several wall panels sound hollow."
0x1417 (0x5e37): (0x19) If var[0x48] != (constant) 0x79 then Goto 0x1423

/ Branch if the player has NOT played the loot here 
/ var[0x0d] is the constant 0x00
0x141b (0x5e3b): (0x10) If var[0x47] == var[0x0d] then Goto 0x1423

/ Set the supplementary messaage to "A secret door leads east"
0x141f (0x5e3f): (0x08) Set var[0x4a] = (constant) 0x132

/ NOTE This variable is NOT initialised but never used (just set to 0x00)
/ here and 0x01 later
/ var[0x0d] is the constant 0x00
0x1423 (0x5e43): (0x09) Set var[0x65] = var[0x0d]

/ Set the working object id to the star (0x9b)
0x1426 (0x5e46): (0x08) Set var[0x17] = (constant) 0x9b

/ Get the current location of the star
0x1429 (0x5e49): (0xa2) Set var[0x18] = list#2[var[0x17]] (list address 0x4a20)

/ Branch if the player is not wearing the star
/ var[0x0a] is the constant 0xe2 which is the location when wearing something
0x142c (0x5e4c): (0x11) If var[0x18] != var[0x0a] then Goto 0x1433

/ Do nothing
/ NOTE clearly there was something here once

/ NOTE This variable is NOT initialised but never used (just set to 0x01)
/ here and 0x00 earlier
/ var[0x05] is the constant 0x01
0x1430 (0x5e50): (0x09) Set var[0x65] = var[0x05]

/ Branch if the player's current location is not "You are inside the tangled roots 
/ of the giant plant." (0xcd)
0x1433 (0x5e53): (0x19) If var[0x48] != (constant) 0xcd then Goto 0x143f

/ Branch if the number of turns that the plant has been eating the player
/ is greater than 0xe2 !??!? 
/ NOTE Why so high? - can never get that high because the code at 0x0434
/ only allows 4 turns being eaten. Guess it doesn't matter... maybe
/ it was more turns in an earlier version
/ var[0x09] is the constant 0xe2
0x1437 (0x5e57): (0x13) If var[0x5f] > var[0x09] then Goto 0x143f

/ Set the supplementary messaage to "The plant is eating you"
0x143b (0x5e5b): (0x08) Set var[0x4a] = (constant) 0x133

/ Checks complete
0x143f (0x5e5f): (0x02) Return

0x1440 (0x5e60): (0x13) If var[0x15] > var[0x0d] then Goto 0x144a
/ Print message  "You're not strong enough "
0x1444 (0x5e64): (0x05) Print message (constant) 0x2e1

/ Print two newlines and go back to the main loop to reset, assess any NPC 
/ actions, print any time based messages e.g. "the candle flickers" and 
/ say What now?
0x1447 (0x5e67): (0x00) Goto 0x05e2
0x144a (0x706a): (0x02) Return

**************************************************************************
* Check to see if water is present so that player can drink
**************************************************************************

/ Determine if there is water in the current location 
/ var[0x3b] will be set to indicate this
0x144b (0x706b): (0x01) Gosub 0x1457

/ If the star is in a water location [0x0d], it can be cooled, so 
/ skip ahead and process that
0x144d (0x706d): (0x10) If var[0x3b] == var[0x05] then Goto 0x1457

/ There is NO water in the current location

/ Print message "Water? Where?"
0x1451 (0x7071): (0x05) Print message (constant) 0x2c7

/ CHeck if it's light / dark and print the location description if light
0x1454 (0x7074): (0x00) Goto 0x0165

/ Finished
0x1457 (0x7077): (0x02) Return

**************************************************************************
* Check if water is in the current location
**************************************************************************

/ Sets the status of var[0x3b] which indicates if there is any water
/ in the current location.  No water is 0x00 and water is 0x01.  Used
/ for extinguishing the hot fallen star or seeing if a player can drink
/ 
/ On entry var[0x3b] is set to 0x01 - it's set to that 
/ just before "What now?" is displayed asking for user input. This is
/ the only place it can be set to 0x00 (no water)
/
/ Location ids where there is water:
/ 0x2a - 0x30 - around the frozen forest lake and after you freeze it
/ 0x33        - "by a pool of muddy water"
/ 0x52 - 0x54 - around the moat of the castle
/ 0x9b - 0x9d - in the roman baths (not in the hypocaust though)
/ 0xb1        - the space swimming pool
/
/ 1.  0x00 < location < 0x2a - var[0x3b] set to 0x00 (no water)
/ 2.  0x29 < location < 0x33 - no change             (water) 
/ 3.  location = 0x33        - no change             (water) 
/ 3.  0x33 < location < 0x52 - var[0x3b] set to 0x00 (no water)
/ 4.  0x51 < location < 0x55 - no change             (water) 
/ 5.  location = 0x8a        - no change             (water) 
/ 6.  0x54 < location < 0x9b - var[0x3b] set to 0x00 (no water)
/ 7.  0x9a < location < 0x9e - no change             (water) 
/ 8.  location = 0xb1        - no change             (water) 
/ 9.  0x9d < location < 0xdb - var[0x3b] set to 0x00 (no water)

/ These locations have no water
0x1458 (0x7078): (0x1a) If var[0x49] < (constant) 0x2a then Goto 0x147c

/ Locations from 0x2a to 0x30 have water
0x145c (0x707c): (0x1a) If var[0x49] < (constant) 0x31 then Goto 0x147f

/ Location 0x33 has water
0x1460 (0x7080): (0x18) If var[0x49] == (constant) 0x33 then Goto 0x147f

/ Locations from 0x34 to 0x51 have no water
0x1464 (0x7084): (0x1a) If var[0x49] < (constant) 0x52 then Goto 0x147c

/ Locations from 0x52 to 0x54 have water
0x1468 (0x7088): (0x1a) If var[0x49] < (constant) 0x55 then Goto 0x147f

/ Location 0x8a has water
0x146c (0x708c): (0x18) If var[0x49] == (constant) 0x8a then Goto 0x147f

/ Locations 0x55 to 0x9a have no water (apart from 0x8a above)
0x1470 (0x7090): (0x1a) If var[0x49] < (constant) 0x9b then Goto 0x147c

/ Locations from 0x9b to 0x9d have water
0x1474 (0x7094): (0x1a) If var[0x49] < (constant) 0x9e then Goto 0x147f

/ Location 0xb1 has water
0x1478 (0x7098): (0x18) If var[0x49] == (constant) 0xb1 then Goto 0x147f

/ All other locations do not have water

/ Set the water present indicator to zero 
/ var[0x0d] is the constant 0x00
0x147c (0x709c): (0x09) Set var[0x3b] = var[0x0d]

/ Finished determining if there is water in the location 
0x147f (0x709f): (0x02) Return

**************************************************************************
* Player has discovered an object (held in var[0x25]) e.g. opened a cupboard
* or dug a hole or examined the car etc
**************************************************************************

/ Print message "You find "
0x1480 (0x70a0): (0x05) Print message (constant) 0xf1

/ Get the current location of the object
0x1482 (0x70a2): (0xa2) Set var[0x18] = list#2[var[0x25]] (list address 0x0500)

/ If the object has already been discovered i.e. it still does not have a 
/ location id of undiscovered (0xfe)
0x1485 (0x70a5): (0x11) If var[0x18] != var[0x0b] then Goto 0x148f

/ Object is still undiscovered

/ Set the current location of the object to the player's location as it's just
/ been discovered
0x1489 (0x70a9): (0xe2) Set list#2[var[0x25]] = var[0x48] (list address 0x0500)

/ Printa description of the object that has been discovered
0x148c (0x70ac): (0x00) Goto 0x16d3

**************************************************************************
* Player discovers nothing (object already found so digging or examining 
* or whatever has no further action)
**************************************************************************

/ Print message " nothing."
0x148f (0x70af): (0x05) Print message (constant) 0x3c
0x1491 (0x70b1): (0x02) Return

**************************************************************************
* Check to see if the object or NPC in the second word is in the player's 
* inventory or being worn by the player or is in the same location as the 
* player (branches ahead to do that check to 0x163a)
**************************************************************************

/ Anything below 0x50 is not an object or NPC (it's a verb) so if it's a verb
/ branch 
0x1492 (0x70b2): (0x1a) If var[0x25] < (constant) 0x50 then Goto 0x169e

/ Anything above 0xeb is not an object or NPC
0x1497 (0x70b7): (0x1b) If var[0x25] > (constant) 0xeb then Goto 0x169e

/ It's an object or NPC

/ Get the object's / NPC's current location 
0x149c (0x70bc): (0xa2) Set var[0x18] = list#2[var[0x25]] (list address 0x0500)

/ If the object is in the inventory (location id 0xe1) branch ahead and return
/ var[0x09] is the constant 0xe1
0x149f (0x70bf): (0x10) If var[0x18] == var[0x09] then Goto 0x14a8

/ Object not in the inventory

/ If the object is NOT being worn (location id 0xe2) (and it's not
/ in the inventory because of check above) then branch
/ var[0x09] is the constant 0xe2
0x14a3 (0x70c3): (0x11) If var[0x18] != var[0x0a] then Goto 0x163a

/ Finished - object is being worn or its in the inventory
0x14a8 (0x70c8): (0x02) Return

**************************************************************************
* Set the random diagonal direction to the next clockwise diagonal direction
**************************************************************************

/ NOTE so this is a bit all a bit weird... why not just use a look up table?!?
/ This game only uses it to move diagonal directions to the next but I guess it
/ works for all directions... e.g. S -> W
/
/ This sets the value of var[0x11] based on the following
/ If current direction is not set (0x00), set it to NE (0x02)
/ If current direction is NE (0x02), set it to SE (0x05)
/ If current direction is SE (0x05), set it to SW (0x06)
/ If current direction is SW (0x06), set it to NW (0x08)
/ If current direction is NW (0x08), set it to NE (0x02)
/
/ That would be the simple logic at least however... what it actually does is:
/
/ If 0x11 == 0 (unset) then 0x11 = 0 + 2 + 1 - 1 = 2 (NE)
/ If 0x11 == 2 (NE)    then 0x11 = 2 + 2 + 1     = 5 (SE)
/ If 0x11 == 5 (SE)    then 0x11 = 5 + 2 - 1     = 6 (SW)
/ If 0x11 == 6 (SW)    then 0x11 = 6 + 2         = 8 (NW)
/ If 0x11 == 8 (NW)    then 0x11 = 8 + 2 - 8     = 2 (NE)
/
/ ... through a set of complex rules below because even though the game
/ only deals with diagonal directions, however this routine copes with all e.g.
/ If current direction is N (0x01), set it to E (0x03)
/ If current direction is E (0x03), set it to S (0x04)
/ If current direction is S (0x04), set it to W (0x07)
/ If current direction is W (0x07), set it to N (0x01)

/ Cache the current random diagonal direction 
0x14a9 (0x70c9): (0x09) Set var[0x56] = var[0x11]

/ Add 2 to the current random diagonal direction 
/ var[0x06] is the constant 0x02
0x14ac (0x70cc): (0x0a) Set var[0x11] += var[0x06]

/ If the previous random direction was NE (0x02) then branch 
0x14af (0x70cf): (0x18) If var[0x56] == (constant) 0x02 then Goto 0x14b7

/ Current random direction can never be South in this game but
/ branch if the previous random direction is South
0x14b3 (0x70d3): (0x19) If var[0x56] != (constant) 0x04 then Goto 0x14ba

/ Add one to var[0x11]
/ var[0x06] is the constant 0x01
0x14b7 (0x70d7): (0x0a) Set var[0x11] += var[0x05]

/ If the previous random direction was E (0x03) then branch 
0x14ba (0x70da): (0x18) If var[0x56] == (constant) 0x03 then Goto 0x14c2

/ If the previous random direction was NOT SE (0x05) then branch 
0x14be (0x70de): (0x19) If var[0x56] != (constant) 0x05 then Goto 0x14c5

/ Previous random direction was SE (0x05)

/ Subtract one from var[0x11]
/ var[0x06] is the constant 0x01
0x14c2 (0x70e2): (0x0b) Set var[0x11] -= var[0x05]

/ Check to see if the new direction has rotated clockwise fully
/ branch if still a valid direction
0x14c5 (0x70e5): (0x1a) If var[0x11] < (constant) 0x09 then Goto 0x14cf

/ Set the temp variable to 8
0x14c9 (0x70e9): (0x08) Set var[0x56] = (constant) 0x8

/ Subtract 8 to get to a valid direction 
0x14cc (0x70ec): (0x0b) Set var[0x11] -= var[0x56]

/ Return the new clockwise direction in var[0x11]
0x14cf (0x70ef): (0x02) Return

**************************************************************************
* Check to see if there is a door to open on at least one of the 
* exits to the current location 
**************************************************************************

/ Reset the "there are direction flags" indicator
0x14d0 (0x70f0): (0x09) Set var[0x0e] = var[0x0d]

/ Set the direction to check for an exit against from the current location var[0x4e]
/ This is "North" 0x01 the first time around before they are all iterated around
/ var[0x05] is the constant 0x01
0x14d3 (0x70f3): (0x09) Set var[0x10] = var[0x05]

/ Check to see if the the current exit is possible from the current location 
/ When checking a room for an exit
/ 0x48 - current location
/ 0x10 - direction to consder moving
/ 0x49 - set on return - target location if move possible (0x00 otherwise)
/ 0x4e - set on return - exit flags if move possible
0x14d6 (0x70f6): (0x0f) Exits - check location var[0x48] can move var[0x10] - exit flags in var[0x4e] and target location (or 0x00) in var[0x49]

/ If the target location is set to 0x00 then it's not possible to move in that direction
/ from the current location
/ var[0x0d] is the constant zero
0x14db (0x70fb): (0x10) If var[0x49] == var[0x0d] then Goto 0x14e6

/ Bit 4 - last direction available in the exits list for a particular location
/ Bit 3 - Door is in this direction
/ Bit 2 - Hide (set) or show this direction (not set)
/ Bit 1 - not applicable here (whether the exits code could use this for reverse location lookup)
/ If bit 4 isn't set then branch ahead (BBC Micro doesn't set this anyway)
/ Bit 4 indicates this was the last processed direction for a paritcular
/ location so is not required by the a-code, only the virtual machine

/ Check to see if there is a door in this direction - if there isn't the
/ value will be less than 0x04 (bit 3 not set) so branch ahead
/ var[0x08] is the constant 0x04
0x14df (0x70ff): (0x12) If var[0x4e] < var[0x08] then Goto 0x14e6?

/ Set that a door is on this exit
0x14e3 (0x7103): (0x09) Set var[0x0e] = var[0x05]

/ Move to the next direciton to check e.g. North (0x01) to North East (0x02)
0x14e6 (0x7106): (0x0a) Set var[0x10] += var[0x05]

/ Direction have ids from 0x01 to 0x14 - if any left to process, loop back
0x14e9 (0x7109): (0x1a) If var[0x10] < (constant) 0x14 then Goto 0x14d6

0x14ed (0x710d): (0x02) Return

**************************************************************************
* Sort Matched Input Words
**************************************************************************
* Sorts the ids of the matched input words into ascending order (lowest
* first).  The ids represent a direction / command / object / other
*
* [0x24] - first matched input word
* [0x25] - second matched input word
* [0x26] - third matched input word
* [0x56] - temporary variable to use when swapping values over 
**************************************************************************

/ Check to see if the third command or objects in var[0x26] is null (zero)
/ If so skip
/ var[0x0d] is the constant 0x00
0x14ee (0x710e): (0x10) If var[0x26] == var[0x0d] then Goto 0x14ff

/ If second word is already less than third, skip ahead
0x14f2 (0x7112): (0x12) If var[0x25] < var[0x26] then Goto 0x14ff

/ Swap second word with third word
0x14f6 (0x7116): (0x09) Set var[0x56] = var[0x25]
0x14f9 (0x7119): (0x09) Set var[0x25] = var[0x26]
0x14fc (0x711c): (0x09) Set var[0x26] = var[0x56]

/ If the second word is null (zero) skip ahead
0x14ff (0x711f): (0x10) If var[0x25] == var[0x0d] then Goto 0x1510

/ If the first word is already less thanthe second, skip ahead
0x1503 (0x7123): (0x12) If var[0x24] < var[0x25] then Goto 0x1510

/ Swap first word with second word
0x1507 (0x7127): (0x09) Set var[0x56] = var[0x24]
0x150a (0x712a): (0x09) Set var[0x24] = var[0x25]
0x150d (0x712d): (0x09) Set var[0x25] = var[0x56]

/ If the last word is null (zero), skip ahead
0x1510 (0x7130): (0x10) If var[0x26] == var[0x0d] then Goto 0x1521

/ If second word is already less than third, skip ahead
0x1514 (0x7134): (0x12) If var[0x25] < var[0x26] then Goto 0x1521

/ Otherwise swap the second word with the third word
0x1518 (0x7138): (0x09) Set var[0x56] = var[0x25]
0x151b (0x713b): (0x09) Set var[0x25] = var[0x26]
0x151e (0x713e): (0x09) Set var[0x26] = var[0x56]

/ Finished!
0x1521 (0x7141): (0x02) Return

**************************************************************************
* Print question and ask user for a yes/no response
**************************************************************************

/ Print message "\n\n"
0x1522 (0x7142): (0x05) Print message (constant) 0x05

/ Print the question passed in e.g. "Another game?" or the dragon
/ ride message etc
0x1524 (0x7144): (0x04) Print message var[0x35]

/ Get and parse the user input
0x1526 (0x7146): (0x01) Gosub 0x1540

/ If the first word is matched as "north" (if the player types
/ "No" it gets matched as "North"), branch ahead
0x1528 (0x7148): (0x18) If var[0x24] == (constant) 0x01 then Goto 0x1538

/ If the first word is matched as "negative", branch ahead
0x152c (0x714c): (0x18) If var[0x24] == (constant) 0x1f then Goto 0x1538

/ If the first word is matched as "affirmative" or "yes", branch ahead
0x1530 (0x7150): (0x18) If var[0x24] == (constant) 0x1e then Goto 0x153c

/ Invalid option

/ Print message "\n\nYES or NO, please"
0x1534 (0x7154): (0x05) Print message (constant) 0x38

/ Loop back and get the player input again
0x1536 (0x7156): (0x00) Goto 0x1522

**************************************************************************
* When a player answers no, set var[0x5f] to 0x00
**************************************************************************
/ Set the response to 0x00 for "no"
/ var[0x0d] is the constant 0x00
0x1538 (0x7158): (0x09) Set var[0x5f] = var[0x0d]
0x153b (0x715b): (0x02) Return

**************************************************************************
* When a player answers no, set var[0x5f] to 0x00
**************************************************************************

/ Set the response to 0x01 for "yes"
/ var[0x0d] is the constant 0x01
0x153c (0x715c): (0x09) Set var[0x5f] = var[0x05]
0x153f (0x715f): (0x02) Return

*************************************************************************
* Get User Input
**************************************************************************
* Get up to three words which can be commands and/or objects along with 
* total word count.  The function will parse the sentence and sticks
* matched object/command values in the following places:
* [0x24] - first matched command/object
* [0x25] - second matched command/object
* [0x26] - third matched command/object
* [0x27] - count of matched command/objects
**************************************************************************
/ Print two new lines "\n\n"
0x1540 (0x7160): (0x05) Print message (constant) 0x05

/ Get user input and store results after parsing against dictionary
0x1542 (0x7162): (0x07) Input - results in word1 var[0x24], word2 var[0x25], word3 var[0x26], count var[0x27]

/ Set var[0x61] to a new random number
0x1547 (0x7167): (0x06) Function - Random - Set var[0x61]=<random number>

/ If input word count [0x27] is zero then ask for input again
0x154a (0x716a): (0x10) If var[0x27] == var[0x0d] then Goto 0x1542

/ Sort the matched word ids into ascending order (lowest first)
0x154e (0x716e): (0x01) Gosub 0x14ee

/ Finished - input gained and sorted
0x1551 (0x7171): (0x02) Return

**************************************************************************
* Perform a count and print of the objects in the specified location
* Count the objects in the location held in var[0x49]
* Either the current location, the inventory (0xe1) or wearing (0xe2)
**************************************************************************

/ Set the working object id to the first object (0x50) in the dictionary
0x1552 (0x7172): (0x08) Set var[0x17] = (constant) 0x50

/ Count of objects in the passed location (use for printing "," and " and " and ".")
/ Initialise it to 0x00 as no objects yet detected in that location
/ var[0x0d] contains 0x00
0x1555 (0x7175): (0x09) Set var[0x3e] = var[0x0d]

/ Get the object's current location
0x1558 (0x7178): (0xa2) Set var[0x18] = list#2[var[0x17]] (list address 0x0500)

/ If the object's location isn't in the passed location 
/ as it doesn't need to be printed
0x155b (0x717b): (0x11) If var[0x18] != var[0x49] then Goto 0x1562

/ Object location is in the passd location

/ Increment the count of objects
/ var[0x05] is the constant 0x01
0x155f (0x717f): (0x0a) Set var[0x3e] += var[0x05]

/ Move to the next object id so it can be checked on the next loop
/ var[0x05] is the constant 0x01
0x1562 (0x7182): (0x0a) Set var[0x17] += var[0x05]

/ If we haven't exceeded the maximum object id 0xec, 
/ loop back and check the next object (loop back)
0x1565 (0x7185): (0x1a) If var[0x17] < (constant) 0xec then Goto 0x1558

/ All objects checked against the passed location

**************************************************************************
* Print the objects in the current location
**************************************************************************

/ Reset the working object id to 0x50 (id of the first object in the dictionary)
0x1569 (0x7189): (0x08) Set var[0x17] = (constant) 0x50

/ Current count of processed objects (how many) - initialise to zero
/ as about to loop through again and print them out until the nth 
/ object in the same location is found
/ var[0x0d] is the constant 0x00
0x156c (0x718c): (0x09) Set var[0x3c] = var[0x0d]

/ Get the object's current location
0x156f (0x718f): (0xa2) Set var[0x18] = list#2[var[0x17]] (list address 0x0500)

/ NOTE Doesn't appear to be used here
0x1572 (0x7192): (0x08) Set var[0x57] = (constant) 002

/ If the object IS in the player's current location, branch ahead
0x1575 (0x7195): (0x10) If var[0x18] == var[0x49] then Goto 0x1587

/ Object NOT in current location - loop back around and check the 
/ next object

/ Increment to the next object id
0x1579 (0x7199): (0x0a) Set var[0x17] += var[0x05]

/ If we haven't exceeded the maximum object id 0xec, 
/ loop back and check the next object (loop back)
0x157c (0x719c): (0x1a) If var[0x17] < (constant) 0xec then Goto 0x156f

/ No more objects to check and print

/ If no objects were in the current location, don't print a "." to
/ end the list
0x1580 (0x71a0): (0x10) If var[0x3c] == var[0x0d] then Goto 0x1586

/ Print message ".\n\n"
0x1584 (0x71a4): (0x05) Print message (constant) 0x07

/ All printed
0x1586 (0x71a6): (0x02) Return
**************************************************************************
* Print the object at the location
**************************************************************************
/ Increment the number of printed objects counter
0x1587 (0x71a7): (0x0a) Set var[0x3c] += var[0x05]

/ If this is the first printed object skip ahead (no comma or and to 
/ print) and print the intro phrase (if any) such as "You're wearing"
0x158a (0x71aa): (0x10) If var[0x3c] == var[0x05] then Goto 0x159b

/ If this is the last object branch branch to print, print " and " 
/ and then the object description
0x158e (0x71ae): (0x10) If var[0x3c] == var[0x3e] then Goto 0x1596

/ Not the last object so print a comma before the object description

/ Print message ', \n"
0x1592 (0x71b2): (0x05) Print message (constant) 0x03

/ Print the object description 
0x1594 (0x71b4): (0x00) Goto 0x159d

/ Print message ' and '
0x1596 (0x71b6): (0x05) Print message (constant) 0x06

/ Print the object description
0x1598 (0x71b8): (0x00) Goto 0x159d

**************************************************************************
* Either 
* 1. Print contextual suffix for objects 0x58 to 0x74 when in original location 
*    or
* 2. Print the intro phrase for before the first object (see 0x158a)
**************************************************************************
/ Print any adjective or modifier for the object e.g. tied
0x159a (0x71ba): (0x04) Print message var[0x35]

/ Print the object description
0x159c (0x71bc): (0x04) Print message var[0x17]

/ If the current object id is NOT between 0x58 and 0x74 branch ahead
/ to check planks
0x159e (0x71be): (0x1a) If var[0x17] < (constant) 0x58 then Goto 0x15be
0x15a2 (0x71c2): (0x1b) If var[0x17] > (constant) 0x74 then Goto 0x15be

/ Object id IS between 0x58 and 0x74

/ Skip ahead if the object is not the "icicle"
0x15a6 (0x71c6): (0x19) If var[0x17] != (constant) 0x67 then Goto 0x15ae

/ It's the icicle   

/ If the icicle has been shaken looes, breach ahead to check the next 
/ object 
0x15aa (0x71ca): (0x13) If var[0x1f] > var[0x0d] then Goto 0x15be

/ Get the default location for the object (icicle or other now)
0x15ae (0x71ce): (0xa1) Set var[0x57] = list#1[var[0x17]] (list address 0x1db0)

/ If the object is NOT in its default location, skip ahead (no point 
/ in displaying the contextual suffix as it's irrelevant)
0x15b1 (0x71d1): (0x11) If var[0x57] != var[0x18] then Goto 0x15be

/ Object is NOT "icicle" (0x67), it IS in its default location and it has an 
/ object id between 0x58 and 0x74.  Each of these objects has a contextual
/ suffix that is only displayed when in its default location.

/ The message base is 0x118 plus object id - so in fact the messages
/ are between 0x170 and 0x170 and 0x18c
0x15b5 (0x71d5): (0x08) Set var[0x57] = (constant) 0x118

/ Add on the state to the base message number
0x15b9 (0x71d9): (0x0a) Set var[0x57] += var[0x17]

/ Print the contextual suffix e.g. "half-buried in the earth" or 
/ "on the table"
0x15bc (0x71dc): (0x04) Print message var[0x57]

**************************************************************************
* Print the state of the "two short planks" if they are tied or not
**************************************************************************

/ Skip ahead if the current working object isn't the planks
0x15be (0x71de): (0x19) If var[0x17] != (constant) 0x94 then Goto 0x15c8

/ Current working object is the "planks" (0x94)

/ Check the status of the planks (0x43), if united (0x00) then skip ahead
0x15c2 (0x71e2): (0x10) If var[0x43] == var[0x0d] then Goto 0x15c8

/ Planks are tied together

/ Print message "tied together" (0x48)
0x15c6 (0x71e6): (0x05) Print message (constant) 0x48

**************************************************************************
* Print the state of the "tin of catfood"
**************************************************************************

/ Skip ahead if the current working object isn't the "tin of catfood"
0x15c8 (0x71e8): (0x19) If var[0x17] != (constant) 0x9c then Goto 0x15d2

/ If the can has not been opened, skip ahead
0x15cc (0x71ec): (0x10) If var[0x42] == var[0x0d] then Goto 0x15d2

/ Print message "which is open" (0x49)
0x15d0 (0x71f0): (0x05) Print message (constant) 0x49

**************************************************************************
* Print the state of the "matchbox"
**************************************************************************

/ Skip ahead if the current working object is NOT the "matches" (0x6b)
0x15d2 (0x71f2): (0x19) If var[0x17] != (constant) 0x6b then Goto 0x15dc

/ If no match is lit, skip ahead
0x15d6 (0x71f6): (0x10) If var[0x37] == var[0x0d] then Goto 0x15dc

/ Print message "(one match is lit)" (0x4a)
0x15da (0x71fa): (0x05) Print message (constant) 0x4a

**************************************************************************
* Print the state of the "huge ironbound chest"
**************************************************************************

/ Skip ahead if the current working object is NOT the "huge iron bound chest" (0xaf)
0x15dc (0x71fc): (0x19) If var[0x17] != (constant) 0xaf then Goto 0x15e6

/ If the "huge ironbound chest" (0xaf) isn't open, skip ahead
0x15e0 (0x7200): (0x10) If var[0x40] == var[0x0d] then Goto 0x15e6

/ The "huge ironbound chest" is open

/ Print message "which is open" (0x49)
0x15e4 (0x7204): (0x05) Print message (constant) 0x49

**************************************************************************
* Print the state of the "candle"
**************************************************************************

/ Skip ahead if the current working object is NOT the "candle" (0x7a)
0x15e6 (0x7206): (0x19) If var[0x17] != (constant) 0x7a then Goto 0x15f0

/ Skip ahead if the "candle" is not burning brightly
0x15ea (0x720a): (0x10) If var[0x32] == var[0x0d] then Goto 0x15f0

/ Print message "burning brightly" (0x4b)
0x15ee (0x720e): (0x05) Print message (constant) 0x4b

**************************************************************************
* Print the state of the "brontosaurus"
**************************************************************************

/ Skip ahead if the current working object is NOT the "brotosaurus" (0xce)
0x15f0 (0x7210): (0x19) If var[0x17] != (constant) 0xce then Goto 0x15fa

/ It's the "brontosaurus"

/ Skip ahead if the if the player's location is NOT "in a deep pit, presumably
/ an animal trap" (0x36)
0x15f4 (0x7214): (0x19) If var[0x48] != (constant) 0x36 then Goto 0x15fa

/ Player is in the pit and the brontosaurus is the object

/ Print message "peering down from above" (0x4c)
0x15f8 (0x7218): (0x05) Print message (constant) 0x4c

**************************************************************************
* Print the state of the "horn"
**************************************************************************

/ Skip ahead if the current working object is NOT the "horn" (0x65)
0x15fa (0x721a): (0x19) If var[0x17] != (constant) 0x65 then Goto 0x1604

/ Skip ahead if the horn is empty (0x00)
/ var[0x0d] is the constant 0x00
0x15fe (0x72fe): (0x10) If var[0x54] == var[0x0d] then Goto 0x1604

/ It's the horn and it's full

/ Print message "full of water" (0x4d)
0x1602 (0x7222): (0x05) Print message (constant) 0x4d

**************************************************************************
* Print the state of the "ottoman"
**************************************************************************

/ Skip ahead if the current working object is NOT the "ottoman" (0xb1)
0x1604 (0x7224): (0x19) If var[0x17] != (constant) 0xb1 then Goto 0x160e

/ If the "ottoman" isn't open, skip ahead
0x1608 (0x7228): (0x10) If var[0x41] == var[0x0d] then Goto 0x160e

/ It's the ottoman and it's open

/ Print message "which is open" (0x49)
0x160c (0x722c): (0x05) Print message (constant) 0x49

**************************************************************************
* Print the state of the "lion"
**************************************************************************

/ Skip ahead if the current working object is NOT the "lion" (0xde)
0x160e (0x722e): (0x19) If var[0x17] != (constant) 0xde then Goto 0x1618

/ If the tiger is free (not trapped by the net) branch ahead
0x1612 (0x7232): (0x10) If var[0x34] == var[0x0d] then Goto 0x1618

/ Lion is trapped by the net

/ Print message "tied up" (0x4e)
0x1616 (0x7236): (0x05) Print message (constant) 0x4e

**************************************************************************
* Print the state of the "fallen star"
**************************************************************************

/ Skip ahead if the current working object is NOT the "star" (0xde)
0x1618 (0x7238): (0x19) If var[0x17] != (constant) 0x9b then Goto 0x1622

/ 
0x161c (0x723c): (0x10) If var[0x22] == var[0x0d] then Goto 0x1622

/ Print message "glowing white-hot" (0x4f)
0x1620 (0x7240): (0x05) Print message (constant) 0x4f

0x1622 (0x7242): (0x00) Goto 0x1579

**************************************************************************
* Hide Item and Remove From Inventory (if there) or NPC from game
**************************************************************************
* Check to see if the item or NPC is in the user's inventory and if so,
* set it's location to 0xff. Reduce inventory count by 1.  If the 
* item being dropped is the rucksack, reduce inventory capacity to 4.
* Setting the location to 0xff effectively destroys it unless the calling
* code changes the location to somewhere else. 
**************************************************************************
/ Get the current location of the object held in the second word
/ list#2 contains current working location of the objects
0x1625 (0x7245): (0xa2) Set var[0x18] = list#2[var[0x25]] (list address 0x0500)

/ NOTE the next check is wrong... it should be if the player is wearing the rucksack
/ i.e. If var[0x18] != var[0x0a] then Goto 0x1636
/ var[0x0a] is constant and set to 0xe2, the location for wearing an item

/ Branch ahead if the object is NOT in the player's inventory
/ var[0x09] is constant and set to 0xE1 - the location id for inventory
0x1628 (0x7248): (0x11) If var[0x18] != var[0x09] then Goto 0x1636

/ Object is in player's inventory

/ Reduce the number of carried items by 1
/ var[0x05] is constant and set to 0x01
0x162c (0x724c): (0x0b) Set var[0x3a] -= var[0x05]

/ If the second input word isn't the rucksack (0x98) skip ahead
0x162f (0x724f): (0x19) If var[0x25] != (constant) 0x98 then Goto 0x1636

/ Object is the rucksack

/ NOTE This is never called

/ Player gave away the rucksack, reset the maximum inventory items 
/ (amount the player can carry) to 4 (default is stored in 0x08)
0x1633 (0x7253): (0x09) Set var[0x3d] = var[0x08]

/ Set the object's location to 0xff - actual location optionally set later
/ by the calling code otherwise the object "disappears"
/ var[0x0c] is constant and set to 0xff - the hidden location id
0x1636 (0x7256): (0xe2) Set list#2[var[0x25]] = var[0x0c] (list address 0x0500)

/ Finished removing item or NPC from the game!
0x1639 (0x7259): (0x02) Return

**************************************************************************
* Check if the second word is the tooth and the tiger is in the current location
**************************************************************************

/ Objects have ids from 0x50 to 0xeb (actually only up to 0xe8)

/ Check to see if the second word has an is an object -
/ verbs are all less than < 0x50
/ objects have ids > 0x4f - if not, skip ahead
0x163a (0x725a): (0x1a) If var[0x25] < (constant) 0x50 then Goto 0x169e

/ It is NOT a verb

/ Check to see if the second word has an id greater than the last object's id
/ if so, skip ahead
0x163f (0x725f): (0x1b) If var[0x25] > (constant) 0xeb then Goto 0x169e 

/ It's a valid object

/ Get the current location for the current object in input word 2 
0x1644 (0x7264): (0xa2) Set var[0x18] = list#2[var[0x25]] (list address 0x0500)

/ If the location of the object is the same as the current location, skip ahead
/ and return (all good)
0x1647 (0x7267): (0x10) If var[0x18] == var[0x49] then Goto 0x165a

/ If the object is NOT the "tooth"(0x9f), skip ahead
0x164b (0x726b): (0x19) If var[0x25] != (constant) 0x9f then Goto 0x1655

/ Object is the "tooth" (0x9f)

/ Set the working object id to be the "tiger" (0xcb)
0x164f (0x726f): (0x08) Set var[0x17] = (constant) 0xcb

/ Get the current location of the "tiger"
0x1652 (0x7272): (0xa2) Set var[0x18] = list#2[var[0x17]] (list address 0x0500)

/ If the current location of the "tiger" isn't the target location, skip ahead
/ And print that you can't see it
0x1655 (0x7275): (0x11) If var[0x18] != var[0x49] then Goto 0x1693

/ The "tiger" is in the target location

/ Object is the "tooth" and "tiger" is in the current location
/ OR 
/ Object is in the current location (from 0x165a)
0x165a (0x727a): (0x02) Return

**************************************************************************
* Check if player has the object or is wearing it
**************************************************************************

/ 1. Check to see if the object has a valid object id 
/ 2. Check to see if it's either in the inventory (0xE1) or being worn (0xE2)

/ Objects have ids from 0x50 to 0xeb (actually only up to 0xe8)

/ Check to see if the second word has an id less than the first object's id
/ (objects start at 0x50)
/ if so, skip ahead
0x165b (0x727b): (0x1a) If var[0x25] < (constant) 0x50 then Goto 0x169e

/ Check to see if the second word has an id greater than the last object's id
/ if so, skip ahead
0x1660 (0x7280): (0x1b) If var[0x25] > (constant) 0xeb then Goto 0x169e

/ Get the current location for the current object in input word 2 
0x1665 (0x7285): (0xa2) Set var[0x18] = list#2[var[0x25]] (list address 0x0500)

/ Branch if the object is in the inventory
/ var[0x09] is the constant 0xe1 which is the location code for the inventory
0x1668 (0x7288): (0x10) If var[0x18] == var[0x09] then Goto 0x1671

/ Object NOT in the inventory

/ Check if the player is wearing (0xe2) the object, if not skip ahead
/ and print that they don't have the object
/ var[0x0a] is the constant 0xe2 which is the location code for wearing an item
0x166c (0x728c): (0x11) If var[0x18] != var[0x0a] then Goto 0x168b

/ Player has the object in their inventory or is wearing it!
0x1671 (0x7291): (0x02) Return

**************************************************************************
* Print "It's closed"
**************************************************************************

/ Print message "It's closed" (0xf2)
0x1672 (0x7292): (0x05) Print message (constant) 0xf2
0x1674 (0x7294): (0x02) Return

**************************************************************************
* Print "You've already done that"
**************************************************************************

/ Print message "You've already done that!" (0x102)
0x1675 (0x7295): (0x05) Print message (constant) 0x102
0x1678 (0x7298): (0x02) Return

**************************************************************************
* Print "It's empty"
**************************************************************************

/ Print message "It's empty" (0x10c)
0x1679 (0x7299): (0x05) Print message (constant) 0x10c
0x167c (0x729c): (0x02) Return

**************************************************************************
* Print "It burns well"
**************************************************************************

/ Print message "It burns well" (0x10d)
0x167d (0x729d): (0x05) Print message (constant) 0x10d
0x1680 (0x72a0): (0x02) Return

**************************************************************************
* Print that "You can't" do whatever the player just asked e.g. wind <object>
* or extinguish <object>
**************************************************************************

/ Print message "You can't" (0x27)
0x1681 (0x72a1): (0x05) Print message (constant) 0x27

/ Print two newlines and go back to the main loop to reset, assess any NPC 
/ actions, print any time based messages e.g. "the candle flickers" and 
/ say What now?
0x1683 (0x72a3): (0x00) Goto 0x05e2

**************************************************************************
* Print "don't be silly!"
**************************************************************************

/ Print message "Don't be silly!"
0x1686 (0x72a6): (0x05) Print message (constant) 0x28

/ Print two newlines and go back to the main loop to reset, assess any NPC 
/ actions, print any time based messages e.g. "the candle flickers" and 
/ say What now?
0x1688 (0x72a8): (0x00) Goto 0x05e2

**************************************************************************
* Print that the player doesn't have the object
**************************************************************************

/ Print message "You don't have"
0x168b (0x72ab): (0x05) Print message (constant) 0x2a

/ Print the name of the object in the second matched input word
0x168d (0x72ad): (0x01) Gosub 0x16d3

/ Print two newlines and go back to the main loop to reset, assess any NPC 
/ actions, print any time based messages e.g. "the candle flickers" and 
/ say What now?
0x1690 (0x72b0): (0x00) Goto 0x05e2

**************************************************************************
* Print "You can't see" <object>
**************************************************************************

/ Print message "You can't see"
0x1693 (0x72b3): (0x05) Print message (constant) 0x29

/ Print the name of the object in the second matched input word
0x1695 (0x72b5): (0x01) Gosub 0x16d3

/ Print two newlines and go back to the main loop to reset, assess any NPC 
/ actions, print any time based messages e.g. "the candle flickers" and 
/ say What now?
0x1698 (0x72b8): (0x00) Goto 0x05e2

**************************************************************************
* Print "It's already open"
**************************************************************************

/ Print message "It's already open"
0x169b (0x72bb): (0x05) Print message (constant) 0x40
0x169d (0x72bd): (0x02) Return

**************************************************************************
* Print the "I don't understand" cyclic message
**************************************************************************

/ Set the base message to be "I don't understand" (0x1d)
0x169e (0x72be): (0x08) Set var[0x35] = (constant) 0x1d

/ Call the routine that cycles the messages between so that 
/ any message between 0x1d - 0x1f is shown. Options are:
/ 1. I don't understand                (0x1d)
/ 2. Eh?                               (0x1e)
/ 3. Afrle barfle gloop?               (0x1f)
/ Message is chosen based on the value of var[0x36] that cycles through
/ 0-2 everytime the routine is called (not just here)
0x16a1 (0x72c1): (0x01) Gosub 0x16c3

/ Print two newlines and go back to the main loop to reset, assess any NPC 
/ actions, print any time based messages e.g. "the candle flickers" and 
/ say What now?
0x16a3 (0x72c3): (0x00) Goto 0x05e2

**************************************************************************
* Print the "You'll need to say more than that" cyclic message
**************************************************************************

/ Set the base message to be "You'll need to say more than that" (0x20)
0x16a6 (0x72c6): (0x08) Set var[0x35] = (constant) 0x20

/ Call the routine that cycles the messages between so that 
/ any message between 0x20 - 0x22 is shown. Options are:
/ 1. You'll need to say more than that (0x20)
/ 2. Could you elaborate?              (0x21)
/ 3. Sorry I can't guess what you mean (0x22)
/ Message is chosen based on the value of var[0x36] that cycles through
/ 0-2 everytime the routine is called (not just here)
0x16a9 (0x72c9): (0x01) Gosub 0x16c3

/ Print two newlines and go back to the main loop to reset, assess any NPC 
/ actions, print any time based messages e.g. "the candle flickers" and 
/ say What now?
0x16ab (0x72cb): (0x00) Goto 0x05e2

**************************************************************************
* Print the "Could you rephrase that?" cyclic message
**************************************************************************

/ Set the base message to be "Could you rephrase that?" (0x23)
0x16ae (0x72ce): (0x08) Set var[0x35] = (constant) 0x23

/ Call the routine that cycles the messages between so that 
/ any message between 0x23 - 0x25 is shown. Options are:
/ 1. Could you rephrase that? (0x23)
/ 2. Please be more specific  (0x24)
/ 3. I don't quite understand (0x25)
/ Message is chosen based on the value of var[0x36] that cycles through
/ 0-2 everytime the routine is called (not just here)
0x16b1 (0x72d1): (0x01) Gosub 0x16c3

/ Print two newlines and go back to the main loop to reset, assess any NPC 
/ actions, print any time based messages e.g. "the candle flickers" and 
/ say What now?
0x16b3 (0x72d3): (0x00) Goto 0x05e2

**************************************************************************
* Print the "keep it simple, please" message 
**************************************************************************

/ Print message "Keep it simple, please"
0x16b6 (0x72d6): (0x05) Print message (constant) 0x26

/ Clear the gosub stack and get user input / parse
0x16b8 (0x72d8): (0x00) Goto 0x044d

**************************************************************************
* Print the "Nothing happens" cyclic message
**************************************************************************

/ Set the base message to be "Nothing happens" (0x32)
0x16bb (0x72db): (0x08) Set var[0x35] = (constant) 0x32

/ Call the routine that cycles the messages below so that 
/ any message between 0x23 - 0x25 is shown. 
/ Options are:
/ 1. Nothing happens      (0x32)
/ 2. Doesn't seem to work (0x33)
/ 3. There's no effect    (0x34)
0x16be (0x72de): (0x01) Gosub 0x16c3

/ Print two newlines and go back to the main loop to reset, assess any NPC 
/ actions, print any time based messages e.g. "the candle flickers" and 
/ say What now?
0x16c0 (0x72e0): (0x00) Goto 0x05e2

**************************************************************************
* Print a cyclical message - var[0x35] contains the start message id
* but any message up to var[0x35] + 2 can be printed
**************************************************************************

/ Add 0x01 the message offset 
/ var[0x05] is the constant 0x01
0x16c3 (0x72e3): (0x0a) Set var[0x36] += var[0x05]

/ If the offset is less than 3, skip ahead
0x16c6 (0x72e6): (0x1a) If var[0x36] < (constant) 0x03 then Goto 0x16cd

/ Reset the cyclical message offset to zero (0x00)
/ var[0x0d] is the constant 0x00
0x16ca (0x72ea): (0x09) Set var[0x36] = var[0x0d]

/ Add the message offset to the message base message id
0x16cd (0x72ed): (0x0a) Set var[0x35] += var[0x36]

/ Print the cyclical message
0x16d0 (0x72f0): (0x04) Print message var[0x35]

/ Message printed
0x16d2 (0x72f2): (0x02) Return

**************************************************************************
* Print the description of the current object in var[0x25]
**************************************************************************

/ Print message "\n"
0x16d3 (0x72f3): (0x05) Print message (constant) 0x01

/ Print description of the current object
0x16d5 (0x72f5): (0x04) Print message var[0x25]

/ Print message ".\n"
0x16d7 (0x72f7): (0x05) Print message (constant) 0x07

/ Object description printed
0x16d9 (0x72f9): (0x02) Return

**************************************************************************
* This prints the NPCs name in var[0x26] after the player tries to give the NPC a 
* peculiar object e.g. a wall or the mound etc
**************************************************************************

/ Print message "\n"
0x16da (0x72fa): (0x05) Print message (constant) 0x01

/ Print the name of the NPC held in var[0x26]
0x16dc (0x72fc): (0x04) Print message var[0x26]

/ Print message ".\n"
0x16de (0x72fe): (0x05) Print message (constant) 0x07

/ Message printing complete
0x16e0 (0x7300): (0x02) Return

**************************************************************************
* Level 9 A-Code game dissassembly complete
**************************************************************************
