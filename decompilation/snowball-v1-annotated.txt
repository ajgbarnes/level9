**************************************************************************
* Level 9 A-Code game dissassembly for Snowball (v1)
**************************************************************************
/ Created by Andy Barnes @ajgbarnes on X/Twitter

/ Code format
/ -----------
/ <a-code offset> (<ignore>): (<command id>) <command text>
/ e.g. 0x0020 (0x16be): (0x08) Set var[0x09] = (constant) 0x00
/ 
/ Location descriptions
/ ---------------------
/ Location text can be found by looking in the snowball-v1-descs.txt file 
/ The code to use is 0x190 + location id
/ 
/ Dictionary codes
/ ----------------
/ Dictionary  text can be found by looking in the lords-of-time-v1-dict.txt file 
/ 0x01 to 0x40 - verbs e.g. say or north or pull or blink
/ 0x41 to 0x4f - unused
/ 0x50 to 0x8b - game objects e.g. lamp, toolbox, spade etc (can be put in inventory)
/ 0x8c to 0xb0 - static objects that cannot be put in inventory and NPCs
/ 0xb1 to 0xc7 - unused 
/ 0xc8 to 0xd1 - Colours and their number synonyms
/ 0xd2 to 0xdd - prepositions including at, in, on, it
/ 0xde to 0xde - unused
/ 0xdf to 0xdf - the word "everything"
/
/ Exit flags
/ ==========
/
/ When the "exits" command is called, exit flags are returned in var[0x4e]
/ 
/ In this game they have the following definition:
/
/ Bit 0 - If set, the direction can be used inversely i.e. if this is 
/         an East entry between locations A and B then the player can go 
/         West from B to A (same for all v1 games)
/ Bit 1 - If set, the direction should be hidden when the location description is printed along with exits
/ Bit 2 - If set, there is a door in this direction between the two locations
/
/ Only Snowball and Lords of Time share this common bit definition for v1
/ 
/ Lists
/ -----
/ list#1 - default location of objects (read only)
/          First object is at index 0x50 as the dictionary id is used to 
/          reference objects (there is not separate object id unlike in Colossal)
/ 
/ list#2 - current working location of objects and scored item list (writeable)
/          Each object has three location references:
/          1. At the object id                          = the actual location id 
/          2. At the object id + total game objects     = freezer disk colour or station or nothing
/          3. At the object id + 2 x total game objects = freezer disk second colour x 10 + freezer disk third colour x 1 or nothing
/ 
/          Total game objects are 60 (0x3c)
/
/          Score items are stored after this (they are independent of objects)
/ 
/          List usage:
/
/          0x000 - 0x04f: not used
/          0x050 - 0x08c: current working location of object
/          0x08d - 0x0c8: first colour of lights if in a freezer disk location or station number or nothing (0x00) 
/          0x0c9 - 0x104: second and third colours of lights if in a freezer disk location or nothing (0x00) 
/          0x105 - 0x118: Scored item list
/
/          First object is at index 0x50 as the dictionary id is used to 
/          reference objects (there is not separate object id unlike in Colossal)
/
/ list#3 - 0x00 - 0x26 - scruffy droid's movement cycle made up of 13 x 3 bytes
/                        Byte 1 - location id for this movement cycle
/                        Byte 2 - message code for the droid arriving in a player's location
/                        Byte 3 - message code for the droid leaving a player's location
/ 
/                        Message codes are mapped to description ids by adding 0x64 (100)
/                        unless the message code is less than 0x64 / 100
/        - 0x27 - 0x27 - just a null byte
/        - 0x28 - 0x48 - screen options in the freezer control room
/                        when navigating the menu
/        - 0x49 - 0x4f - junk bytes (unused)
/
/ There are 80 (0x50) entires in list#3: 
/ 
/     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
/     -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
/ 00: 53 A8 A9 4F AA 08 50 0B 11 51 AB 0A 52 0E 0E 51 
/ 10: 0A AC 50 AE 0E 4E 0A 11 64 AB AC 4E AE 0B 4D 08 
/ 20: 0E 4F 0A AD 00 00 00 00 00 06 2F 35 07 3B 28 01 
/ 30: 08 09 0A 0B 28 02 41 46 0C 0D 28 03 0E 0F 10 11 
/ 40: 28 04 12 13 14 28 05 15 28 98 D4 9A 33 66 9A 66
/
/ The first 39 bytes from 0x00 to 0x26 reprsesent the scruffy droids preprogrammed route:
/ 
/     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
/     -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
/ 00: 53 A8 A9 4F AA 08 50 0B 11 51 AB 0A 52 0E 0E 51 
/ 10: 0A AC 50 AE 0E 4E 0A 11 64 AB AC 4E AE 0B 4D 08 
/ 20: 0E 4F 0A AD 00 00 00 
/ 
/ 
/ Byte   Value  Location Text                       
/ ----   -----  ----------------------------------  
/ 0x00 = 0x53 - large low room                      
/ 0x03 = 0x4f - smooth simrock                      
/ 0x06 = 0x50 - substantial; smooth cylinder        
/ 0x09 = 0x51 - carpetted massage parlour           
/ 0x0c = 0x52 - bare storeroom                      
/ 0x0f = 0x51 - carpetted massage parlour           
/ 0x12 = 0x50 - substantial; smooth cylinder        
/ 0x15 = 0x4e - smooth surfaced cylinder            
/ 0x18 = 0x64 - wide ramp to heavy plasteel door    
/ 0x1b = 0x4e - smooth surfaced cylinder            
/ 0x1e = 0x4d - wide simulated-marble tube          
/ 0x21 = 0x4f - smooth simrock                      
/ (Then cycle back to the start of the list)
/
/ Each set of 3 bytes represents the cyclical movement of the scruffy droid:
/ Byte 1 - location id for this movement cycle
/ Byte 2 - message code for the droid arriving in a player's location
/ Byte 3 - message code for the droid leaving a player's location
/ 
/ If the player is currently in the location id and the droid arrives the following will printed:
/ 
/ "A scruffy robot shuffles from the <Byte 2 text>"
/ e.g. for the first  movement - "A scruffy robot shuffles from the cyladder"
/ e.g. for the second movement - "A scruffy robot shuffles from the top of the cyladder"
/ e.g. for the fifth  movement - "A scruffy robot shuffles from the top of the west"
/
/ If the player is currently in the location id and the droid leaves the following will printed:
/ 
/ "The scruffy robot shuffles <Byte 2 text>"
/ e.g. for the first  movement - "The scruffy robot shuffles onto the cyladder and is carried up"
/ e.g. for the second movement - "The scruffy robot shuffles north"
/ e.g. for the fifth  movement - "The scruffy robot shuffles west"
/ 
/ (First movement) 
/ Byte   Value  Meaning                  Text
/ ----   ----   ----------------------   ------------------------------------------
/ 0x00 - 0x53 - location id            - large, low room
/ 0x01 - 0xa8 - arriving message code  - cyladder
/ 0x02 - 0xa9 - leaving message code   - onto the cyladder and is carried up
/
/ (Second movement) 
/ Byte   Value  Meaning                  Text
/ ----   ----   ----------------------   ------------------------------------------
/ 0x03 - 0x4f - location id            - smooth simrock
/ 0x04 - 0xaa - arriving message code  - top of the cyladder
/ 0x05 - 0x08 - leaving message code   - north
/ 
/ (Third movement) 
/ Byte   Value  Meaning                   Text
/ ----   ----   ----------------------   ------------------------------------------
/ 0x06 - 0x50 - location id            - substantial smooth cylinder 
/ 0x07 - 0x08 - arriving message code  - north
/ 0x08 - 0x11 - leaving message code   - down
/ 
/ (Fourth movement) 
/ Byte   Value  Meaning                   Text
/ ----   ----   ----------------------   ------------------------------------------
/ 0x09 - 0x51 - location id            - carpetted massage parlour
/ 0x0a - 0xab - arriving message code  - ramp above
/ 0x0b - 0x0a - leaving message code   - east
/
/ (Fifth movement) 
/ Byte   Value  Meaning                   Text
/ ----   ----   ----------------------   ------------------------------------------
/ 0x0c - 0x52 - location id            - bare storeroom
/ 0x0d - 0x0e - arriving message code  - west
/ 0x0e - 0x0e - leaving message code   - west
/
/ (Sixth movement) 
/ Byte   Value  Meaning                   Text
/ ----   ----   ----------------------   ------------------------------------------
/ 0x0f - 0x51 - location id            - large, low room
/ 0x10 - 0x0a - arriving message code  - east
/ 0x11 - 0xac - leaving message code   - up the ramp
/
/ (Seventh movement) 
/ Byte   Value  Meaning                   Text
/ ----   ----   ----------------------   ------------------------------------------
/ 0x12 - 0x50 - location id            - large, low room
/ 0x13 - 0x0a - arriving message code  - east
/ 0x14 - 0x0e - leaving message code   - west
/
/ (Eigth movement) 
/ Byte   Value  Meaning                   Text
/ ----   ----   ----------------------   ------------------------------------------
/ 0x15 - 0x4e - location id            - smooth surfaced cylinder
/ 0x16 - 0x0a - arriving message code  - east
/ 0x17 - 0x11 - leaving message code   - down
/
/ (Ninth movement) 
/ Byte   Value  Meaning                   Text
/ ----   ----   ----------------------   ------------------------------------------
/ 0x18 - 0x64 - location id            - wide ramp to heavy plasteel door
/ 0x19 - 0xab - arriving message code  - ramp above
/ 0x1a - 0xac - leaving message code   - up the ramp
/ 
/ (tenth movement) 
/ Byte   Value  Meaning                   Text
/ ----   ----   ----------------------   ------------------------------------------
/ 0x1b - 0x4e - location id            - smooth surfaced cylinder
/ 0x1c - 0xae - arriving message code  - ramp below
/ 0x1d - 0x0b - leaving message code   - south
/ 
/ (Eleventh movement) 
/ Byte   Value  Meaning                   Text
/ ----   ----   ----------------------   ------------------------------------------
/ 0x1e - 0x4d - location id            - wide simulated-marble tube
/ 0x1f - 0x08 - arriving message code  - north
/ 0x20 - 0x0e - leaving message code   - west
/ 
/ (Twelfth movement) 
/ Byte   Value  Meaning                   Text
/ ----   ----   ----------------------   ------------------------------------------
/ 0x21 - 0x4f - location id            - smooth simrock
/ 0x22 - 0x0a - arriving message code  - top of the cyladder
/ 0x23 - 0xad - leaving message code   - north
/
/ (Thirteenth movement) 
/ Byte   Value  Meaning                   Text
/ ----   ----   ----------------------   ------------------------------------------
/ 0x24 - 0x00 - reset to first movement- n/a 
/ 0x25 - 0x00 - reset to first movement- n/a 
/ 0x26 - 0x00 - reset to first movement- n/a 
/ 
/ Byte 40 is a just a null separator between contents:
/ 
/     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
/     -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
/ 00: 
/ 10: 
/ 20:                      00  
/ 30: 
/ 40: 
/
/ Bytes 0x28 to 0x48 are freezer control room screen optoins - either indirections 
/ to another part of the same table or a message code.  The message code translates 
/ to a message id by adding 0x15e to it.  Indirections go to that entry in the
/ table.
/ 1. Indirections are values 0x28 or greater
/ 2. Messge codes are values 0x00 to 0x27
/ 
/     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
/     -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
/ 00: 
/ 10: 
/ 20:                         00 06 2F 35 07 3B 28 01 
/ 30: 08 09 0A 0B 28 02 41 46 0C 0D 28 03 0E 0F 10 11 
/ 40: 28 04 12 13 14 28 05 15 28
/
/ If the value is < 0x28 then it's an index back into this same table to get the message code
/
/ 0x28 - 0x00 - 0x15e - Message     - Initial root menu -> "1 Instructions 2 Info 3 Desk 4 Library 5 Maps 6 Redisplay"
/ 0x29 - 0x06 - 0x164 - Message     - Player selected "Instructions" from root menu -> "instructions: "wear visor, look and blink". (Interface design copyright (c) Level 9 Computing 1983)"
/ 0x2a - 0x2f -       - Indirection - Player selected "Info" from root menu
/ 0x2b - 0x35 - 0x18d - Indirection - Player selected "Desk" from root menu
/ 0x2c - 0x07 -       - Indirection - Player selected "Library" from root menu
/ 0x2d - 0x3b -       - Indireciton - Player selected "Maps" from root menu
/ 0x2e - 0x28 -       - Indirection - Player selected "Redisplay" from root menu
/ 0x2f - 0x01 - 0x15f - Message     - "INFO 1 Damage 2 Flight Log 3 Droids 4 Passengers 5 Exit"
/ 0x30 - 0x08 - 0x166 - Message     - Player selected "1 Damage" from the INFO screen -> "the ship to be undamaged"
/ 0x31 - 0x09 - 0x167 - Message     - Player selected "2 Flight Log" from the INFO screen -> "that the Snowball has veered off course. It's heading for the sun"
/ 0x32 - 0x0a - 0x168 - Messsge     - Player selected "3 Droids" from the INFO screen -> "all droid positions"
/ 0x33 - 0x0b - 0x169 - Message     - Player selected "4 Passengers" from the INFO screen"that all 1,800,000 passengers are well"
/ 0x34 - 0x28 -       - Indirection - Player selected "5 Exit" from the INFO screen
/ 0x35 - 0x02 - 0x160 - Message     - "DESK 1 In-tray 2 Out-tray 3 Files 4 Diary 5 Exit"
/ 0x36 - 0x41 -       - Indirection - Player selected "1 In-tray" from DESK screen
/ 0x37 - 0x46 -       - Indirection - Player selected "2 Out-tray" from DESK screen
/ 0x38 - 0x0c - 0x16a - Message     - Player selected "3 Files" from DESK screen -> "an impenetrable filing system"
/ 0x39 - 0x0d - 0x16b - Message     - Player selected "4 Diary" from DESK screen -> "a page-a-day diary. The author was worried about "Alpha""
/ 0x3a - 0x28 -       - Indirection - Player selected "5 Exit" from the DESK screen
/ 0x3b - 0x03 - 0x161 - Message     - "MAPS 1 Overview 2 Freezers 3 Accommodation 4 Engine Unit 5 Exit"
/ 0x3c - 0x0e - 0x16c - Message     - Player selected "1 Overview" from MAPS screen -> "a map of the Snowball: engine unit at the front, towing a great hollow ice-asteroid"
/ 0x3d - 0x0f - 0x16d - Message     - Player selected "2 Freeers" from MAPS screen -> "maps of the 10 great freezer disks"
/ 0x3e - 0x10 - 0x16e - Message     - Player selected "3 Accommodation" from MAPS screen -> "the accommodation dome embedded in the south of asteroid wall"
/ 0x3f - 0x11 - 0x16f - Message     - Player selected "4 Engine Unit" from MAPS screen -> "the engine unit: four motors round a vast bay below the control room"
/ 0x40 - 0x28 -       - Indirection - Player selected "5 Exit" from MAPS screen
/ 0x41 - 0x04 - 0x162 - Message     - "IN-TRAY 1 Flight 2 Beta Missing 3 Help! 4 Exit"
/ 0x42 - 0x12 - 0x170 - Messsage    - Player selected "1 Flight" on the IN-TRAY screen -> "a lengthy message querying the Snowball's flight plan"
/ 0x43 - 0x13 - 0x171 - Message     - Player selected "2 Beta Missing" on the IN-TRAY screen -> "a worried message about two crew-members who seem to be missing"
/ 0x44 - 0x14 - 0x171 - Message     - Player selected "3 Help!" on the IN-TRAY screen -> "Help! Alpha is battering down the door"..
/ 0x45 - 0x28 -       - Indirection - Player selected "4 Exit" on the IN-TRAY screen
/ 0x46 - 0x05 - 0x163 - Message     - "OUT-TRAY 1 Send 2 Exit"
/ 0x47 - 0x15 - 0x172 - Message     - Player selected "1 Send" on the OUT-TRAY screen -> "Transmission u/s"
/ 0x48 - 0x28 -       - Indirection - Player selected "2 Exit" on the OUT-TRAY screen -> "Transmission u/s"
/ 
/ Below is the layout of the menu system on the screen. Where a number is surround by parentheses
/ it's a look up in list#3 to get a value.  The value could a message id (if the value is < 0x28)
/ otherwise it's another look up in list#3 until a message id is found. That message is then 
/ displayed.
/ 
/ Root menu                    - (0x28) ->  0x00
/     1. Instructions          - (0x29) ->  0x06
/     2. Info                  - (0x2a) -> (0x2f) -> 0x11
/         1. Damage            - (0x30) ->  0x08
/         2. Flight logs       - (0x31) ->  0x09
/         3. Droids            - (0x32) ->  0x0a
/         4. Passengers        - (0x33) ->  0x0b
/         5. Exit              - (0x34) -> (0x28) -> 0x00
/     3. Desk                  - (0x2b) -> (0x35) -> 0x02
/         1. In-tray           - (0x36) -> (0x41) -> 0x04
/             1. Flight        - (0x42) ->  0x12
/             2. Beta Missing  - (0x43) ->  0x13
/             3. Help!         - (0x44) ->  0x14
/             4. Exit          - (0x45) -> (0x28) -> 0x00
/         2. Out-tray          - (0x37) ->  0x46
/             1. Send          - (0x47) ->  0x15
/             2. Exit          - (0x48) -> (0x28) -> 0x00
/         3. Files             - (0x38) -> (0x28) -> 0x00
/         4. Diary             - (0x39) ->  0x0d
/         5. Exit              - (0x3a) -> (0x28) -> 0x00
/     4. Library               - (0x2c) ->  0x07
/     5. Maps                  - (0x2d) -> (0x3b) -> 0x03
/         1. Overview          - (0x3c) ->  0x0e
/         2. Freezers          - (0x3d) ->  0x0f
/         3. Accommodation     - (0x3e) ->  0x10
/         4. Engine Unit       - (0x3f) ->  0x11
/         5. Exit              - (0x40) -> (0x28) -> 0x00
/     6. Redisplay             - (0x2e) -> (0x28) -> 0x00
/
/ Unused bytes at the end of list#3
/
/     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
/     -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
/ 00: 
/ 10: 
/ 20:                         
/ 30: 
/ 40:                            98 D4 9A 33 66 9A 66 
/ 
/ Known variable use:
/ -------------------
/ 
/ NOTE - on a BBC Micro v1 game, these are stored at $0400 + (variable number * 2).
/ 
/ Multiplied by two as each variable is 16 bits so takes up two bytes in MSB LSB order
/ 
/ 0x01 - Does the location contain air/oxygen (0x01) or a vacuum (0x00)
/ 0x02 - Number of turns that the player has been without air (player
/        will die on the 5th turn/command without air)
/ 0x03 - Counter until the air runs out of the helmet - each command decrements this by 2
/ 0x04 - Can the player breathe (0x01) or not (0x00) - if in a vacuum they need
/        the helmet and the kevlar leotard to breathe
/ 0x05 - Indicates:
/        0x00 - Player is NOT standing on the freezer coffin
/        0x01 - Player is standing on the freezer coffin
/ 0x06 - Unused but initialised to 0x00
/ 0x07 - Unused but initialised to 0x00
/ 0x08 - Unused but initialised to 0x00
/ 0x09 - Unused but initialised to 0x00
/ 0x0a - Indiciates if the "butler robot" has already pushed passed the player in the
/        "superb recreation lounge" (0x91).  Only does this the first time the player 
/        arrives in the room. 
/        0x00 - has not pushed passed the player yet
/        0x01 - has pushed passed the player
/ 0x0b - Scoring index into list#2 to set the flag when certain events happen
/        e.g. welding the snowdozer or to check the scoring flag when working out
/        the player's score 
/ 0x0c - (Constant) 0x01
/ 0x0d - (Constant) 0x02
/ 0x0e - (Constant) 0x03
/ 0x0f - (Constant) 0x04
/ 0x10 - (Constant) 0xe1 location id for the inventory (when the player has picked something up)
/ 0x11 - (Constant) 0xe2 location id for wearing an item 
/ 0x12 - (Constant) 0xfe location id for items that are undiscovered
/ 0x13 - (Constant) 0xff location id for out of game or destroyed objects
/ 0x14 - (Constant) 0x00
/ 0x15 - Indicates if a door is present in the player's current location (used 
/        for open/close door processing)
/ 0x16 - Indicates whether the door in the current location is open (0x01) or closed (0x00)
/ 0x17 - Direction to check for valid exit and if there is a door in that direction
/ 0x18 - Random diagonal direction to try if the player types "forwards", "backwards", "left" or "right"
/ 0x19 - In an airlock location, if the player pressed the yellow (0xcc) or green (0xcd)
/        button to open a door. Used to determine which door is open. In an airlock this is 
/        used instead of var[0x16] as in these locations there are uniquely more than one door
/ 0x1a - Snowdozer status:
/        0x00 - Initial state - broken track
/        0x01 - Snowdozer track welded/mended
/        0x02 - Keys turned and started (player needs to leave)
/        0x03 - Started, lumbered off, pushing iceblocks
/ 0x1b - 1. Used to hold the object id when looping through the objects to initialise their starting location
/        2. Used to hold the object id when looping through to determine which items the playher fnds when searching the body
/        3. Current movement cycle index for the location into list#3 for the scruffy robot
/        4. Current movement cycle index for the leaving message into list#3 for the scruffy robot
/        5. Used as a temporary variable to look up if the necklace is being worn
/        6. Used as a temporary variable to look up if the screwdriver is in the player's inventory
/        7. Used as a temporary variable to look up if the visor is being worn
/        8. Used as a temporary variable to loop through the current screen menu to find the right selected item
/        9. Used as a temporary variable to look up the location of the batpak
/        10. Used as a temporary variable to look up the location of the coffin
/        11. Used as a temporary variable to look up the location of the shovel during a dig
/        12. Used as a temporary variable to look up the location of the mempak
/        13. Used as a temporary variable to look up the location of the helmet
/        14. Used as a temporary variable to look up the location of the leotard
/        15. Used to count and print the number of objects in a location
/        16. Used as a location index when removing an object from the game
/ 0x1c - 1. Holding the result of looking up the current location of an object
/        2. Index into the scoring items in list#2 when calculating the score
/        3. Used as a temporary variable for the location of the necklace
/        4. Used as a temporary variable for the location of the coffin
/ 0x1d - Counter that indicates the nth visible direction is being processed
/ 0x1e - Used to loop through all the objects when a player says e.g. "get everything"
/        or "drop everything"
/ 0x1f - Counter of number of directions to display in a location description
/ 0x20 - Current shown item on the screen when seated at the console in the control chair
/        wearing the translucent visor. It's an index into list#3
/ 0x21 - Currently selected menu item on the screen when seated at the console in the control chair
/        wearing the translucent visor. Player needs to blink to show the selected item. It's an 
/        index into list#3
/ 0x22 - Colour of the next form that the player can pick up (the player can pick up
/        any form with a lower or equal value to this):
/        0x66 - red form
/        0x67 - orange form
/        0x68 - yellow form
/        0x69 - green form 
/        0xff - player is allowed to pick up the lance either they bribed one of the 
/               (bureaucractic) faceless androids with the debt card or they completed
/               the ticket/form exchange bureaucracy
/ 0x23 - Used to control when the location is incremented and "You float down" is displayed
/        (see 0x3ae)
/ 0x24 - Unused but initialised to 0x00
/ 0x25 - Indicates if the player is wearing (0x01) the battered bubble helmet AND the 
/        kevlar leotard or not (0x00)
/ 0x26 - Depth of the player's dug hole - player will die after 4 digs
/        Resets when the player moves location
/ 0x27 - Offset to add to room description when the holo wand is waved in a room that contains holograms
/        0x00 - no offset to add
/        0x40 - offset to get to non-hologram description of the room
/ 0x28 - location of the spidroid hopper
/ 0x29 - matched input word code 1
/ 0x2a - matched input word code 2
/        also used as a temporary variable to hold object ids during processing of the weld/mend command
/ 0x2b - matched input word code 3
/ 0x2c - matched input word count
/ 0x2d - cached last matched input word code 1, used by "again"
/ 0x2e - cached last matched input word code 2, used by "again"
/ 0x2f - cached last matched input word code 3, used by "again"
/ 0x30 - cached last matched input word count,  used by "again"
/ 0x31 - temporary cache of the second word when checking to see if the player 
/        has the object in the third word
/ 0x32 - Unused but initialised to 0x00
/ 0x33 - Temporary cache of the second entered word when checking location of 
/        the container the object is in
/ 0x34 - Temporary cache of the second entered word when checking to see if the 
/        cat is in the location and it sucking up the dropped object
/ 0x35 - Indicates:
/        0x00 - Coffin is still closed
/        0x01 - Lever is pulled and coffin is open OR player has left the coffin
/ 0x36 - Coffin contents indicator used to print the appropriate description message:
/        0x00 - empty
/        0x01 - woman
/        0x02 - crewmember
/ 0x37 - Indicates:
/        0x00 - Revival machine has NOT grabbed the crew member's frozen coffin
/        0x01 - Revival machine HAS grabbed the crew member's frozen coffin and crew member is thirsty
/        0x02 - Crew member  has been give liquid to revive fully
/ 0x38 - Security door code for access to the forest glade and other hologram rooms
/        First colour is first decimal digit / 100
/        Second colour is second decimal digit / 10
/        Third colour is third decimal digit
/        First colour is restricted to Black (0x00), Brown (0x01) or Red(0x02)
/        as the number generated at game start is from 0 to 255
/ 0x39 - Indicates if a location is light or dark (requires a lit lamp)
/        0x00 - dark (requires a lit lamp)
/        0x01 - light 
/ 0x3a - Indicates whether the player HAS the lamp (or it's in the same location)
/        AND it IS switched on. Used to determine if a player can see in a dark location
/        0x00 - either lamp is in a different location or switched off
/        0x01 - Player has the lamp or it's in their currnet location and it's switched on
/ 0x3b - Indicates if it's dark. Dark (0x00) versus light (0x01). Calculated from var[0x39] and var[0x3a]
/ 0x3c - Status of the lamp:
/        0x00 - off
/        0x01 - on
/ 0x3d - Indicates if the laser on the T-junction (0x80) has been destroyed (0x01) or not (0x00)
/ 0x3e - Is used to indicate to a subroutine that a container object is being checked
/        to see if the player has it or is wearing it or it's in their location.  Stops checks
/        for container objects in other container objects and infinite recursion... Reset to 0x00
/        every turn.
/        0x00 - not a cotainer object
/        0x01 - container object 
/ 0x3f - Colour of level that the player is in in the freezer disk. Used to 
/        see if the Nightingale bursts into the blue mortuary or blue mortuary entrance
/        if the player is still on the White (0x09) level.  Also, the elevator will not appear
/        on the White (0x09) level, pressing the button to summon it prints
/        "SORRY! A COLONIST MAY BE LOOSE ON WHITE LEVEL! ELEVATOR SERVICE TO AFFECTED AREAS IS SUSPENDED!"
/        Values are Black (0x00) through to White (0x09)
/ 0x40 - 1. Message id of the question to print when asking a yes/no answer at 0x1737
/        2. Message id to print before the list of objects a player is wearing
/        3. Base message id of a cyclical message to print (see 0x1916)
/        4. Message id of message to print when searching or examining an object
/        5. Message id of message to print when digging 
/        6. Message id for what the damaged droid says
/        7. Message id for what the scruffy droid says
/        8. Message id for the contextual message for why a player cannot move in a certain direction
/        9. Message id to print when the player has dug a hole (see 0x08ae)
/        10.Message id to print when a player examines or searches something
/        11.Message id to print when a player just examines or searches in a location
/ 0x41 - 1. Mostly used as the cyclical offset to add to the base message id (0x00 - 0x02)
/        2. Used to print a second message when a player just examines or searches in a location
/           along with var[0x40]
/ 0x42 - Unused but initialised to 0x00
/ 0x43 - Number of times that the "Nutrimat" machine has been moved in the padded cell
/        0x00  - never been moved
/        0x01  - "It moves a bit"
/        0x02  - "A gap leads west behind the machine"
/        0x03+ - "It moves a bit" (can do this indefinitely)
/ 0x44 - Number of times the massage table has massaged the player (player dies on the 4th massage)
/ 0x45 - Unused but initialised to 0x00
/ 0x46 - Holds the code for the last three coloured lights in the blue or green mortuary
/        When a player presses 3 buttons at the mortuary entrance, this is the 
/        coffin that slides out. This is cached in 0x48
/        Gets reset to Black, Black, Black (0x00) when the player reaches a mortuary entrance
/        Colours are:
/        Left most  - 100 * colour code (0 to 9)
/        Middle     - 10  * colour code (0 to 9)
/        Right      - 1   * colour code (0 to 9)
/ 0x47 - Number of buttons that the player has pressed on the mortuary panel at the entrance
/        to the mortuary.
/        0x00 - no buttons pressed (default and resets to this whenever a player reaches a mortuary entrance)
/        0x01 - one button pressed
/        0x02 - two buttons pressed
/        0x03 - three buttons pressed
/ 0x48 - Holds the cached code for the last three coloured lights in the blue or green mortuary
/        that made the coffin slide out. 0x46 gets reset to Black, Black, Black (0x00)
/        when the player returns to the entrance to a mortuary.  This persists it.
/        Colours are:
/        Left most  - 100 * colour code (0 to 9)
/        Middle     - 10  * colour code (0 to 9)
/        Right      - 1   * colour code (0 to 9)
/ 0x49 - Starting position and location of the player's coffin - player's position (colours) change
/        as they move through the corridors however this remains static throughout the game.
/        It will always be red white black <colour1> <colour2> <colour3> - the last three colours 
/        are set by this value and it is set to a random value (dependent on the seed) at when the game
/        initialises. Used to display the "It's empty" message if the player deploys their own coffin.
/ 0x4a - Whether or not the player is wearing the necklace that indicates if 
/        the player is elite (it's a status symbol).  Player has to be wearing this
/        when moving to "...a wide ramp to heavy plasteel door..." (0x64) for the robot to
/        open the door in this location
/ 0x4b - Crew member's coffin's last three deployment colours (buttons that have to be 
/        pressed in the green mortuary entrance).  These are randomly generated when the 
/        player reaches the "significant cylindrical ledge" (0x33)
/        Colours are:
/        Left most  - 100 * colour code (0 to 9)
/        Middle     - 10  * colour code (0 to 9)
/        Right      - 1   * colour code (0 to 9)
/ 0x4c - Nightingale's mode. Nightingale is not tracked to a location id, 
/        instead this is used to indicate which mode it is in relative to the player
/        and used to determine if it attacks the player.
/        The mode starts at 0x10 and decrements with every command from the player after
/        they leave the coffin (including leaving the coffin).
/        When it reaches 0x05 the player can either see or hear the Ni#ghtingale.
/ 0x4d - Number of carried items (not worn)
/ 0x4e - Multiple uses:
/        1. Indicates if an object is in the same location as the player
/        2. Indicates if an object is being worn or in the player's current inventory
/        3. Indicates if the crew-member has drunk the liquid from the cup
/        4. Reset to 0x01 at the start of each turn
/ 0x4f - Counter of printed objects in specified location or inventory when looking at
/        a location or in the player's inventory
/ 0x50 - Maximum number of items that a player can carry, defaults to 4
/        Increases to 8 when the player has their first massage on the massage table (0x4f) 
/        Any subsequent massage reduces this to 4 again!
/ 0x51 - Total count of objects in the current location (used for printing "," and " and " and ".")
/ 0x52 - Status of the coffin:
/        0x00 - Closed
/        0x01 - Open
/ 0x53 - Status of the toolbox:
/        0x00 - Closed
/        0x01 - Open
/ 0x54 - Status of the unislime on the thick ramp (0x78):
/        0x00 - Still on the ramp
/        0x01 - Cleaned by the cat
/ 0x55 - Player's previous location
/ 0x56 - Number of turns that the petrol bomb fire has been burning at the end game
/        0x00  - player has not yet played the flute to smash the petrol bomb glass
/        0x02  - burning for one turn (it's incremented twice when the player plays the flute)
/        0x03  - burning for two turns
/        0x04  - burning for three turns
/        0x05  - the ship will explode
/        0x06  - player is engulfed in flames (can never get here)
/        0xff+ - fire is extinguished (still increments though)
/ 0x57 - Player's current location
/ 0x58 - 1. Reset to the player's current location at the start of each turn
/        2. Player's target location if moving in a specified direction (where the
/        exit will take them)
/ 0x59 - It has three uses (confusingly):
/        1. Colour of the first light which indicates with freezer disk of passengers the player is in
/           when in the mortuaries and surrounding corridors
/        2. The shuttle station that the player is at - it has values from 0x1a to 0x21. These are actually
/           location ids that increment (and loop) when the player moves from station to 
/           station. It is used to see where the player will go when they go down from 
/           the "on a ladder on the pylon" (0x26) location.  It also gets set to the "from" location
/           when the player moves up to "on a ladder on the pylon" (0x26) location - the "from"
/           location will be one of 0x1a to 0x21
/        3. And it's set to 0x00 when not on the shuttle/station/pylon and NOT
/           in the mortuaries/corridors
/ 0x5a - 1. Used a temporary variable for 0x59
/        2. Used when needed to send a fixed value as the first light to the colour printing 
/ 0x5b - It has two uses:
/        1. Colour of the second and third lights which indicates with freezer disk level the player is in 
/           and which mortuary sector This is calculated as 10 x level colour + 1 x mortuary sector, 
/           so white (9), grey (8) is calculated as:
/           var[0x5b] = 9 x 10 + 1 x 8 = 09 or 0x62
/ 
/           and black (0), grey (8) is caculated as:
/           var[0x5b] = 0 x 10 + 1 x 8 = 8 or 0x8
/        2. And it's set to 0x00 when NOT in the mortuaries/corridors
/ 0x5c - 1. Used a temporary variable for 0x5b
/        2. Used when needed to send a fixed value as the second/third lights or non current player's value
/ 0x5d - Deployment location of the coffin - if it's been deployed it may have been
/        taken by the player and this is used to show which mortuary they need
/        to return it into before deploying another. Player is free to drop it or give
/        it to the revival machine but cannot get another until it is returned to the right place
/        0x00 - not deployed
/        0x49 - deployed in the blue mortuary
/        0x4a - deployed in the green mortuary
/ 0x5e - Working deployment location of the coffin - first light colour 
/        This isn't reset when the coffin slides away but the flag in var[0x5d]
/        is used in most logic to test first if the coffin is deployed
/        Black (0x00) through to White (0x09).  It's also NOT set when the player's 
/        coffin is deployed at the start of the game (it slides away anyway when the 
/        player leaves the coffin)
/ 0x5f - Deployment location of the coffin - second and third light colours 
/        This isn't reset when the coffin slides away but the flag in var[0x5d]
/        is used in most logic to test first if the coffin is deployed. It's also NOT set when the player's 
/        coffin is deployed at the start of the game (it slides away anyway when the 
/        player leaves the coffin)
/ 0x60 - Supplementary message id for a location, defaults to 0x02 (empty string)
/        e.g. 0x148 for "A massive snowdozer stands beside a pile of fuel blocks...."
/        Also used for tests instead of the location id e.g. when welding the snowdozer
/        it checks that message 0x148 is set on this variable
/ 0x61 - Second supplemnentary message id for a location, defaults to 0x02 (empty string)
/        Never changes in the A-code.
/ 0x62 - Unused but initialised to 0x00
/ 0x63 - Exit flags for moving in a given direction at the player's current location
/ 0x64 - Player's total score, calculated when they die or complete the game
/ 0x65 - Unused but initialised to 0x00
/ 0x66 - Indicates:
/        0x00 - Player does NOT have the screwdriver
/        0x01 - Player HAS the screwdriver
/ 0x67 - Indicates:
/        0x00 - Massive waldroid is guarding the ladder
/        0x01 - Massive waldroid has been blinded and staggered away (so the ladder is open)
/ 0x68 - Total number of valid moves and actions. Not used for anything but recorded
/ 0x69 - Number of active red tickets that have been given to the faceless android at the 
/        wide counter. Reflects the number of items the player can take (assuming other rules 
/        also met)
/ 0x6a - Number of active green tickets that have been given to the faceless android at the 
/        small counter. Reflects the number of items the player can take  (assuming other rules 
/        also met)
/ 0x6b - Status of the damaged janitor droid:
/        0x00 - requires the space part in 0x6c
/        0x01 - mended, it was given the right spare part
/        0xff - dead, it was given the wrong spare part
/ 0x6c - Dictionary id of the part that the damaged janitor droid needs. Can be:
/        0x7d - a bumble bearing
/        0x7e - a maxwell sink
/        0x7f - a peg warp
/        0x80 - a 101-way ribbon cable
/ 0x6d - (Constant) number of objects in the game, set to 0x3c (60)
/ 0x6e - Status of the cup:
/        0x00 - empty
/        0x01 - full
/ 0x6f - Where the scruffy robot is in its movement cycle - it's an index into list#3
/        and increments by 3 as list#3 contains 3 bytes per movement cycle
/ 0x70 - Location id of where the scruffy robot is currently located
/ 0x71 - Number of times a player has bumped into a wall in locations 0x24 through to 0xa1
/        when trying to go in a blocked / unavailable direction
/        (it is not incremented in any other location as there are other behaviours, see 0x1894 onwards)
/ 0x72 - 1.  Temporary variable for caching a dicitonary id when sorting entered matched player input
/        2.  Temporary variable for subtracting the ticket colour base id (0x79) see 0x047e
/        3.  Outer wait delay loop counter that prints 6 dots
/        4.  Used to hold the scoring increment when calculating the score
/        5.  Used to calculate the description id for a room from the location id
/        6.  When checking Exits, location that the player would end up in when moving in a given
/            direction from the player's current location
/        7.  Used to hold the exits flags and manipulate them for tests
/        8.  Used to hold the door open / closed message id to print
/        9.  Random number to check if the scruffy droid says anything
/        10. Message offset for the scruffy droid's leaving and arriving messages when not a direction
/        11. Message id for the content to display on the screen at the console 
/        12. Cache of the current diagonal random direction when calculating the next one clockwise (see 0x16be)
/        13. Use in the calculation of the new spidroid location (0x0834)
/        14. Holds the amount to decrement / increment the second colour when moving around the mortuary loop
/        15. Object id used to lookup the three location references when printing objects in a location
/        16. Used to hold the security door code when passed to the printing routine
/ 0x73 - 1. Inner wait delay loop counter (0x919) - loops 1,000 times which will be a different delay on each
/        implementation
/        2. Used as a temporary variable when moving the colours from black to white
/        when looping around the mortuary corridors
/        3. When printing colours, the format of the colours 
/ 0x74 - Which nth colour to print when printing lights
/ 0x75 - Colour description to print when printing lights
/ 0x76 - Unused but initialised to 0x00
/ 0x77 - Unused but initialised to 0x00
/ 0x78 - Used as input into the subroutines that print the lights
/           a. 1st colour of the freezer coffin or morgue's six lights or code
/              which represents which freezer disk the player is in
/           b. Which freezer disk the player is in when walking its corrridors
/           c. First 1 or 2 or 3 lights (depending on the player's location id, see 0x10f0)
/              when wearing the bracelet
/ 0x79 - Used as input into the subroutines that print the lights
/           a. 2nd and 3rd colours of the freezer coffin or morgue's six lights or code
/              which represents which sector and then level of the freezer disk
/           b. Which sector and level in the freezer disk the player is in when 
/              walking its corrridors
/           c. Which freezer disk the player is in (or black) whe wearing the bracelet
/ 0x7a - Used as input into the subroutines that print the lights
/           a. 5rh, 4th and 6th lights of the freezer coffin or morgue's six lights or code
/              of which coffin is deployed
/           b. Not used in the freezer disk corrridors
/           c. Not used by the bracelet
/ 0x7b - Used when a player is asked a yes (0x01) or no (0x00) question
/ 0x7c - Unused but initialised to 0x00
/ 0x7d - Unused but initialised to 0x00
/ 0x7e - Required deployment location of the crewmember's coffin - will default later in the 
/        game to the green mortuary.  Cannot get and revive until the player has visited the "significant
/        cylindrical ledge" (0x33). Used as a flag too to so that the crew member's mortuary location and
/        the security door code are not changed in-game. 
/ 0x7f - Crew member's mortuary location's first colour (freezer disk)
/        From Black (0x00) through to White (0x09)
/ 0x80 - Crew member's mortuary location's second and third colours (sector then level)
/        Calculated as second colour x 10 + first colour x 1 
/ 0x81 - random number generated after every new input command but NEVER used
/
/ Background from box and hint sheet to help understand:
/ ------------------------------------------------------
/ 
/ The map and notes here make more sense when you read:
/
/ I haven't included these in the other decompilations  however these are important 
/ notes to understand the game mechanics and to get a "mental model" of the disks and hence lights
/ 
/ "The massive starship, Snowball 9, is carrying 2 million hibernating colonists to Eden,
/ fertile planet in the Eridani starsystem, in this top selling game with over 7000 locations.
/ The Snowball has been hijacked and is heading into the sun in the first of our "Silicon Dream"
/ trilogy. You´ll meet Waldroids, Nightingales and other strange robots in this massive science
/ fiction adventure. But the most buffing puzzle, according to many players, is how to use the 
/ control room computer."
/ 
/ "Comprises 9 Freezer Disks linked into a chain and surrounded by a hollow Ice-Shell. 
/ This is towed by a fusion-powered "engine unit", connected to it by "Jacob's Ladder" - a hollow 
/ cylinder of immensely tough strands. North is towards the engine unit. The crew Habidome is built
/ into the Ice-shell near the southern end, but the bulk of the humans on board are hibernating.
/ The main control centre is in the engine unit."
/ 
/ "A maze of strong ropes, anchoring the Freezer Disks inside the ice-shell. Provides a way of 
/ reaching the surface from the Docking Bay south of the Wide Tube."
/
/ "The Snowball 9 carries hibernating colonists in Freezer Coffins. These coffins are arranged in
/ "mortuaries", 999 per mortuary. In turn, these mortuaries are contained within Freezer Disks. 
/ Each disk looks like a fat LP, rotating slowly to simulate gravity, and is made up from 9 mortuary 
/ levels: 20 mortuaries along a curving corridor on each level. The disks are linked by a translucent
/ tube through the hubs, and there are 10 of them in all. See for details of the coloured indicator
/ lights that you'll need to find your way about.
/ 
/ "The code for a coffin is 6 colours for: Freezer Disk, location round corridor, level in Freezer Disk, 
/ 3-colour coffin "number". Go north from the Wide Tube until you reach the correct disk (the last colour 
/ shown by the Bracelet is that of the disk, by the way). Then into the elevator, and press the colour 
/ button for the right level. Walk along the corridor, looking at the ceiling lights, until they match the first
/ 3 colours. Then go north if you want a green mortuary, or south for a blue one. Then press the three
/  buttons matching the coffin "number"."
/
/ To make more sense of the comments and notes in this file, it's recommend to 
/ use the map here which also has location ids on each location https://maps.speccy.cz/map.php?id=Snowball
/ (created by Hippy Smith in 2014) - it misses a couple of locations e.g. the padded cell
/
/
/ Notes:
/ -----
/ -   In the blue or green mortuary, there are six lights in the following sequence:
/
/     <colour1> <colour2> <colour3> <colour4> <colour5> <colour6>
/ 
/     The first 3 colours can always be seen in the mortuary corridor loop
/     The last 3 colours can only be seen in the blue or green mortuary entrace or where the slab is
/
/     <colour1> <colour2> <colour3> represent where the player is in the mortuary corridor loop 
/               and defaults to red (2) black (0) white (9) which is red freezer disk, black sector
/               and white (bottom) level
/
/     <colour1> represents which freezer disk the player is in (var[0x59])
/     <colour2> represents which section of the current freezer disk the player is in (horizontal)
/     <colour3> represents which level in a freezer disk (var[0x5a]) (vertical)
/ 
/     Colour 1 will change when walking through the "the disks are linked by a translucent
/     tube through the hubs, and there are 10 of them in all:
/ 
/     <colour1> decrements when moving from location "following a winding transpex tunnel between vast
/                lumpy metallic discs..." (0x35) to "floating in a flexible transpex tube through the central torus 
/                of a major freezer unit" (0x34)
/     <colour1> increments when moving from location "floating in a flexible transpex tube through the central torus 
/                of a major freezer unit" (0x34) to "following a winding transpex tunnel between vast
/                lumpy metallic discs..." (0x35) 
/
/     Colour 2 will chnage when walking thorugh "is made up from 9 mortuary levels: 20 mortuaries along 
/     a curving corridor on each level.":
/
/     <colour2> decrements when moving from "You are in a curving e/w corridor south of a wide entrance" (0x42)
/               to "You are in a curving e/w corridor beside a green door." (0x45)
/     <colour2> increments when moving from "You are in a curving e/w corridor beside a green door." (0x45)
/               to "You are in a curving e/w corridor south of a wide entrance" (0x42)
/
/     <colour3> decrements everytime a player climbs up a coffin e.g white (9) to grey (8) 
/               - cannot go up when set to black (0) (var[0x5a])
/               also set to a lower value when going up in the elevator
/     <colour3> increments everytime a player climbs down in the mortuary e.g. grey (8) to white (9) 
/               - cannot go down when set to white (9) (var[0x5a])
/               also set to a lower value when going down in the elevator
/ 
/     Colours 4, 5, 6 are the "3-colour coffin "number"" and represent the button presses at the entrance
/     to the mortuary to slide out a coffin these get reset to 0 whenever a player moves out of the mortuary
/     or up to another level
/
/     Colours are stored in the following variables:
/
/     var[0x59] =                                        <colour1> 
/     var[0x5b] =                   10 x <colour2> + 1 x <colour3> 
/     var[0x46] = 100 x <colour4> + 10 x <colour5> + 1 x <colour6>
/ 
/ -   When going South from "a significant cylindrical ridge..." (0x33) when the first colour is black (0x00)
/     the player will be out of the loop and at the "featureless cylindrical airlock..." (0x99).  All other times it 
/     will loop to "following a winding transpex tunnel between vast lumpy metallic discs..." (0x35)
/ -   Player starts on the white level in the red freezer disk so they can't go "down" to escape the Nightingale
/     as it's the bottom level
/ -   When going North from "floating in a flexible transpex tube.." (0x35) when the first colour is black (0x00)
/     the player will be bump into a wall even though there's an exit leading North
/ -   In the "...blue glass elevator" (0x3f) pressing the black button takes the player to the torus / toroidal walkway
/     but any other button takes them to the curving east/west corridors where the mortuaries are located   
/ -   If a player types "N" to a question, it matchesNNorth (0x01) in the dictionary and has a 
/     special case to match it in the yes/no processing (0x173d)
/ -   The Colossal Cave A-code has a concept of object ids and dictionary ids.  A dictionary id for the same
/     object is the object id + 0x23.  So for Keys, the object id is 0x01 in all lists however as a word that 
/     matches in the dictionary it's referenced as 0x24.  Lords of Time and Snowball scrapped this and just used
/     the dictionary id everywhere to simplify things. It just means, for any list, the 
/     address of the start of the list has to be <start of list addr> - 0x50 bytes for 8-bit
/     lists and <start of list addr> - (2 * 0x50) for 16-bit lists
/ -   Colossal Cave (etc) used jump tables to route a command to its sub-routine - this changed
/     in Snowball / Lords of Time to use a giant switch table instead. Jump tables are more memory
/     efficient though.
/ -   Whilst a player can leave the coffin using the "pull lever", they can also 
/     type "plugh" or "plover" or "xyzzy" or "sesame" or "agaliarept". If they say any of the latter
/     they will be taken to the "in a padded cell. The walls are lined by Tuffkwilt (TM) padding..."
/     location (0xb2)
/ -   0xc5 is a special location that the player cannot reach - it represents
/     inside the video viewer and it's the initial location for the batpack 
/     and the location where the mempak will go once inserted into the 
/     video viewer
/ -   0xc6 is a special location that the player cannot reach - it represents
/     inside the lamp and it's where the batpack ends up when inserted into the lamp
/ -   0x08eb isn't called by anything - same as 0x08c7 in Lords Of Time
/ -   If the player is "in the diner", they can lose any object by "insert <object>"
/     which will go into the trashbank/garbage
/ -   There used to be a yellow ticket in the game - certainly a space for it in the 
/     dictionary and also the descriptions (0x7b) and it's processed 
/     at 0x047e
/ -   There may have been intent to have a blue ticket too. There is no gap
/     in the dictionary or descriptions but it's processed at 0x047e
/     and would assume a dictionary id of 0x7c
/ -   If the player types "insert blue ticket" or "insert yellow ticket" it will
/     be interpreted as "insert red ticket" (see 0x048e)
/ -   A-code has a check for more than 8 words and will print a message of 
/     "What a mouthful! I'm only an ignorant micro".  Impossible on the BBC Micro
/     as it only allows 3 words to be recognised.
/ -   Ways to die:
/     a. Too many massages on the massage table (die on the 4th massage)
/     b. Being caught in the morgue corridors or alcove by the Nightingale
/     c. Being caught in the initial morgue by the Nightingale
/     d. Running out of oxygen after 4 turns
/     e. Having the Snowball control room on fire for two many turns
/     f. Giving the coffin machine a coffin containing a woman (she screams and 
/     attract a Nightingale)
/     g. floating in space after the third turn if they haven't fired the gun
/     h. Walking up the ramp when it still has unislime upon it
/     i. Moving based the laser in at the "junction in a north-south corridor"
/     j. Moving past the instrument panel when the flames are present in the control room
/     k. Digging a hole too deeply (more than 3 times)
/ -   If the player has exactly one massage their maximum inventory items
/     increases to 8 - any more and it resets down to 4
/ -   The damaged janitor droid will die if it is given the wrong spare part
/ -   At location "at a wide counter staffed by a faceless android" (0x66)
/     the android accepts only red tickets, orange forms and green forms. Always need 
/     to give a red ticket to pick anything up.
/ -   At location "at a small counter staffed by a faceless android" (0x67)
/     the android accepts only green tickets, red forms and yellow forms. Always need 
/     to give a green ticket to pick anything up.
/ -   Forms have to be giving in the following order 
/     1.  Give red ticket at location "wide counter staffed by a faceless android" (0x66)
/     2.  Take the red form at location "wide counter staffed by a faceless android" (0x66)
/     3.  Give red form at location "small counter staffed by a faceless android" (0x67)
/     4.  Give green ticket at location "small counter staffed by a faceless android" (0x67)
/     5.  Take the orange form at location "small counter staffed by a faceless android" (0x67)
/     6.  Give the orange form at location  "wide counter staffed by a faceless android" (0x66)
/     7.  Give red ticket at location "wide counter staffed by a faceless android" (0x66)
/     8.  Take the yellow form at location "wide counter staffed by a faceless android" (0x66)
/     9.  Give yellow form at location "small counter staffed by a faceless android" (0x67)
/     10. Give green ticket at location "small counter staffed by a faceless android" (0x67)
/     11. Take the green form at location "small counter staffed by a faceless android" (0x67)
/     12. Give the green form at location  "wide counter staffed by a faceless android" (0x66)
/     13. Give red ticket at location "wide counter staffed by a faceless android" (0x66)
/     14. Take the lance (finally!) at location "wide counter staffed by a faceless android" (0x66)
/ -   However... if a player wants to skip the bureaucractic rigmorale of tickets and forms,
/     just give the debt card to either of the faceless androids. Money can buy you anything...
/ -   Nice 80s reference / Easter Egg to American Express television adverts when the 
/     debt card is handed to the faceless android "That'll do nicely!!"
/ -   A-code line 0x126d is a duplicate of 0x126a and redundant
/ -   Player can "blink" at the screen and also "close eyes"
/ -   Player can only dig at the following locations:
/     0x1a : on a flat snowfield north of an immense unclimbably smooth cliff...
/     0x1b : on trodden snow between a tall pylon and a hemidome calling itself the "Snowball Hilton"
/     0x1c : on churned and rutted snow below a tall pylon
/     0x1d : beside the northern ice-cliff which has a tiny cave at its base. A pylon stands nearby
/     0x1e : on smooth snow beside a pylon, dwarfed by the north cliff
/     0x1f : on trampled snow outside a major snowdesic dome...
/     0x20 : on smooth snow, beside one of a chain of pylons...
/     0x21 : on soft snow outside a sagging warehouse...
/     0x22 : at the rim of a colossal hole, hundreds of meters in width...
/ -   Waving the holo wand in between locations 0x88 and 0x97 inclusive, makes
/     the holograms disappear
/ -   Waving the wand in "an open-plan control room" (0x97) makes the description 
/     disappear! This is a bug, either there should be an alternate description text
/     at description id 0x266 or A-code line 0x0e0a should check against 0x96 instead of 0x97
/ -   Bug: If the player is in a location where the damaged janitor droid is not, they can still
/     type "attach probe" and get a response "The robot fends you off!" (0x0dbc)
/ -   Player cannot eat any object in this game - everything will be "Yeauch!"
/ -   Cup never contains water, only custard but the player can type "drink water" 
/     or "drink cup" or "drink liquid" but NOT "drink custard"
/ -   In an airlock, pressing the yellow button opens the door in the direction that
/     they player was NOT previously located
/ -   In an airlock, pressing the green button opens the door in the direction that
/     they player WAS previously located
/ -   The dumpy droid will only randomly say one of the three phrases below 39% of the time (101/256)
/ -   "Your air supply is running out" appears when the player has 15 turns left 
/ -   To be protected from space / a vacuum, the player must wear both the battered bubble helmet
/     and the kevlar leotard
/ -   When the scruffy robot is leaving a location it's refered to as "The scruffy robot" 
/     but when arriving it's refered to as "A scruffy robot"
/ -   When the scruffy robot speaks it's refered to as "a dumpy droid"
/ -   Giving the faceless androids anything other than a form or ticket or debt card will 
/     result in them "The android crushes <object> to a pulp" and removing it from the game
/ -   The first time the player arrives in the "superb recreation lounge" (0x91)
/     the "A distraught butler robot pushes past and rushes off" message is printed 
/     (see 0x13fe).  It's the only time in the game the butler robot is mentioned.
/     Adds some atmosphere to the game but there is no other purpose.
/ -   The game generates "random" diagonal directions for "forwards", "backwards",
/     "left" and "right" - no logic to it... see just after 0x0655
/ -   There used to be an "angel" (0x8c) object in the game, it has a dictionary entry
/     but no description and a null (0x00) starting location
/ -   Instead of typing a colour, because of the way the dictionary is structured
/     and the a-code is written, you can use number based synonyms instead of the 
/     colours and vice versa e.g for black "press zero button"
/ -   Total number of objects in the game is 60 (0x3c) and is held as a constant in var[0x6d]
/ -   Player cannot empty or pour any object in the game "You can't empty...."
/ -   Second and third colours of the crew member's coffin starting location are 
/     calculated using:
/ -   BUG - 0x084d checks to see if the snowdozer has moved on or not 
/     by comparing if the supplementary message variable has been set to 0x00
/     but it never is.  If the supplementary messsage is empty it's set to 0x02
/     which is the message id for the empty string. So the player CAN re-enter
/     the snowdozer even though it has left the game.
/
/      Starting position and location of the player's coffin - player's position (colours) change
/ 
/      First colour
/      ------------
/      
/     Always Red (0x02)
/      
/      Second colour
/      -------------
/
/      Always white (0x09)
/
/      Third colour 
/      ------------
/     
/      Always  (0x09)
/      Will always be red white black <colour1> <colour2> <colour3> - the last three colours 
/        are set by this value and it is set to a random value (dependent on the seed) at when the game
/        initialises.
/ 
/ 
/ -   Colour "Synonyms"
/     ------ ---------------------------------------------------
/     Black  Zero, Nought, 0, 0!
/     Brown  One, 1, 1!
/     Red    Two, 2, 2!
/     Orange Three, 3, 3!
/     Yellow Four, 4, 4!
/     Green  Five, 5, 5!
/     Blue   Six, 6, 6!
/     Purple Seven, 7, 7!
/     Grey   Eight, 8, 8!
/     White  Nine, 9, 9!
/ 
/ -   Crew member's coffin code will be:   
/ 
/     First colour (freezer disk):
/     ----------------------------
/     1. Randomly generate a number that's less than 50
/
/     Second colour and third colours: 
/     --------------------------------
/     1. Randomly generate a number that's less than 50
/     2. Double it 
/     3. Add 1
/
/     Which means it can be from black (0x00), brown (0x01) 
/     to white(0x09), white (0x09)
/ 
/     This value is second colour x 10 + third colour x 1
/
/     However this restricts which colours the third colour can be i.e. only
/     colours with an odd number identifier
/     Brown (0x01), Orange (0x03), Green (0x05), Purple (0x07), White (0x09)
/     
/     1 is added at the end to prevent the third colour being black as the 
/     black level has no morgue in any freezer disk
/    
/     Fourth, fifth and sixth colours:
/     --------------------------------
/     1. Randomly generate a number 
/     
/     Value = fourth colour x 100 + fifth colour x 10  sixth colour x 1
/ 
/ -   Crew member's coffin will always be in the green mortuary (0x4a)
/ -   The first colour for the security door code that the crew member gives is
/     restricted to Black (0x00), Brown (0x01) or Red(0x02)
/     as the number generated at game start is from 0 to 255
/ -   When in "...a winding transpex tunnel..." the player can attack the tube 
/     e.g. "attack" or "kick" or "fight" etc and will break the tube and float
/     out in space.  I wonder if anybody ever discovered that back in the day -
/     there is a clue if the player types just "exam" i.e. "The tube walls are very 
/     thin"
/ -   An oddity - code from 0x086a to 0x087a seems to be in the wrong place, 
/     it checks to see if the second word is "look" and if it is it replaces 
/     the first word with it and moves any object in the third word to the second
/     word and the performs an "examine".  Would anyone type "attack look <object>"?
/     Feels like this code is for processing e.g. "look under tray" which would
/     re-order to "under look tray".
/ -   When the player reaches "a significant cylindrical ledge..." (0x33)
/     the crew member's mortuary location is set (always green mortuary) along
/     with the crew member's first, second and third colours.  Also the security door code.
/     Sets the random object that the janitor droid needs.  And adds a score
/     for reaching the ledge.
/- .  Coffins ONLY contain women - even the crewmember is a woman. Kind of implies
/     that Kim is intended to be a woman... otherwise a little bit creepy that Kim is
/     the only man left to procreate... (see 0x0b11)
/ -   If the coffin contents contains a woman rather than a crewmember, 
/     the woman will scream when the machine grabs the coffin, the Nightingales will
/     arrive and kill the player.
/ -   The Nightingale in the mortuary loop (0x44 to 0x4a) doesn't follow a path like the 
/ -   All locations with ids < 0x24 require a light lamp otherwise they are dark, this include_page_images_in_output
/     the web, floating in space and the snowfields
/ -   Whether a player can see in a location is determined by:
/     a. Is the location dark or light? See above for locations. Held in var[0x39]
/     b. Does the player have the lamp or is it in their current location and is it lit.  Held in var[0x3a]
/     c. Can the player see in this location (calculated from a and b) and held in var[3b]
/        and then used by the logic
/ -   BUG - the green button in an airlock opens the door to the location the player
/     just came from.  Why would they have oxygen if they entered from somewhere without
/     oxygen and they pressed the green button? 
/ -   When the cat sucks up an object that the player drops, it ends up 
/     "in an overflowing, broken junk processor" location (0x63) unless
/     it's the unislime 
/ -   The "necklace", "leotard" and "armour" all start off in location id 0xbe, which is 
/     an undefined location (no description) presumably that represents the "body of a 
/     crew-member" as it cannot be navigated to.
/ -   If this is a colonisation mission, why are all the colonists stored in coffins in
/     morgues?
/ -   For some reason "meters" is a synonym for "bracelet"
/ -   Bracelet can be used for mapping the game because the first 1, 2 or 3 
/     colours are derived from the player's current location (see 0x10ec)
/ -   Bracelet's last two colours are always black followed by the freezer disk the
/     player is in (see 0x10ec). The last colour here (player's current freezer disk colour)
/     has to match the frozen crew member's second colour
/ -   The following special locations exist for container objects.  When an object is 
/     placed there, its first location reference is set to this
/     0xc1 - tray
/     0xc3 - floating table
/     0xc4 - toolbox
/     0xc5 - video viewer
/     0xc6 - lamp
/     0xc7 - stacker lift (can't use it any more but can hack it)
/ -   Bug? The player can put things in the toolbox even though it's closed "tight shut"
/ -   The stacker lift has no purpose! Not required to carry a coffin (maybe originally intended 
/     to do this)
/ -   Cannot "insert a coffin into the stacker" or put it in there when the player gets the 
/     coffin. However, there is code (0x114c) to print the contents of the stacker lift.
/ -   EXAM/SEARCH code has logic for location id 0xba to print "The machine is a bit loose" but
/     the location does not exist
/ -   ONLY the following items can be added to the toolbox - these can only be added to the 
/     silver tray or floating table:
/     0x52 - dark spectacles
/     0x53 - hospital gown
/     0x54 - bracelet
/     0x5a - paint can
/     0x5b - batpak
/     0x5d - debt card
/     0x6a - gun
/     0x6b - holo-wand
/     0x6c - bunch of keys
/     0x75 - scalpel / knife
/     0x76 - screwdriver 
/     0x78 - spanner
/     0x79 - ticket
/ -   If not target container is specified when inserting an object, the containers will be evaluated
/     in the following order:
/     1. Lamp
/     2. Video viewer
/     3. Toolbox
/     4. Floating table
/     5. Silver tray
/ 
/ -   Love this! Walking into a wall for the 100th time between locations 0x24 and 0xa1
/     will summon the psychobot who will drug the player and move them to the padded cell
/ -   Each zone has a blue and a green mortuary
/ -   Are these spelling mistakes or did we spell them like this in the 80s?
/     1. accelleration (0x18f)
/     2. negociable (0x191)
/     3. clindrical for location "featureless clindrical airlock" (0x99)
/ -   Spidroid "hopper" (0x9f) is a convenient way of moving between the "bright, tidy
/     docking bay" (0xa1) and the "vast docking bay" (0xa0). It's not used in any of the 
/     official solutions.
/ -   No maps I have found contain "the padded cell" (0xb2) which connects to location 0x5e
/     It can only be accessed by saying e.g. plugh or xyzzy
/     CASA          : https://solutionarchive.com/file/force%2Ctrue/id%2C24267/mode%2Cfile/width%2C2707/
/     Hippy Smith's : https://maps.speccy.cz/map.php?id=Snowball
/ -   Before the snowdozer is fixed it's described as "A massive snowdozer stands beside
/     a pile of fuel blocks, a doorway leads into it. One wide track needs welding" however after
/     mending the track it's described as "A colossal snowdozer towers over you".  Seems to get
/     bigger when you mend the track...
/ -   It's not obvious without reading the hint sheet that the snowdozer refuels Snowball - the
/     only clue is that it "stands beside a pile of fuel blocks" and when the snowdozer 
/     lumbers off "pushing iceblocks into the hole as it goes".  The hint sheet actually says
/     "Mend the Snowdozer and then start it so that it can resume its task of
/     collecting ammonia-ice for use as fuel by the fusion engines of the
/     Snowball 9.".
/ -   If you don't refuel Snowball via the Snowdozer, then, at the endgame,
/     if the player pulls the lever in the control room, they will receive the 
/     "OUT OF FUEL!" message
/ -   The necklace serves two purposes - it allows the player to go down the cyladder
/     (the hint sheet says also up but you can go up without the necklace)
/     and also get past the robot on the wide ramp into the warehouse (status symbol)
/ -   Hint sheet mentions a microscope but there isn't one in the game
/ -   Visiting the padded cell early in the game does NOT confuse the instrumention 
/     as stated in the hint sheet
/ -   You cannot visit the padded cell as per the route described in the hint sheet
/     only after you have been taken there and moved the nurtimat machine


**************************************************************************
* A-code entry point
**************************************************************************

/ Call the initialisation routine
0x0000 (0x169e): (0x00) Goto 0x0006

**************************************************************************
* NEVER USED
**************************************************************************

/ NOTE This is never executed

/ Seems to be an A code entry point to skip initialisation but it's never called
/ Probably some test harness thing back with their original tools that allowed
/ state to be loaded first and jump into the game processing

0x0003 (0x16a1): (0x00) Goto 0x01d4

**************************************************************************

/ Print message  "Welcome to Snowball, an adventure with 7K rooms copyright 
/ (c) Level 9 Computing 1983.\nThe interstar freezer, Snowball 9, has entered
/ its target starsystem. And it will soon enter the star unless you can do 
/ something!\nEnter English phrases (without punctuation) to play, 
/ Save the Snowball to win. "
0x0006 (0x16a4): (0x05) Print message (constant) 0xa0

/ Initialise whether the location has oxygen / air to it's a vacuum (0x00)
0x0008 (0x16a6): (0x08) Set var[0x01] = (constant) 0x00

/ Initialise the number of turns that the player has been without air to 0x00
0x000b (0x16a9): (0x08) Set var[0x02] = (constant) 0x00

/ Initialise the counter for the number of turns until the air runs out
/ in the helmet to 0x00 (gets set later)
0x000e (0x16ac): (0x08) Set var[0x03] = (constant) 0x00

/ Initialise the calculated status on whether the player can breathe
/ to cannot breathe (0x00)
0x0011 (0x16af): (0x08) Set var[0x04] = (constant) 0x00

/ Initialise the status of the player to NOT standing on
/ on the coffin (0x00)
0x0014 (0x16b2): (0x08) Set var[0x05] = (constant) 0x00

/ Unused but initialised to 0x00
0x0017 (0x16b5): (0x08) Set var[0x06] = (constant) 0x00

/ Unused but initialised to 0x00
0x001a (0x16b8): (0x08) Set var[0x07] = (constant) 0x00

/ Unused but initialised to 0x00
0x001d (0x16bb): (0x08) Set var[0x08] = (constant) 0x00

/ Unused but initialised to 0x00
0x0020 (0x16be): (0x08) Set var[0x09] = (constant) 0x00

/ Initialise the status of the butler robot to NOT
/ yet having pushed passed the player (0x00) in the superb 
/ recreation lounge
0x0023 (0x16c1): (0x08) Set var[0x0a] = (constant) 0x00

/ Initialise the scoring index into list#2 to 0x00
0x0026 (0x16c4): (0x08) Set var[0x0b] = (constant) 0x00

/ (Constant) 0x01
0x0029 (0x16c7): (0x08) Set var[0x0c] = (constant) 0x01

/ (Constant) 0x02
0x002c (0x16ca): (0x08) Set var[0x0d] = (constant) 0x02

/ (Constant) 0x03
0x002f (0x16cd): (0x08) Set var[0x0e] = (constant) 0x03

/ (Constant) 0x04
0x0032 (0x16d0): (0x08) Set var[0x0f] = (constant) 0x04

/ (Constant) location id for the inventory
0x0035 (0x16d3): (0x08) Set var[0x10] = (constant) 0xe1

/ (Constant) location id for wearing an item
0x0038 (0x16d6): (0x08) Set var[0x11] = (constant) 0xe2

/ (Constant) Undiscovered items location
0x003b (0x16d9): (0x08) Set var[0x12] = (constant) 0xfe

/ (Constant) Out of game / destroyed location
0x003e (0x16dc): (0x08) Set var[0x13] = (constant) 0xff

/ (Constant) value of 0x00
0x0041 (0x16df): (0x08) Set var[0x14] = (constant) 0x00

/ Initialise whether a door is present to not present (0x00)
0x0044 (0x16e2): (0x08) Set var[0x15] = (constant) 0x00

/ Initialise whether the location door is open to closed (0x00)
/ (not used in an airlock)
0x0047 (0x16e5): (0x08) Set var[0x16] = (constant) 0x00

/ Initialise the direction to check for a valid exit to 0x00
/ (gets set when a player types a direction)
0x004a (0x16e8): (0x08) Set var[0x17] = (constant) 0x00

/ Initialise the random diagonal direction to move to 0x00
0x004d (0x16eb): (0x08) Set var[0x18] = (constant) 0x00

/ Initialise which button the player pressed in an airlock to none (0x00)
0x0050 (0x16ee): (0x08) Set var[0x19] = (constant) 0x00

/ Initialise the snowdozer track status to "broken track" (0x00)
0x0053 (0x16f1): (0x08) Set var[0x1a] = (constant) 0x00

/ Initialise a general temporary variablhe to 0x00
0x0056 (0x16f4): (0x08) Set var[0x1b] = (constant) 0x00

/ Initialise a general temporary variablhe to 0x00
0x0059 (0x16f7): (0x08) Set var[0x1c] = (constant) 0x00

/ Initialise the nth visible direction being processed counter to 0x00
0x005c (0x16fa): (0x08) Set var[0x1d] = (constant) 0x00

/ Initialise the object looping variable to 0x00
0x005f (0x16fd): (0x08) Set var[0x1e] = (constant) 0x00

/ Initialise the number of visible directions in a location to display
/ to 0x00
0x0062 (0x1700): (0x08) Set var[0x1f] = (constant) 0x00

/ Initialise the current shown screen item at the console to nothing
0x0065 (0x1703): (0x08) Set var[0x20] = (constant) 0x00

/ Initiliase the current selected screen item (not shown yet) to nothing 
0x0068 (0x1706): (0x08) Set var[0x21] = (constant) 0x00

/ Initalise the "colour of the form that the player next needs
/ to submit" to the red form (0x66)
0x006b (0x1709): (0x08) Set var[0x22] = (constant) 0x66

/ Initialise the "You float down" flag to 0x00
0x006e (0x170c): (0x08) Set var[0x23] = (constant) 0x00

/ Unused but initialised to 0x00
0x0071 (0x170f): (0x08) Set var[0x24] = (constant) 0x00

/ Initialise the indicator to whether the player is wearing the 
/ battered bubble helmet AND the leotard to NOT wearing both of them (0x00)
0x0074 (0x1712): (0x08) Set var[0x25] = (constant) 0x00

/ Initialise the depth of the player's dug hole to not dug (0x00)
0x0077 (0x1715): (0x08) Set var[0x26] = (constant) 0x00

/ Set the offset to add to reach the non-hologram version of the room to 0x00
/ This is set later to 0x40 if a player is in a hologram room and waves the wand
/ and reset to zero as soon as they move
0x007a (0x1718): (0x08) Set var[0x27] = (constant) 0x00

/ Initialise the location id of the Spidroid "hopper"
0x007d (0x171b): (0x08) Set var[0x28] = (constant) 0xa1

/ Matched input word 1 - nothing entered
0x0080 (0x171e): (0x08) Set var[0x29] = (constant) 0x00

/ Matched input word 2 - nothing entered yet
0x0083 (0x1721): (0x08) Set var[0x2a] = (constant) 0x00

/ Matched input word 3 - nothing entered yet
0x0086 (0x1724): (0x08) Set var[0x2b] = (constant) 0x00

/ Matched input word count - nothing entered yet
0x0089 (0x1727): (0x08) Set var[0x2c] = (constant) 0x00

/ Initialise the first word of the player's previously 
/ cached command to "look" (0x25) so if they type 
/ "again" it has something to do
0x008c (0x172a): (0x08) Set var[0x2d] = (constant) 0x25

/ Initialise the second word of the player's previously 
/ cached command to null (0x00)
0x008f (0x172d): (0x08) Set var[0x2e] = (constant) 0x00

/ Initialise the third word of the player's previously 
/ cached command to null (0x00)
0x0092 (0x1730): (0x08) Set var[0x2f] = (constant) 0x00

/ Initialise the word count the player's previously 
/ cached command to 0x01
0x0095 (0x1733): (0x08) Set var[0x30] = (constant) 0x01

/ Initialise the temporary cache of the second word to nothing 
0x0098 (0x1736): (0x08) Set var[0x31] = (constant) 0x00

/ Unused but initialised to 0x00
0x009b (0x1739): (0x08) Set var[0x32] = (constant) 0x00

/ Initialise the temporary cache of the second word when 
/ checking the location of a container object to 0x00
0x009e (0x173c): (0x08) Set var[0x33] = (constant) 0x00

/ Initialise the temporary cache of the second word when 
/ checking to see if the cat is in the same location as
/ the player's just dropped object to 0x00
0x00a1 (0x173f): (0x08) Set var[0x34] = (constant) 0x00

/ Initialise the status of the starting coffin to closed (0x00)
0x00a4 (0x1742): (0x08) Set var[0x35] = (constant) 0x00

/ Initialise the coffin contents indicator to "empty" 0x00
0x00a7 (0x1745): (0x08) Set var[0x36] = (constant) 0x00

/ Set the status of the coffin / crew member to NOT 
/ yet revived or grabbed by the revival machine
0x00aa (0x1748): (0x08) Set var[0x37] = (constant) 0x00

/ Initialise the security door code to black / black / black 
/ (gets randomly generated a little later)
0x00ad (0x174b): (0x08) Set var[0x38] = (constant) 0x00

/ Initialise the location light indicator to dark (0x00)
0x00b0 (0x174e): (0x08) Set var[0x39] = (constant) 0x00

/ Initialise whether the player has the lamp (or it's in their
/ current location) AND it is lit to untrue (0x00)
0x00b3 (0x1751): (0x08) Set var[0x3a] = (constant) 0x00

/ Initialise if the player can see in the current location to "no" (0x00)
0x00b6 (0x1754): (0x08) Set var[0x3b] = (constant) 0x00

/ Initalise the status of the lamp to off (0x0)
0x00b9 (0x1757): (0x08) Set var[0x3c] = (constant) 0x00

/ Initialise the laser at the t-junction to NOT destroyed (0x00)
0x00bc (0x175a): (0x08) Set var[0x3d] = (constant) 0x00

/ Initialise the recursion depth when checking the location 
/ of an object to see if the player has it - object could be in 
/ a container e.g. the toolbox so the toolbox has to be checked
/ to see if the player has it
0x00bf (0x175d): (0x08) Set var[0x3e] = (constant) 0x00

/ Colour of the level that player is in in the freezer disk
0x00c2 (0x1760): (0x08) Set var[0x3f] = (constant) 0x09

/ Initialise the variable that holds multi purpose message ids to nothing (0x00)
0x00c5 (0x1763): (0x08) Set var[0x40] = (constant) 0x00

/ Initialise the cyclical offset counter to 0x00
0x00c8 (0x1766): (0x08) Set var[0x41] = (constant) 0x00

/ Unused but initialised to 0x00
0x00cb (0x1769): (0x08) Set var[0x42] = (constant) 0x00

/ Initialise the number of times that the Nutrimat machine
/ has been moved to 0x00
0x00ce (0x176c): (0x08) Set var[0x43] = (constant) 0x00

/ Initialise the number of time the player has been massaged to 0x00
0x00d1 (0x176f): (0x08) Set var[0x44] = (constant) 0x00

/ Unused but initialised to 0x00
0x00d4 (0x1772): (0x08) Set var[0x45] = (constant) 0x00

/ Initialise the last three coloured lights pressed to 0x00
0x00d7 (0x1775): (0x08) Set var[0x46] = (constant) 0x00

/ Initialise the number of buttons the player has pressed in the mortuary
/ to none (0x00)
0x00da (0x1778): (0x08) Set var[0x47] = (constant) 0x00

/ Initialise the cached code for the last three coloured lights
/ that made the coffin slide out 
0x00dd (0x177b): (0x08) Set var[0x48] = (constant) 0x00

/ Initialise the starting position of the player's coffin to 0x00
/ (Randomly generated later)
0x00e0 (0x177e): (0x08) Set var[0x49] = (constant) 0x00

/ Initialise that the player is NOT wearing the elite status necklace (0x00)
0x00e3 (0x1781): (0x08) Set var[0x4a] = (constant) 0x00

/ Initialise the starting position of the crew member's coffin to 0x00
/ (Randomly generated later)
0x00e6 (0x1784): (0x08) Set var[0x4b] = (constant) 0x00

/ Initialise the Nightingale's mode to nothing (gets set 
/ properly to 0x10 later)
0x00e9 (0x1787): (0x08) Set var[0x4c] = (constant) 0x00

/ Initialise the number of items that the player is carrying to 0x00
0x00ec (0x178a): (0x08) Set var[0x4d] = (constant) 0x00

/ Initialise the indicator if a player is wearing, holding or 
/ has the object in the same location as them to 0x00 (does not have it)
/ also used to see if it's in their inventory or if they are wearing it
0x00ef (0x178d): (0x08) Set var[0x4e] = (constant) 0x00

/ Initialise the indicator for the counter of printed objects to 0x00
0x00f2 (0x1790): (0x08) Set var[0x4f] = (constant) 0x00

/ Set the maximum number of items a player can carry to 4
/ var[0x0f] is the constant 0x04
0x00f5 (0x1793): (0x09) Set var[0x50] = var[0x0f]

/ Initialise the total count of objects in the current location to 0
0x00f8 (0x1796): (0x08) Set var[0x51] = (constant) 0x00

/ Initialise the status of the coffin to closed (0x00)
0x00fb (0x1799): (0x08) Set var[0x52] = (constant) 0x00

/ Initialise the status of the toolbox to closed (0x00)
0x00fe (0x179c): (0x08) Set var[0x53] = (constant) 0x00

/ Initialise the status of the unislime to still on the ramp (0x00)
0x0101 (0x179f): (0x08) Set var[0x54] = (constant) 0x00

/ Initialise the player's previous location to nowhere 
0x0104 (0x17a2): (0x08) Set var[0x55] = (constant) 0x00

/ Initailise the number of turns the fire has been burning
/ The fire is started when the petrol bomb explodes at the
/ end of the game
/ var[0x14] is the constant 0x00
0x0107 (0x17a5): (0x09) Set var[0x56] = var[0x14]

/ Initialise the player's current location to nowhere (gets set later)
0x010a (0x17a8): (0x08) Set var[0x57] = (constant) 0x00

/ Initialise the player's target location to nowhere (gets set later)
0x010d (0x17ab): (0x08) Set var[0x58] = (constant) 0x00

/ Initialise the which freezer disk the player is in / which 
/ shuttle station / nothing to 0x00
/ var[0x14] is the constant 0x00
0x0110 (0x17ae): (0x08) Set var[0x59] = (constant) 0x00

/ Initialise the working variable for the freezer disk / in which
/ shuttle station / nothing to 0x00
/ var[0x14] is the constant 0x00
0x0113 (0x17b1): (0x08) Set var[0x5a] = (constant) 0x00

/ Initialise the working variable for the freezer disk sector level 
/ nothing to 0x00
/ var[0x14] is the constant 0x00
0x0116 (0x17b4): (0x08) Set var[0x5b] = (constant) 0x00

/ Initialise the working variable for the freezer disk sector level 
/ nothing to 0x00
0x0119 (0x17b7): (0x08) Set var[0x5c] = (constant) 0x00


/ Initialise the deployment location of the coffin's 
/ first light
/ var[0x14] is the constant 0x00
0x011c (0x17ba): (0x08) Set var[0x5d] = (constant) 0x00

/ Initialise the workning deployment location of the last coffin's 
/ second and third lights
0x011f (0x17bd): (0x08) Set var[0x5e] = (constant) 0x00

/ Initialise the deployment location of the coffin's 
/ second and third lights
0x0122 (0x17c0): (0x08) Set var[0x5f] = (constant) 0x00

/ Set the first supplementary message id for a location to 
/ nothing
0x0125 (0x17c3): (0x08) Set var[0x60] = (constant) 0x00

/ Initialise the second supplementary message id for a location
/ to none (never changes in the game)
0x0128 (0x17c6): (0x08) Set var[0x61] = (constant) 0x00

/ Unused but initialised to 0x00
0x012b (0x17c9): (0x08) Set var[0x62] = (constant) 0x00

/ Initialise the exit flags for moving in a certain direction
/ to nothing 
0x012e (0x17cc): (0x08) Set var[0x63] = (constant) 0x00

/ Initialise the player's sore to 0x00
0x0131 (0x17cf): (0x08) Set var[0x64] = (constant) 0x00

/ Unused but initialised to 0x00
0x0134 (0x17d2): (0x08) Set var[0x65] = (constant) 0x00

/ Initalise the player to NOT having the screwdriver (0x00)
0x0137 (0x17d5): (0x08) Set var[0x66] = (constant) 0x00

/ Initialise the massive waldroid to not blinded (0x00)
0x013a (0x17d8): (0x08) Set var[0x67] = (constant) 0x00

/ Default the total number of valid moves and actions to 0x00
/ Not used for anything but recorded
/ NOTE why not set to var[0x14]?
0x013d (0x17db): (0x08) Set var[0x68] = (constant) 0x00

/ Initialise the number of active red tickest to 0x00
0x0140 (0x17de): (0x08) Set var[0x69] = (constant) 0x00

/ Initialise the number of active green tickest to 0x00
0x0143 (0x17e1): (0x08) Set var[0x6a] = (constant) 0x00

/ Initialise the status of the damanged janitor droid
/ to "requires spare part" (0x00)
0x0146 (0x17e4): (0x08) Set var[0x6b] = (constant) 0x00

/ Initialise the spare part that the damaged janitor needs
/ to null (0x00) - this is randomly calculated later
0x0149 (0x17e7): (0x08) Set var[0x6c] = (constant) 0x00

/ Initialise the total number of objects in the game to 60
0x014c (0x17ea): (0x08) Set var[0x6d] = (constant) 0x3c

/ Initialise the status of the cup to empty (0x00)
0x014f (0x17ed): (0x08) Set var[0x6e] = (constant) 0x00

/ Initialise where the scruffy robot is in its location cycle 
/ to the start 
0x0152 (0x17f0): (0x08) Set var[0x6f] = (constant) 0x00

/ Initialise the scruffy robot's location to nowhere
0x0155 (0x17f3): (0x08) Set var[0x70] = (constant) 0x00

/ Initialise the number of times a player has bumped into a wall
/ to 0x00
0x0158 (0x17f6): (0x08) Set var[0x71] = (constant) 0x00

/ Initialise the general purpose temporary variable to 0x00
0x015b (0x17f9): (0x08) Set var[0x72] = (constant) 0x00

/ Initialise the general purpose temporary varaible to 0x00
0x015e (0x17fc): (0x08) Set var[0x73] = (constant) 0x00

/ Initialise the nth colour to print to 0x00
0x0161 (0x17ff): (0x08) Set var[0x74] = (constant) 0x00

/ Initailise the colour description to print to 0x00
0x0164 (0x1802): (0x08) Set var[0x75] = (constant) 0x00

/ Unused but initialised to 0x00
0x0167 (0x1805): (0x08) Set var[0x76] = (constant) 0x00

/ Unused but initialised to 0x00
0x016a (0x1808): (0x08) Set var[0x77] = (constant) 0x00

/ Initailise the first set of lights to print input to 0x00
0x016d (0x180b): (0x08) Set var[0x78] = (constant) 0x00

/ Initailise the second set of lights to print input to 0x00
0x0170 (0x180e): (0x08) Set var[0x79] = (constant) 0x00

/ Initailise the third set of lights to print input to 0x00
0x0173 (0x1811): (0x08) Set var[0x7a] = (constant) 0x00

/ Initialise the player's response to a yes / no question to no (0x00)
0x0176 (0x1814): (0x08) Set var[0x7b] = (constant) 0x00

/ Unused but initialised to 0x00
0x0179 (0x1817): (0x08) Set var[0x7c] = (constant) 0x00

/ Unused but initialised to 0x00
0x017c (0x181a): (0x08) Set var[0x7d] = (constant) 0x00

/ Initialise the colour of the mortuary (blue or green)
/ for the crew member's coffin - set to nothing as initalise a 
/ little later
0x017f (0x181d): (0x08) Set var[0x7e] = (constant) 0x00

/ Initialise the crew member's location's first 
/ mortuary colour (which freezer disk) to nothing (gets set later)
0x0182 (0x1820): (0x08) Set var[0x7f] = (constant) 0x00

/ Initialise the crew member's location's second and third 
/ mortuary colours (sector and level) to nothing (gets set later)
0x0185 (0x1823): (0x08) Set var[0x80] = (constant) 0x00

/ Holds the random number generated after each player's
/ new input command but initialise to 0x00.  This is never used.
0x0188 (0x1826): (0x08) Set var[0x81] = (constant) 0x00

/ Redundant - initialisation of this variable for a second time
0x018b (0x1829): (0x08) Set var[0x75] = (constant) 0x00

/ Set the default freezer disk to red (0x02) - the first lights colour
/ var[0x0d] is the constant 0x02
0x018e (0x182c): (0x09) Set var[0x59] = var[0x0d]

/ Set the cache of the default freezer disk to red (0x02) - the first lights colour
0x0191 (0x182f): (0x09) Set var[0x5a] = var[0x0d]

/ Set the default sector to black (0x00) and level to black (0x00)
/ Which is calculated as sector x 10 + level x 1 
0x0194 (0x1832): (0x09) Set var[0x5b] = var[0x14]

/ Set the cache of the default sector to black (0x00) and level to black (0x00)
/ Which is calculated as sector x 10 + level x 1 
0x0197 (0x1835): (0x09) Set var[0x5c] = var[0x14]

**************************************************************************
* Initalise default working location for each object in the game
**************************************************************************

/ First object has id of 0x50 (armour)
/ Get the object's default location from the immutable list#1 
0x019a (0x1838): (0x08) Set var[0x1b] = (constant) 0x50

/ Loop here for objects

/ Get the object's default location from the list#1
0x019d (0x183b): (0xa1) Set var[0x1c] = list#1[var[0x1b]] (list address 0x15ae)

/ Set the object's working location in list#2 to the default location
0x01a0 (0x183e): (0xe2) Set list#2[var[0x1b]] = var[0x1c] (list address 0x169e)

/ Increment the object id by 0x01 to move to the next object
/ var[0x0c] is the constant 0x01
0x01a3 (0x1841): (0x0a) Set var[0x1b] += var[0x0c]

/ There are 60 objects (0x3c) in the game, loop until they have all been
/ initialised (from the grate to the crown)
0x01a6 (0x1844): (0x1a) If var[0x1b] < (constant) 0x8c then Goto 0x019d

/ All objects processed and initial locations set

/ Loop here for second and third location references (set them all to 0x00)

/ Set the second or third working location in list#2 to the 0x00
/ var[0x14] is the constant 0x00
0x01aa (0x1848): (0xe2) Set list#2[var[0x1b]] = var[0x14] (list address 0x169e)

/ Move to the next non-object
/ var[0x0c] is the constant 0x01
0x01ad (0x184b): (0x0a) Set var[0x1b] += var[0x0c]

/ Loop through so that all the second and third location references are 
/ set to 0x00
0x01b0 (0x184e): (0x1a) If var[0x1b] < (constant) 0x119 then Goto 0x01aa

/ The default location for the toolbox is the "grimy pit" (0x41)
/ however the loop above only sets the first location reference and 
/ right now the second and third location references are 0x00 - give the
/ "grimy pit" is in a particular freezer disk (every passenger freezer disk has an elevator 
/ shaft), performing a "drop" of the toolbox will also correctly set the second 
/ location reference (which freezer disk)

/ Set the second word dictionary id to the "toolbox" (0x8b)
0x01b5 (0x1853): (0x08) Set var[0x2a] = (constant) 0x8b

/ Set the player's current location to " in a grimy pit. A rope hangs 
/ down from above" (0x41)
0x01b8 (0x1856): (0x08) Set var[0x57] = (constant) 0x41

/ Set the player's target location to the same as the current location
0x01bb (0x1859): (0x09) Set var[0x58] = var[0x57]

/ Perform the "drop toolbox" so the second and third location
/ references are set correctly
0x01be (0x185c): (0x01) Gosub 0x143e

/ Set the default sector to black (0x00) and level to white (0x09)
/ Which is calculated as sector x 10 + level x 1 
0x01c1 (0x185f): (0x08) Set var[0x5b] = (constant) 0x09

/ Set the cache of the default sector to black (0x00) and level to white (0x09)
/ Which is calculated as sector x 10 + level x 1 
0x01c4 (0x1862): (0x08) Set var[0x5c] = (constant) 0x09

/ Set the default current location to "in a sponged line coffin" (0xae)
0x01c7 (0x1865): (0x08) Set var[0x57] = (constant) 0xae

/ Set the target location to the current location 
0x01ca (0x1868): (0x09) Set var[0x58] = var[0x57]

/ Set the default number of turns until the player runs out of oxygen 
/ in the helmet to 0x1f4 (500) turns. Can be boosted with the canister
0x01cd (0x186b): (0x08) Set var[0x03] = (constant) 0x1f4

/ This only set at the beginning of a game on load or a new game.
/ Set the location of the player's coffin and the player's starting location
/ colours in the corridor loop to a random number (0x00 to 0xff). Since this 
/ value can only be a single byte, the max value if can be is 0xff (255) and
/ the colours are represented by:
/ 
/    First colour  = number of times 100 can be divided, so either 
/                    0 (Black), 1 (Brown) or 2 (Red)
/    Second colour = number of times 10 can be divided after subtracting
/                    first colour code * 100
/                    Any colour
/                    0 (Black), 1 (Brown) .... 9 (White)
/    Third colour  = number of times 1 can be divided after subtracting
/                    (first colour code * 100 - second colour code * 10)
/                    Any colour
/                    0 (Black), 1 (Brown) .... 9 (White)
/ 
/  Or effectively
/
/    This code = (first colour code * 100) + (second colour code * 10) + (third colour code * 1)
/
/  Note that these colours will also be prefixed by the hard code "red black white"
/  i.e. red black white <first colour> <second colour> <third colour> to give the absolute 
/  location
0x01d1 (0x186f): (0x06) Function - Random - Set var[0x49]=<random number>

**************************************************************************
* Print the location description or say it's dark
**************************************************************************

/ Check to see if it's dark in the location and if they player has 
/ anything to make it light 

/ Check to see if it's dark, if the player can breathe, if there is a door,
/ if they are wearing the elite status necklace, if they have the screwdriver,
/ if the console lights or fades, and if there are any required supplemental 
* messages
0x01d4 (0x1872): (0x01) Gosub 0x1490

/ Print message  "\n "
0x01d7 (0x1875): (0x05) Print message (constant) 0x05

/ If the darkness indicator is set to light (0x01) branch ahead
/ to display the location description and exits
0x01d9 (0x1877): (0x13) If var[0x3b] > var[0x14] then Goto 0x01e2

/ It's set to dark (0x00)   

/ Print message  "It is dark, you cannot see "
0x01dd (0x187b): (0x05) Print message (constant) 0x30

/ Skip printing the exits (it's dark)
/ Perform location checks and print "What now?"
0x01df (0x187d): (0x00) Goto 0x02ed

**************************************************************************
* Print the room descriptions
**************************************************************************

/ Set the offset to add to the location id to get the description id for the 
/ room. So for location 0x0a this would be 0x190 + 0x0a = 0x19a
0x01e2 (0x1880): (0x08) Set var[0x72] = (constant) 0x190

/ Add on the location id to the description id offset
0x01e6 (0x1884): (0x0a) Set var[0x72] += var[0x57]

/ Add on the offset to get from the hologram room descrptions to the 
/ non-hologram room description. Only set in locations 0x88 to 0x97
/ when the player has waved the wand and reset to 0x00 as soon as they move.
/ If set the offset will have the value 0x40
0x01e9 (0x1887): (0x0a) Set var[0x72] += var[0x27]

/ Print message  "\nYou are "
0x01ec (0x188a): (0x05) Print message (constant) 0x18

/ Print the room description
0x01ee (0x188c): (0x04) Print message var[0x72]

/ Branch if the player is NOT standing on the coffin (0x00)
/ var[0x14] is the constant 0x00
0x01f0 (0x188e): (0x10) If var[0x05] == var[0x14] then Goto 0x01f6

/ Player IS standing on the coffin

/ Print message  ". You're standing on a coffin "
0x01f4 (0x1892): (0x05) Print message (constant) 0xa7

**************************************************************************
* Count the number of visible directions
**************************************************************************

/ Set the number of directions to display counter to 0x00
/ var[0x14] is the constant 0x00
0x01f6 (0x1894): (0x09) Set var[0x1f] = var[0x14]

/ Set the initial direction to check to North (0x01)
/ var[0x0c] is the constant 0x01
0x01f9 (0x1897): (0x09) Set var[0x17] = var[0x0c]

/ Get the exit flags and target location for moving in the current direction
0x01fc (0x189a): (0x0f) Exits - check location var[0x57] can move var[0x17] - exit flags in var[0x63] and target location (or 0x00) in var[0x58]

/ Branch if the player cannot move in that direction (target location 
/ will be set to 0x00)
/ var[0x14] is the constant 0x00
0x0201 (0x189f): (0x10) If var[0x58] == var[0x14] then Goto 0x0213

/ Branch if there is NOT a door in this direction from this 
/ If the exit flags are less that 0x04 then there is no door
/ var[0x0f] is the constant 0x04
0x0205 (0x18a3): (0x12) If var[0x63] < var[0x0f] then Goto 0x020c

/ Bit 2 is set 1xx so there is a door in this direction

/ Remove the door flag from the exit flags by subtracting 4 (1xx)
/ var[0x0f] is the constant 0x04
0x0209 (0x18a7): (0x0b) Set var[0x63] -= var[0x0f]

/ Branch if the 1st bit is set (x1x) as that indicates the direction 
/ should be hidden
0x020c (0x18aa): (0x1b) If var[0x63] > (constant) 0x01 then Goto 0x0213

/ Incrememt the counter of number of directions to display
0x0210 (0x18ae): (0x0a) Set var[0x1f] += var[0x0c]

/ Move to the next direction to see if a player can move that way
/ from the current location 
/ var[0x0c] is the constant 0x01
0x0213 (0x18b1): (0x0a) Set var[0x17] += var[0x0c]

/ If we haven't processed all of the directions from North (0x01)
/ to Jump (0x0F) then loop back around and check the next direction
/ from this location
0x0216 (0x18b4): (0x1a) If var[0x17] < (constant) 0x10 then Goto 0x01fc

**************************************************************************
* Actually print the exits for this location 
* At this point:
*    var[0x1f] - number of visible directions
*    var[0x57] - current location of player
**************************************************************************

/ Set the counter that indicates the nth visible direction is being 
/ processed to 0x00
/ var[0x14] is the constant 0x00
0x021a (0x18b8): (0x09) Set var[0x1d] = var[0x14]

/ Reset the initial direction to check to North (0x01)
/ var[0x0c] is the constant 0x01
0x021d (0x18bb): (0x09) Set var[0x17] = var[0x0c]

/ Get the exit flags and target location for moving in the current direction
0x0220 (0x18be): (0x0f) Exits - check location var[0x57] can move var[0x17] - exit flags in var[0x63] and target location (or 0x00) in var[0x58]

/ Branch if the player cannot move in that direction (target location 
/ will be set to 0x00)
/ var[0x14] is the constant 0x00
0x0225 (0x18c3): (0x10) If var[0x58] == var[0x14] then Goto 0x0283

/ Set the temporary variable used to manipulate the exits flags
0x022a (0x18c8): (0x09) Set var[0x72] = var[0x63]

/ Branch if the exit flags are less than 0x04 (there is no door)
/ var[0x0f] is the constant 0x04
0x022d (0x18cb): (0x12) If var[0x72] < var[0x0f] then Goto 0x0234

/ There is a door in this direction

/ Remove the door flag from the exit flags by subtracting 4 (1xx)
/ var[0x0f] is the constant 0x04
0x0231 (0x18cf): (0x0b) Set var[0x72] -= var[0x0f]

/ Branch if the 1st bit is set (x1x) as that indicates the direction 
/ should be hidden
0x0234 (0x18d2): (0x1b) If var[0x72] > (constant) 0x01 then Goto 0x0283

/ Incrememt the nth direction counter
0x0239 (0x18d7): (0x0a) Set var[0x1d] += var[0x0c]

/ Branch if there if the second direction is being printed
/ (No need to add a "." after the location description)
0x023c (0x18da): (0x13) If var[0x1d] > var[0x0c] then Goto 0x024e

/ First direction is being printed so print the description terminator ". "

/ Print message  ". "
0x0240 (0x18de): (0x05) Print message (constant) 0x04

/ Branch if there are more than one exits from this location
0x0242 (0x18e0): (0x13) If var[0x1f] > var[0x0c] then Goto 0x024a

/ Only one exit from this location

/ Print message  "The only visible exit is "
0x0246 (0x18e4): (0x05) Print message (constant) 0x46

/ Print the visible direction
0x0248 (0x18e6): (0x00) Goto 0x0258

**************************************************************************

/ More than one exit at this location and the first exit is being printed

/ Print message  "Exits lead "
0x024a (0x18e8): (0x05) Print message (constant) 0x15

/ Print the nth visible direction
0x024c (0x18ea): (0x00) Goto 0x0258

**************************************************************************

/ Branch if this is the last direction after printing at least one other
/ var[0x1d] contains the count of nth direction and var[0x1f] is the total count
0x024e (0x18ec): (0x10) If var[0x1d] == var[0x1f] then Goto 0x0256

/ Not the last visible direction to print

/ Print message  ", "
0x0252 (0x18f0): (0x05) Print message (constant) 0x03

/ Print the nth visible direction
0x0254 (0x18f2): (0x00) Goto 0x0258

**************************************************************************

/ Print "and" before  the last visible direction 

/ Print message  "and "
0x0256 (0x18f4): (0x05) Print message (constant) 0x06

**************************************************************************

/ Set the base message id for printing the directions 
0x0258 (0x18f6): (0x08) Set var[0x40] = (constant) 0x07

/ Add on the nth direction dictionary id to get to the descrtiption
/ e.g. North (0x01) gets added to 0x07 to give a description id of 0x08
/ which is "north"
0x025b (0x18f9): (0x0a) Set var[0x40] += var[0x17]

/ Print the direction
0x025e (0x18fc): (0x04) Print message var[0x40]

/ Branch if there is no door at this exit (exit flags won't have
/ bit 2 set e.g. 1xx)
0x0260 (0x18fe): (0x1a) If var[0x63] < (constant) 0x04 then Goto 0x0283

/ There is a door at this exit

/ Set the base message id to "(through a door)" (0x16)
0x0264 (0x1902): (0x08) Set var[0x72] = (constant) 0x16

/ Branch if this is not an airlock location with two doors
/ and just print the single door status for the location
/ var[0x14] is the constant 0x00
0x0267 (0x1905): (0x10) If var[0x19] == var[0x14] then Goto 0x027e

/ Player is in an airlock and has previously pressed either the yellow (0xcc) 
/ or green (0xcd) button

/ Note - important
/ Depending on the player's previous location, depends which door
/ opens when pressing a yellow or green button. The green button
/ will always open the door that they just came through.  The
/ yellow button will always open the other door. 

/ Branch if the player pressed the green button (0xcd)
0x026b (0x1909): (0x18) If var[0x19] == (constant) 0xcd then Goto 0x0275

/ Player pressed the yellow button (0xcc)

/ Door will only be open for the yellow button in direction from which
/ there were NOT previously in

/ If the player's previous location is the same as the target location
/ branch and print the "(through a door)" message.  The door will not be 
/ open as the yellow button open the door in the opposite direction 
/ to where the player came from.  The green button opens the door in the
/ direction the player came from.
0x026f (0x190d): (0x10) If var[0x55] == var[0x58] then Goto 0x0281

/ Player's previous location is NOT the same as the target location for
/ this direciton so print the "(through an open door)" message

/ Set the message id to "(through an open door)" and print the message
0x0273 (0x1911): (0x00) Goto 0x0279

**************************************************************************

/ Player previously pressed the green button (0xcd)

/ Door will only be open for the green button in the direction from which
/ there WERE previously in

/ If the player's previous location is NOT the same as the target direction
/ then branch and print the "(through a door)" message.
0x0275 (0x1913): (0x11) If var[0x55] != var[0x58] then Goto 0x0281

/ Set the message id to "(through an open door)"
0x0279 (0x1917): (0x08) Set var[0x72] = (constant) 0x17

/ Print the message for this exit
0x027c (0x191a): (0x00) Goto 0x0281

**************************************************************************

/ Add the door status open (0x01) or closed (0x00) to the door base
/ message id
0x027e (0x191c): (0x0a) Set var[0x72] += var[0x16]

/ Print either of:
/ 0x16 : (through a door)
/ 0x17 : (through an open door)
0x0281 (0x191f): (0x04) Print message var[0x72]

/ Move to the next direction to test if there is an exit from this location
/ var[0x0c] is the constant 0x01
0x0283 (0x1921): (0x0a) Set var[0x17] += var[0x0c]

/ Loop back around and process the direction until all the moveable directions
/ are processsed (others between 0x10 and 0x13 get mapped to these)
0x0286 (0x1924): (0x1a) If var[0x17] < (constant) 0x10 then Goto 0x0220

**************************************************************************
* Process the padded cell and vending machine gap
**************************************************************************

/ Branch if the player's current location is not "in a padded cell. The 
/ walls are lined by Tuffkwilt (TM) padding, and the only door (in the ceiling) 
/ cannot be opened by you: a wide passageway is visible through its bars. 
/ A "Nutrimat" machine is the only furniture" (0xb2) to skip 
/ over the gap in the wall checks
0x028a (0x1928): (0x19) If var[0x57] != (constant) 0xb2 then Goto 0x0294

/ Location IS the "...padded cell..."

/ Branch if the vending machine status is that it hasn't yet been moved (0x01)
/ var[0x0d] is the constant 0x01
0x028e (0x192c): (0x12) If var[0x43] < var[0x0d] then Goto 0x0294

/ Machine has been moved

/ Print message  ". A gap leads west behind the machine "
0x0292 (0x1930): (0x05) Print message (constant) 0xf9

/ Print message  ".\n "
0x0294 (0x1932): (0x05) Print message (constant) 0x07

**************************************************************************
* Print the objects in the player's current location
**************************************************************************

/ Reset the target destination to match the player's current location
0x0296 (0x1934): (0x09) Set var[0x58] = var[0x57]

/ Set the message to print before the objects to "You can see " (0x1b)
0x0299 (0x1937): (0x08) Set var[0x40] = (constant) 0x1b

/ Count and print the objects in the player's current location
0x029c (0x193a): (0x01) Gosub 0x1767

**************************************************************************
* Print info about the damaged droid
**************************************************************************

/ Branch if the player is NOT " on a rubbish tip...." (0x61)
0x029f (0x193d): (0x19) If var[0x57] != (constant) 0x61 then Goto 0x02b7

/ Player IS "on a rubbish tip"

/ Branch if the droid is mended)(0x01) or dead (0xff)
/ var[0x14] is the constant 0x00
0x02a3 (0x1941): (0x11) If var[0x6b] != var[0x14] then Goto 0x02b1

/ Droid still damaged

/ Print message  "A damaged janitor droid is slumped amidst the junk.\n "
0x02a7 (0x1945): (0x05) Print message (constant) 0xea

/ Set the base message id to "Graon!" (0xeb)
0x02a9 (0x1947): (0x08) Set var[0x40] = (constant) 0xeb

/ Print one of the following cyclical messages for the droid to say:
/ 0xeb : "Groan!"
/ 0xec : "Please give me a spare part", it wheezes
/ 0xed : Clank.. Scratch.. "help me"
0x02ac (0x194a): (0x01) Gosub 0x1916

/ Print message  ".\n "
0x02af (0x194d): (0x05) Print message (constant) 0x07

/ Branch if the droid is NOT dead (0xff)
/ var[0x13] is the constant 0xff
0x02b1 (0x194f): (0x11) If var[0x6b] != var[0x13] then Goto 0x02b7

/ Droid is dead

/ Print message  "A dead droid lies nearby "
0x02b5 (0x1953): (0x05) Print message (constant) 0xf1

**************************************************************************
* Print info about the scruffy droid
**************************************************************************

/ Branch if the scruffy droid is NOT in the player's current location
0x02b7 (0x1955): (0x11) If var[0x70] != var[0x58] then Goto 0x02ce

/ Dumpy droid IS in the player's current location

/ Print message  "A dumpy droid scuffles about "
0x02bb (0x1959): (0x05) Print message (constant) 0x113

/ Set the temporary variable to a random number
0x02be (0x195c): (0x06) Function - Random - Set var[0x72]=<random number>

/ Branch if random number is greater than 100 and don't print the 
/ scruffy droid saying something messages. Droid will speak 39% of the time
/ only (101/256)
0x02c1 (0x195f): (0x1b) If var[0x72] > (constant) 0x64 then Goto 0x02cc

/ Droid says something

/ Set the base message id to "Tsk! Tsk! Always dusty"
0x02c5 (0x1963): (0x08) Set var[0x40] = (constant) 0x114

/ Print one of the cyclical messages for the scruffy droid to say:
/ 0x114 : "Tsk! Tsk! Always dusty"
/ 0x115 : "How untidy! Dear, dear"
/ 0x116 : "I'll never get it clean"
0x02c9 (0x1967): (0x01) Gosub 0x1916

/ Print message  ".\n "
0x02cc (0x196a): (0x05) Print message (constant) 0x07

/ Branch if the player's location is NOT "standing on smooth simrock 
/ on the side of a large tube. A cyladder descends through red light" (0x4f)
0x02ce (0x196c): (0x19) If var[0x57] != (constant) 0x4f then Goto 0x02d9

/ Player IS ""standing on smooth simrock on the side of a large tube." 

/ Branch if the scruffy droid's location is NOT "in a large low room, 
/ surrounded by lights and vids" (0x53)
0x02d2 (0x1970): (0x19) If var[0x70] != (constant) 0x53 then Goto 0x02d9

/ Player is one side of the cyladder "standing on smooth simrock" (0x4f)
/ and the scruffy robot is at the other end "in a large, low room" (0x53)
/ which means the droid has just descended 

/ Print message  "The cyladder has descended, leaving a hole! "
0x02d6 (0x1974): (0x05) Print message (constant) 0x117

**************************************************************************
* Print info about the spidroid hopper
**************************************************************************

/ Branch if the spidroid hopper is NOT in the same location as the player
0x02d9 (0x1977): (0x11) If var[0x28] != var[0x57] then Goto 0x02e0

/ Player is in the same location as the spidroid hopper

/ Print message  "You could enter a spidroid "hopper" "
0x02dd (0x197b): (0x05) Print message (constant) 0x145

/ Print message  "\n "
0x02e0 (0x197e): (0x05) Print message (constant) 0x05

**************************************************************************
* Print the location supplementary messages
**************************************************************************

/ Print the supplemnentary message for the location
0x02e2 (0x1980): (0x04) Print message var[0x60]

/ Print message  "\n "
0x02e4 (0x1982): (0x05) Print message (constant) 0x05

/ Print the second supplemnentary message for the location
/ Note - this is never changed from 0x02 (empty string)
0x02e6 (0x1984): (0x04) Print message var[0x61]

/ Print message  "\n "
0x02e8 (0x1986): (0x05) Print message (constant) 0x05

/ Set the target location to the player's current location (again)
0x02ea (0x1988): (0x09) Set var[0x58] = var[0x57]

**************************************************************************
* Entry point for four areas of the code after checks to print the location
/ description and check exits
**************************************************************************

/ Set the target location to the player's current location (again, again)
0x02ed (0x198b): (0x09) Set var[0x58] = var[0x57]

/ Back up either the shuttle's location that the player will go to 
/ when stepping off the pylon below the station OR the colour of the 
/ first light in the mortuary loops (or 0x00 anywhere else)
0x02f0 (0x198e): (0x09) Set var[0x5a] = var[0x59]

/ Back up either the colours of the second/third lights in 
/ the mortuary loops (or 0x00 anywhere else)
0x02f3 (0x1991): (0x09) Set var[0x5c] = var[0x5b]

/ Check to see if it's dark, if the player can breathe, if there is a door,
/ if they are wearing the elite status necklace, if they have the screwdriver,
/ if they are wearing the battered bubble helmet and kevlar leotard, 
/ if the console lights or fades, and if there are any required supplemental 
* messages
0x02f6 (0x1994): (0x01) Gosub 0x1490

/ Branch if the player is NOT wearing (0x00) the battered bubble helmet
/ and kevlar leotard
/ var[0x14] is the constant 0x00
0x02f9 (0x1997): (0x10) If var[0x25] == var[0x14] then Goto 0x0307

**************************************************************************
* Process the oxygen in the helmet and see if the player can breathe
**************************************************************************

/ Player is wearing the helmet and kevlar leotard

/ Branch if the player's helmet air supply is greater than 0x1e (30) - it
/ decrements by 2 each turn/command
0x02fd (0x199b): (0x1b) If var[0x03] > (constant) 0x1e then Goto 0x0307

/ Branch if the helmet air supply has run out (0x00)
/ var[0x14] is the constant 0x00
0x0301 (0x199f): (0x10) If var[0x03] == var[0x14] then Goto 0x0310

/ Print message  "\nYour air supply is running out!\n "
0x0305 (0x19a3): (0x05) Print message (constant) 0xc6

/ Branch if the player is NOT wearing the battered bubble helmet and
/ kevlar leotard (0x00) and print they have no air to breathe
/ var[0x14] is the constant 0x00
0x0307 (0x19a5): (0x10) If var[0x04] == var[0x14] then Goto 0x0310

/ There is oxygen in this location

/ Reset the number of turns without air to zero - this only
/ keeps incrementing when the air runs out
/ var[0x14] is the constant 0x00
0x030b (0x19a9): (0x09) Set var[0x02] = var[0x14]

/ Branch ahead to the next check
0x030e (0x19ac): (0x00) Goto 0x031a

/ Print message  "\nYou've no air to breathe!!\n "
0x0310 (0x19ae): (0x05) Print message (constant) 0xc5

/ Increment the number of turns that the player has been without air
0x0312 (0x19b0): (0x0a) Set var[0x02] += var[0x0c]

/ Kill the player if the number of turns the player has been
/ without air is greater than 4
/ var[0x0f] is the constant 0x04
0x0315 (0x19b3): (0x13) If var[0x02] > var[0x0f] then Goto 0x133c

/ Less than 4 turns/commands without oxygen

**************************************************************************
* Process whether the paint can will explode if in the player's inventory
**************************************************************************

/ Branch if the player's current location has oxygen - the 
/ can will not explode
0x031a (0x19b8): (0x13) If var[0x01] > var[0x14] then Goto 0x033a

/ Current location is a vacuum 

/ Set the second word to the "paint can" (0x5a)
0x031e (0x19bc): (0x08) Set var[0x2a] = (constant) 0x5a

/ Check to see if the player has the "paint can"
0x0321 (0x19bf): (0x01) Gosub 0x15e1

/ Check the returned flag to see if the player has the "paint can"
/ Branch if the player does not have it (0x00)
/ var[0x14] is the constant 0x00
0x0324 (0x19c2): (0x10) If var[0x4e] == var[0x14] then Goto 0x033a

/ Player has the "paint can"

/ Print message  "\nThe paint explodes in the vacuum!\n "
0x0328 (0x19c6): (0x05) Print message (constant) 0xc7

/ Remove the paint can from the gane
0x032a (0x19c8): (0x01) Gosub 0x180e

/ Branch if the supplementary message id is NOT set to "A massive waldroid 
/ guards the ladder" (0x179) i.e. it hasn't been blinded yet
0x032d (0x19cb): (0x19) If var[0x60] != (constant) 0x179 then Goto 0x033a

/ Print message  "\nThe paint blinds the robot which staggers away "
0x0332 (0x19d0): (0x05) Print message (constant) 0x189

/ Set the status of the waldroid to "blinded and staggered away"
/ var[0x0c] is the constant 0x01
0x0335 (0x19d3): (0x09) Set var[0x67] = var[0x0c]

/ Perform location checks and print "What now?"
0x0338 (0x19d6): (0x00) Goto 0x02ed

**************************************************************************
* Process the couch massaging the player
**************************************************************************

/ Branch if the current location is NOT "lying on a comfortable couch" (0xaf)
0x033a (0x19d8): (0x19) If var[0x57] != (constant) 0xaf then Goto 0x0367

/ Branch if the first word the player entered is a direction - any
/ another word lets the table massage the player
0x033e (0x19dc): (0x1a) If var[0x29] < (constant) 0x14 then Goto 0x0367

/ Print message  "The table massages you. It's "
0x0342 (0x19e0): (0x05) Print message (constant) 0x100

/ Set the score index into list#2 for being massaged by the table (0x114)
0x0345 (0x19e3): (0x08) Set var[0x0b] = (constant) 0x114

/ Set the flag to mark this as scored
/ var[0x0c] is the constant 0x01
0x0349 (0x19e7): (0xe2) Set list#2[var[0x0b]] = var[0x0c] (list address 0x169e)

/ Get the base message for the type of massage " most invigorating" (0x101)
0x034c (0x19ea): (0x08) Set var[0x40] = (constant) 0x101

/ Add the number of times the player has been massaged to get a different
/ message i.e. one of the following:
/ 0x101 - most invigorating
/ 0x102 - not too bad
/ 0x103 - becoming very painful
/ 0x104 - fatal!
0x0350 (0x19ee): (0x0a) Set var[0x40] += var[0x44]

/ Print the type of massage 
0x0353 (0x19f1): (0x04) Print message var[0x40]

/ Increment the number of times the player has had a massage
0x0355 (0x19f3): (0x0a) Set var[0x44] += var[0x0c]

/ After one massage the inventory count goes up to 8
0x0358 (0x19f6): (0x08) Set var[0x50] = (constant) 0x08

/ Branch if this is the player's first massage skip the 
/ reset of the maximum number of inventory items
/ var[0x0c] is the constant 0x01
0x035b (0x19f9): (0x10) If var[0x44] == var[0x0c] then Goto 0x0367

/ Reset the maximum number of inventory items to 4
0x035f (0x19fd): (0x08) Set var[0x50] = (constant) 0x04

/ Branch if the player has been massaged more than 0x03 times
/ and kill the player
/ var[0x0e] is the constant 0x03
0x0362 (0x1a00): (0x13) If var[0x44] > var[0x0e] then Goto 0x133c

**************************************************************************
* Check if the scruffy robot is LEAVING the player's location
**************************************************************************

/ Set the temporary variable to message offset (0x64)
/ - If the message code is less than this then it's a direction and 
/   the code == the dictionary id.
/ - If the message code is greater than this then it's a message code
/   that needs to have 0x64/100 added to get to the dictionary id. Presumably
/   these message codes have this number subtracted to make them fit one byte
/   in list#3
0x0367 (0x1a05): (0x08) Set var[0x72] = (constant) 0x64

/ Get the current location for the scruffy robot in its movement cycle from list#3
0x036a (0x1a08): (0xa3) Set var[0x70] = list#3[var[0x6f]] (list address 0x164e)

/ Branch if the current location of the movement cycle is NOT the player's 
/ current location (it isn't leaving this location right now)
0x036d (0x1a0b): (0x11) If var[0x70] != var[0x57] then Goto 0x0386

/ Scruffy robot IS in the player's current location

/ Print message  "The scruffy robot shuffles "
0x0371 (0x1a0f): (0x05) Print message (constant) 0x10b

/ Set the temporary variable to current index into list#3
/ (current location of the scruffy robot)
0x0374 (0x1a12): (0x09) Set var[0x1b] = var[0x6f]

/ Add 0x02 to the index into list#3 to get the leaving the player's 
/ location description code.  Note that because this is a single byte
/ Level 9 subtracted 0x64 from the higher description codes to make it 
/ fit a single byte
0x0377 (0x1a15): (0x0a) Set var[0x1b] += var[0x0d]

/ Get the leaving the player's current location description code
0x037a (0x1a18): (0xa3) Set var[0x1c] = list#3[var[0x1b]] (list address 0x164e)

/ If the code is less than 0x64/100 then it's the actual dictionary id 
/ of a direction.  If it's greater then it needs to have 0x64 added 
/ to get the right dictionary id.

/ Branch if the code is less than 0x64/100 and print the direction
0x037d (0x1a1b): (0x12) If var[0x1c] < var[0x72] then Goto 0x0384

/ Add 0x64/100 to get to the right dictionary id for the description
/ var[0x72] is the message offset 0x64 set above
0x0381 (0x1a1f): (0x0a) Set var[0x1c] += var[0x72]

/ Print the direction or message
0x0384 (0x1a22): (0x04) Print message var[0x1c]

/ Move to the next location in the movement cycle in list#3
/ each entry is 3 bytes (see the start of this document)
/ var[0x0e] is the constant 0x03    
0x0386 (0x1a24): (0x0a) Set var[0x6f] += var[0x0e]

/ Set the current location for the scruffy droid to this next location id
0x0389 (0x1a27): (0xa3) Set var[0x70] = list#3[var[0x6f]] (list address 0x164e)

/ Branch if the next location id is NOT null (0x00) as it
/ is a valid location
0x038c (0x1a2a): (0x11) If var[0x70] != var[0x14] then Goto 0x0395

/ Reset the index into the movement cycle to 0x00 to loop back around
/ var[0x14] is the constant 0x00
0x0390 (0x1a2e): (0x09) Set var[0x6f] = var[0x14]

/ Go back and set the droid's current location to the location at
/ the start of the movement cycle
0x0393 (0x1a31): (0x00) Goto 0x0389

**************************************************************************
* Process if the scruffy robot is ARRIVING at the player's location
**************************************************************************

/ Scruffy robot is ARRIVING at the player's location

/ Branch if the scruffy robot is NOT arrving in the player's current location
/ as it's actions don't need to be printed as it can't be seen
0x0395 (0x1a33): (0x11) If var[0x70] != var[0x57] then Goto 0x03ae

/ Scruffy robot IS in the player's current location and arrving there

/ Print message  "A scruffy robot shuffles from the "
0x0399 (0x1a37): (0x05) Print message (constant) 0x10a

/ Set the index into the movement cycle in list#3 to the current index
0x039c (0x1a3a): (0x09) Set var[0x1b] = var[0x6f]

/ Add 0x01 to the index into list#3 to get the arriving at the player's 
/ location description code.  Note that because this is a single byte
/ Level 9 subtracted 0x64 from the higher description codes to make it 
/ fit a single byte
/ var[0x0c] is the constant 0x01
0x039f (0x1a3d): (0x0a) Set var[0x1b] += var[0x0c]

/ Get the arriving at the player's current location description code
0x03a2 (0x1a40): (0xa3) Set var[0x1c] = list#3[var[0x1b]] (list address 0x164e)

/ Branch if the code is less than 0x64/100 and print the direction
0x03a5 (0x1a43): (0x12) If var[0x1c] < var[0x72] then Goto 0x03ac

/ Add 0x64/100 to get to the right dictionary id for the description
/ var[0x72] is the message offset 0x64 set above
0x03a9 (0x1a47): (0x0a) Set var[0x1c] += var[0x72]

/ Print the direction or message
0x03ac (0x1a4a): (0x04) Print message var[0x1c]

**************************************************************************
* Process if player is floating in space
**************************************************************************

/ Branch if the player's location is not floating in space anything
/ before the first floating in space location (0x17)
0x03ae (0x1a4c): (0x1a) If var[0x58] < (constant) 0x17 then Goto 0x03ce

/ Branch if the player's location is not floating in space anything
/ after the last floating in space location (0x19)
0x03b2 (0x1a50): (0x1b) If var[0x58] > (constant) 0x19 then Goto 0x03ce

/ On the first turn when they are floating in space this will only be
/ executed once as their location is manually set to 0x17.  On the second
/ and third turns, it will com through here twice.  First when their
/ command is executed e.g. wait or shoot gun or look. It will say
/ they "float down" and then increment the location and print the 
/ new location description which will cause this to execute again. So
/ var[0x23] is used to stop "You float down" printing again and 
/ the location incrementing again and going into an infinite loop
/ var[0x23] behaves as:
/    1. Set at start of the game to 0x00
/    2. Incremented by 1 first time through when location is manually set to 0x17
/    skips "You float down" and incrementing location as it's < 0x02
/    3. Waits for next command
/    4. Incremented by 1 when command is processed e.g. shoot gun or wait or look
/    5. It's no longer < 0x02 so print "You float down", resets this variable to 0x00,
/    increments location by 1 and print location description
/    6. Comes back through here again after the print location
/    7. Increments by 1
/    8. Skips "You float down" and incrementing location as it's < 0x02
/    9. Waits for next command
/   10. Rinse and repeat

/ Increment the counter that determines if "You float down" and if the location 
/ is incremented on this pass through
/ var[0x0c] is the constant 0x01
0x03b6 (0x1a54): (0x0a) Set var[0x23] += var[0x0c]

/ Branch if the "You float down" should not be displayed and do not increment
/ the location id
0x03b9 (0x1a57): (0x12) If var[0x23] < var[0x0d] then Goto 0x03ce

/ "You float down" should be displayed

/ Reset the counter 
/ var[0x14] is the constant 0x00
0x03bd (0x1a5b): (0x09) Set var[0x23] = var[0x14]

/ Print message  "\nYou float down..\n "
0x03c0 (0x1a5e): (0x05) Print message (constant) 0x127

/ Increment the player's current location - they move through:
/ 0x17 : floating in space
/ 0x18 : in space near the inner surface of the hollow snowball protecting the freezers
/ 0x19 : about to hit the fast moving ice-below. You'd better match velocities..
0x03c3 (0x1a61): (0x0a) Set var[0x57] += var[0x0c]

/ Branch if the player is beyond "about to hit the fast moving ice-below" (0x19)
/ and kill the player
0x03c6 (0x1a64): (0x1b) If var[0x57] > (constant) 0x19 then Goto 0x133c

/ Player not about to die

/ Print the location description or say it's dark
0x03cb (0x1a69): (0x00) Goto 0x01d4

**************************************************************************
* Process "moving" the nightingale
**************************************************************************

/ Decrement the nightingale's mode / position  
0x03ce (0x1a6c): (0x0b) Set var[0x4c] -= var[0x0c]

/ Branch and reset the nightingale's position if it has reached 0x00
/ var[0x14] is the constant 0x00
0x03d1 (0x1a6f): (0x10) If var[0x4c] == var[0x14] then Goto 0x03e1

/ Position does NOT need to be reset

/ Branch if the player is in the "blue glass elevator" (0x3f) - clanking
/ can still be heard from inside the elevators
0x03d5 (0x1a73): (0x18) If var[0x57] == (constant) 0x3f then Goto 0x03e6

/ Player is NOT in the elevator

/ Branch if the player is somewhere before the mortuary loop (so
/ away from the nightingale)
0x03d9 (0x1a77): (0x1a) If var[0x57] < (constant) 0x42 then Goto 0x03e1

/ Branch if the player is in the mortuary loop locations (0x42 to 0x4a)
0x03dd (0x1a7b): (0x1a) If var[0x57] < (constant) 0x4b then Goto 0x03e6

/ Player is somewhere before or after the mortuary loop (so away from the
/ nightingale)

/ Reset the nightingale's mode / position to 0x10
0x03e1 (0x1a7f): (0x08) Set var[0x4c] = (constant) 0x10

/ Perform location specific checks and go to the main loop
0x03e4 (0x1a82): (0x00) Goto 0x0429

**************************************************************************

/ Player is either in the "blue glass elevator" (0x3f) or in the mortuary 
/ loop (0x42 to 0x4a)

/ Branch if the nightingale's mode is 0x06 - 0x10, it can't be heard or seen
0x03e6 (0x1a84): (0x1b) If var[0x4c] > (constant) 0x05 then Goto 0x0429

/ Nightingale is in mode 0x01 to 0x05

/ Set the base message for seeing the nightingale to 0x136 - when the mode
/ is added on it will be one of these messages:
/ 0x137 : A Nightingale is rolling away east
/ 0x138 : A Nightingale is here! Its sperical body divides to reveal syringes and grabs. Then it reaches for you..
/ 0x139 : A black spherical Nightingale is advancing from the west
/ 0x13a : A clanking noise comes from the west
/ 0x13b : You can hear quiet clanking
/
/ Don't think that 0x137 can ever be displayed as the nightingale will kill
/ the player whent he mode is 0x02 
0x03ea (0x1a88): (0x08) Set var[0x40] = (constant) 0x136

/ Add the mode to get the right message 
0x03ee (0x1a8c): (0x0a) Set var[0x40] += var[0x4c]

/ Branch if the player is "in a curving e/w corridor south of a wide
/ entrance." (0x42)
0x03f1 (0x1a8f): (0x18) If var[0x57] == (constant) 0x42 then Goto 0x0403

/ Player is either in the "blue glass elevator" (0x3f) or in part of the mortuary 
/ loop (0x43 to 0x4a)

/ Branch if the player is in the "blue glass elevator" (0x3f) or "spotless 
/ white alcove" (0x43) - player will be able to hear and avoid the Nightingale
0x03f5 (0x1a93): (0x1a) If var[0x57] < (constant) 0x44 then Goto 0x03fd

/ Player is in part of the mortuary loop (0x44 to 0x4a)

/ Branch if the player is outside a room (0x44, 0x45, 0x46) and print the messages
/ where the see the Nightingale
0x03f9 (0x1a97): (0x1a) If var[0x57] < (constant) 0x47 then Goto 0x0403

/ Player is somewhere safe and will hear the Nightingale not see it

/ Add the offsite for the in room messages
0x03fd (0x1a9b): (0x08) Set var[0x72] = (constant) 0x05

/ Add this to the message id calculated above to get to one of these:
/ 0x13c : The clanking fades away
/ 0x13d : The clanking pauses outside your room..
/ 0x13e : Loud clanking comes from outside
/ 0x13f : You hear quiet clanking outside
/ 0x140 : There's a faint machanical noise
0x0400 (0x1a9e): (0x0a) Set var[0x40] += var[0x72]

/ Print the message
0x0403 (0x1aa1): (0x04) Print message var[0x40]

/ If the Nightingale met the player out in the open then kill the player
/ Message 0x138 is "A Nightingale is here! Its sperical body divides 
/ to reveal syringes and grabs. Then it reaches for you.."
0x0405 (0x1aa3): (0x18) If var[0x40] == (constant) 0x138 then Goto 0x133c

/ Player NOT dead

/ Branch if the Nightingale mode is not 0x02
/ var[0x0d] is the constant 0x02
0x040b (0x1aa9): (0x11) If var[0x4c] != var[0x0d] then Goto 0x0429

/ Nightingale mode is 0x02

/ Branch if the door is open (0x01) - so player is in a room in the mortuary loop
/ but door is open so the Nightingale will kill the player
/ var[0x0c] is the constant 0x01
0x040f (0x1aad): (0x10) If var[0x16] == var[0x0c] then Goto 0x0423

/ Door is closed (0x00)

/ Branch if the player is in the "spotless white alcove" (0x43) kill them
0x0413 (0x1ab1): (0x18) If var[0x57] == (constant) 0x43 then Goto 0x0423

/ Branch if the player is in the "entrance to the blue mortuary" (0x47) to check
/ if they player is on the white (0x09) level, if so they Nightingale will kill the player
0x0417 (0x1ab5): (0x18) If var[0x57] == (constant) 0x47 then Goto 0x041f

/ Player is NOT on the white (0x09) level

/ Branch if the player is NOT in the Blue Mortuary (0x49)
0x041b (0x1ab9): (0x19) If var[0x57] != (constant) 0x49 then Goto 0x0429

/ Player IS in the "blue mortuary" (0x49)

/ Branch if the player is NOT on the White (0x09) level (will not die)
0x041f (0x1abd): (0x19) If var[0x3f] != (constant) 0x09 then Goto 0x0429

/ Player IS on the white level and either at the "entrance to the blue mortuary" (0x47)
/ or in the blue mortuary (0x49) so they will be killed by the Nightingale

/ Print message  "A nightingale enters. Its vast bulk splits and a hypo lashes out.. "
0x0423 (0x1ac1): (0x05) Print message (constant) 0x141

/ Kill the player
0x0426 (0x1ac4): (0x00) Goto 0x133c

**************************************************************************
* Yet more location checks continuing from above and called direct:
* 1. If the coffin is holding the crew member in place, print 
*    one of the crewmember's cyclical messages asking for liquid
* 2. If the petrol bomb is burning, print one of the burning messages and/or
*    let Snowball explode
* 3. If the petrol bomb is held by the figure, print one of the cyclical keep 
*    back messages
* 4. Otherwise print What now? and get the next input and process
**************************************************************************

/ Branch if the supplementary message is NOT "The coffin holding the 
/ crewmember is held in place" (0x142)
0x0429 (0x1ac7): (0x19) If var[0x60] != (constant) 0x142 then Goto 0x0435

/ Set the crewmember's cyclical base message to "Gimme Liquid Sustenance!" (0x133)
0x042e (0x1acc): (0x08) Set var[0x40] = (constant) 0x133

/ Print one of the cyclical messages below:
/ 0x133 : "Gimme Liquid Sustenance!"
/ 0x134 : "Must inform.. habidome code.. need water"
/ 0x135 : "Need water to converse"
0x0432 (0x1ad0): (0x01) Gosub 0x1916

**************************************************************************

/ Branch if the player has not yet played the flute to smash the petrol bomb
0x0435 (0x1ad3): (0x10) If var[0x56] == var[0x14] then Goto 0x0446

/ Player HAS played the flute so petrol bomb is burning

/ Increment the number of turns the petrol bomb has been burning
0x0439 (0x1ad7): (0x0a) Set var[0x56] += var[0x0c]

/ Branch if the number of turns hasn't reached 5 yet
0x043c (0x1ada): (0x19) If var[0x56] != (constant) 0x05 then Goto 0x0446

/ Petrol bomb has been burning for 5 times so explode the ship

/ Print message  "Snowball IX explodes! "
0x0440 (0x1ade): (0x05) Print message (constant) 0x18a

/ Kill the player
0x0443 (0x1ae1): (0x00) Goto 0x133c

**************************************************************************

/ Branch if the supplemental message is not "A figure with a petrol bomb 
/ stands at the west of the room" (0x17a)
0x0446 (0x1ae4): (0x19) If var[0x60] != (constant) 0x17a then Goto 0x0452

/ Figure with petrol bomb IS here

/ Set the figure's cyclical base message to "Keep back or I throw the bomb!" (0x18b)
0x044b (0x1ae9): (0x08) Set var[0x40] = (constant) 0x18b

/ Print one of the cyclical messages below:
/ 0x18b : "Keep back or I throw the bomb!"
/ 0x18c : "You cannot get to the controls!"
/ 0x18d : "You won't stop me!"
0x044f (0x1aed): (0x01) Gosub 0x1916

/ Clear the gosub stack
0x0452 (0x1af0): (0x06) Function - Clear Stack (0x06)

/ Call main game loop to get next instructions and process
0x0454 (0x1af2): (0x01) Gosub 0x0459

/ Print a newline and go back to the main loop to reset, assess any NPC 
/ actions, print any time based messages and say "What now?"
0x0456 (0x1af4): (0x00) Goto 0x05a0

**************************************************************************

/ Reset the indicator the player has the object or wearing it
/ var[0x0c] is the constant 0x01
0x0459 (0x1af7): (0x09) Set var[0x4e] = var[0x0c]

/ Reset the recursion depth when checking the location of an object to 0x00
/ var[0x14] is the constant 0x00
0x045c (0x1afa): (0x09) Set var[0x3e] = var[0x14]

/ Reset the target location to be the same as the player's current location
/ (player moved or couldn't move or executed an action)
0x045f (0x1afd): (0x09) Set var[0x58] = var[0x57]

/ Print message  "\nWhat now? "
0x0462 (0x1b00): (0x05) Print message (constant) 0x1c

/ Get the player's next commands
0x0464 (0x1b02): (0x01) Gosub 0x1755

/ Branch if the player did not enter any words or no words were matched
/ by the dictionary (will be set to 0x00)
/ var[0x14] is the constant 0x00
0x0467 (0x1b05): (0x10) If var[0x29] == var[0x14] then Goto 0x18fd

/ Branch if the second word is the red form (0x66)
0x046c (0x1b0a): (0x18) If var[0x2a] == (constant) 0x66 then Goto 0x0474

/ Branch if the second word is NOT the ticket (0x79)
0x0470 (0x1b0e): (0x19) If var[0x2a] != (constant) 0x79 then Goto 0x0491

/ Second word is the ticket (0x79) or the form (0x66) at this point

/ Branch if the third word is NOT red (0xca), orange (0xcb), yellow (0xcc) 
/ or green (0xcd)
0x0474 (0x1b12): (0x1a) If var[0x2b] < (constant) 0xca then Goto 0x1907

/ Branch if the third word is NOT red (0xca), orange (0xcb), yellow (0xcc) 
/ or green (0xcd)
0x0479 (0x1b17): (0x1b) If var[0x2b] > (constant) 0xcd then Goto 0x1907

/ Second word is the ticket or form, third word is red (0xca), orange (0xcb), 
/ yellow (0xcc) or green (0xcd)

/ Next part sets the second word to the correct coloured ticket's or form's
/ dictonary id.  The word ticket matches against 0x79 (actually
/ the red ticket) and the word form against 0x66 (actually the red form). 
/ It does this by setting the second word's dictionary id to one of:
/        form   (0x66) + red     (0xca) - 0xca = red    form   (0x66)
/        form   (0x66) + green   (0xcb) - 0xca = green  form   (0x67)
/        form   (0x66) + yellow  (0xcc) - 0xca = yellow form   (0x68)
/        form   (0x66) + blue    (0xcc) - 0xca = blue   form   (0x69)
/        ticket (0x79) + red     (0xca) - 0xca = red    ticket (0x79)
/        ticket (0x79) + green   (0xcb) - 0xca = green  ticket (0x7a)
/        ticket (0x79) + yellow  (0xcc) - 0xca = yellow ticket (0x7b)
/        ticket (0x79) + blue    (0xcc) - 0xca = blue   ticket (0x7c)
/ Note that yellow and blue tickets are not part of the game

/ Set the ticket colour base id for subtraction
0x047e (0x1b1c): (0x08) Set var[0x72] = (constant) 0xca

/ Add on the colour dictionary id to the ticket dicitonary id 
/ Colours for tickets have a dictionary of 0xca to 0xcc
0x0481 (0x1b1f): (0x0a) Set var[0x2a] += var[0x2b]

/ Subtract the ticket colour base id 
0x0484 (0x1b22): (0x0b) Set var[0x2a] -= var[0x72].

/ Second word now has the correct coloured ticket dictionary id

/ Set the third word to null (0x00) as it's not longer required
/ var[0x14] is the constant 0x00
0x0487 (0x1b25): (0x09) Set var[0x2b] = var[0x14]

/ Only allow the red or green ticket 
/ Branch if the calculated dictionary id is either the red (0x79)
/ or the green ticket (0x7a)
0x048a (0x1b28): (0x1a) If var[0x2a] < (constant) 0x7b then Goto 0x0491

/ It's the yellow (0x7b) or blue ticket (0x7c)

/ Don't allow those ticket colours, reset to the red ticket!
0x048e (0x1b2c): (0x08) Set var[0x2a] = (constant) 0x7a

/ Branch if the first word is a dictionary word that doesn't need
/ or has an optional second word and process the command
0x0491 (0x1b2f): (0x1a) If var[0x29] < (constant) 0x28 then Goto 0x04af

/ If the first word is "dig" branch and process the command
0x0495 (0x1b33): (0x18) If var[0x29] == (constant) 0x3b then Goto 0x04af

/ Branch if the first word is NOT a verb and print "What do you
/ want to do with <object>"
0x0499 (0x1b37): (0x1b) If var[0x29] > (constant) 0x4f then Goto 0x18e2

/ Branch if the second word is a valid object/npc/adjective/number etc
/ and process the command
0x049e (0x1b3c): (0x1b) If var[0x2a] > (constant) 0x4f then Goto 0x04af

/ No second word (0x00) or it's a verb (0x01 to 0x4f)

/ Branch if the recognised word count is less than 0x02
/  to print the  "You'll need to say more than that" cyclic message
/ var[0x0d] is the constant 0x02
0x04a2 (0x1b40): (0x12) If var[0x2c] < var[0x0d] then Goto 0x1902

/ At least two words were recognised

/ Branch if more than 8 words were recognised (impossible on a BBC
/ Micro as the v1 code only allow three words)
/ Print the "What a mouthful! I'm only an ignorant micro " message 
0x04a7 (0x1b45): (0x1b) If var[0x2c] > (constant) 0x08 then Goto 0x190c

/ Between 2 and 8 words were recognised

/ Print the "Could you rephrase that?" cyclic message
0x04ac (0x1b4a): (0x00) Goto 0x1907

**************************************************************************
* Process the commands
**************************************************************************

/ Increment the number of valid moves/actions that player has performed
/ stored in var[0x68] but not used
0x04af (0x1b4d): (0x0a) Set var[0x68] += var[0x0c]

/ If the command isn't "again" (0x14) then skip ahead
0x04b2 (0x1b50): (0x19) If var[0x29] != (constant) 0x14 then Goto 0x04b9

/ Process command "again" by setting 0x29-0x2c to the values in 
/ 0x2d - 0x30 which contains the ids of the previously cached words
0x04b6 (0x1b54): (0x01) Gosub 0x05c4

/ Branch if the second word is "it" 
0x04b9 (0x1b57): (0x18) If var[0x2a] == (constant) 0xdf then Goto 0x04c1

/ Branch if the third word is NOT "it" 
0x04bd (0x1b5b): (0x19) If var[0x2b] != (constant) 0xdf then Goto 0x04c4

/ Second or third word is "it"

/ Replace the second or third word with the cached second or third word from 
/ the player's previous command
0x04c1 (0x1b5f): (0x01) Gosub 0x060c

/ Cache the last words the user entered in case their next command
/ is "again"

/ Cache the first word the player entered
0x04c4 (0x1b62): (0x09) Set var[0x2d] = var[0x29]

/ Cache the second word the player entered
0x04c7 (0x1b65): (0x09) Set var[0x2e] = var[0x2a]

/ Cache the third word the player entered
0x04ca (0x1b68): (0x09) Set var[0x2f] = var[0x2b]

/ Cache the word count 
0x04cd (0x1b6b): (0x09) Set var[0x30] = var[0x2c]

/ If the second word is "everything" (0xe0) branch ahead
0x04d0 (0x1b6e): (0x18) If var[0x2a] == (constant) 0xe0 then Goto 0x05d1

/ Basically a gigantic switch statement below to go to the 
/ code to process the verb.  If there's a verb, it'll be
/ the first word in var[0x29] because all verbs have the lowest
/ dictionary ids and the words have been sorted into dictionary id
/ order

/ If the first word is a direction e.g. North, across, climb, left etc
/ then process it
0x04d5 (0x1b73): (0x1a) If var[0x29] < (constant) 0x14 then Goto 0x061e

/ If the first word is "attack" or "kick" or "fight" or "kill" or "chop"
/ or "hit" or "smash" or "cut", process it 
0x04da (0x1b78): (0x18) If var[0x29] == (constant) 0x15 then Goto 0x086a

/ If the first word is "wear", process it
0x04df (0x1b7d): (0x18) If var[0x29] == (constant) 0x2a then Goto 0x0a86

/ If the first word is "throw" or "hurl", process it
0x04e4 (0x1b82): (0x18) If var[0x29] == (constant) 0x2b then Goto 0x0a9c

/ If the first word is "give" or "feed" or "pay"", process it
0x04e9 (0x1b87): (0x18) If var[0x29] == (constant) 0x2c then Goto 0x0931

/ If the first word is "fill", process it
0x04ee (0x1b8c): (0x18) If var[0x29] == (constant) 0x2d then Goto 0x0aa2

/ If the first word is "empty" or "pour", process it
0x04f3 (0x1b91): (0x18) If var[0x29] == (constant) 0x2e then Goto 0x0ab9

/ If the first word is "open" or "unlock", process it
0x04f8 (0x1b96): (0x18) If var[0x29] == (constant) 0x2f then Goto 0x0ac1

/ If the first word is "close" or "lock" or "shut", process it
0x04fd (0x1b9b): (0x18) If var[0x29] == (constant) 0x30 then Goto 0x0b7b

/ If the first word is "bite" or "eat" or "nibble" or "swallow" or "taste", process it
0x0502 (0x1ba0): (0x18) If var[0x29] == (constant) 0x31 then Goto 0x0bb8

/ If the first word is "drink" or "sip", process it
0x0507 (0x1ba5): (0x18) If var[0x29] == (constant) 0x32 then Goto 0x0bbe

/ If the first word is "light", process it
0x050c (0x1baa): (0x18) If var[0x29] == (constant) 0x33 then Goto 0x0bd8

/ If the first word is "extinguish", process it
0x0511 (0x1baf): (0x18) If var[0x29] == (constant) 0x34 then Goto 0x0bff

/ If the first word is "press" or "push" or "squeeze", process it
0x0516 (0x1bb4): (0x18) If var[0x29] == (constant) 0x35 then Goto 0x0c25

/ If the first word is "fasten" or "tie" or "attach" or "fix", process it
0x051b (0x1bb9): (0x18) If var[0x29] == (constant) 0x36 then Goto 0x0daf

/ If the first word is "shake" or "wave", process it
0x0520 (0x1bbe): (0x18) If var[0x29] == (constant) 0x37 then Goto 0x0dfc

/ If the first word is "blow" or "play", process it
0x0525 (0x1bc3): (0x18) If var[0x29] == (constant) 0x38 then Goto 0x0e31

/ If the first word is "rub", process it (nothing happens)
0x052a (0x1bc8): (0x18) If var[0x29] == (constant) 0x3a then Goto 0x1911

/ If the first word is "dig", process it
0x052f (0x1bcd): (0x18) If var[0x29] == (constant) 0x3b then Goto 0x0e4f

/ If the first word is "unfasten" or "untie", process it
0x0534 (0x1bd2): (0x18) If var[0x29] == (constant) 0x3c then Goto 0x0df6

/ If the first word is "insert", process it
0x0539 (0x1bd7): (0x18) If var[0x29] == (constant) 0x3d then Goto 0x0eac

/ If the first word is "turn" or "twist" or "rotate", process it
0x053e (0x1bdc): (0x18) If var[0x29] == (constant) 0x3e then Goto 0x0f37

/ If the first word is "fire" or "shoot", process it
0x0543 (0x1be1): (0x18) If var[0x29] == (constant) 0x3f then Goto 0x0e93

/ If the first word is "pull", process it
0x0548 (0x1be6): (0x18) If var[0x29] == (constant) 0x40 then Goto 0x0f5a

/ If the first word is "inventory", process it
0x054d (0x1beb): (0x18) If var[0x29] == (constant) 0x16 then Goto 0x088d

/ If the first word is "listen" or "hear", process it
0x0552 (0x1bf0): (0x18) If var[0x29] == (constant) 0x17 then Goto 0x08ab

/ If the first word is "plugh" or "plover" or "sesame" or "xyzzy" or "agaliarept"
/ or "agliarept", process it (routine prints "A psychobot taps you on 
/ the shoulder..." and moves the player to location 0xb2)
0x0557 (0x1bf5): (0x18) If var[0x29] == (constant) 0x19 then Goto 0x08bd

/ If the first word is "quit", process it
0x055c (0x1bfa): (0x18) If var[0x29] == (constant) 0x1a then Goto 0x08cb

/ If the first word is "restore", process it
0x0561 (0x1bff): (0x18) If var[0x29] == (constant) 0x1b then Goto 0x08d9

/ If the first word is "save", process it
0x0566 (0x1c04): (0x18) If var[0x29] == (constant) 0x1c then Goto 0x08ec

/ If the first word is "score", process it
0x056b (0x1c09): (0x18) If var[0x29] == (constant) 0x1d then Goto 0x08f4

/ If the first word is "affirmative" or "yes", process it
0x0570 (0x1c0e): (0x18) If var[0x29] == (constant) 0x1e then Goto 0x08f1

/ If the first word is "negative", process it
0x0575 (0x1c13): (0x18) If var[0x29] == (constant) 0x1f then Goto 0x08f1

/ If the first word is "wait", process it
0x057a (0x1c18): (0x18) If var[0x29] == (constant) 0x20 then Goto 0x0917

/ If the first word is "search" or "examine", process it
0x057f (0x1c1d): (0x18) If var[0x29] == (constant) 0x23 then Goto 0x0fa5

/ If the first word is "blink" or "wink", process it
0x0584 (0x1c22): (0x18) If var[0x29] == (constant) 0x24 then Goto 0x127c

/ If the first word is "look", check if it's light / dark 
/ and print the location description if light
0x0589 (0x1c27): (0x18) If var[0x29] == (constant) 0x25 then Goto 0x08ae

/ If the first word is "carry" or "get" or "take", process it
0x058e (0x1c2c): (0x18) If var[0x29] == (constant) 0x28 then Goto 0x0a00

/ If the first word is "drop" or "put", process it
0x0593 (0x1c31): (0x18) If var[0x29] == (constant) 0x29 then Goto 0x0a80

/ If the first word is "mend" or "weld", process it
0x0598 (0x1c36): (0x18) If var[0x29] == (constant) 0x18 then Goto 0x12cc

/ Command not understood - print one of the cyclic "I don't understand" messages
0x059d (0x1c3b): (0x00) Goto 0x18fd

**************************************************************************
* This is called whenever the following messages are printed:
* 1. "You can't see it "
* 2. "You can't do that "
* 3. "Don't be silly!"
* 4. "You don't have <object> "
* 5. "You can't see <object> "
* 6. "What do you want to do with <object>"
*
* And also when any commands fails which is most at this point other than
* "look" or "examine" or "search"
*
* It checks if the player is in the "sponge lined coffin" and if the 
* coffin lid is closed. If it is, it generates a random number and  
* will invoke a "search" / "examine" command so that the player sees "You 
* notice a lever beside you" if the random number is less than 80. So 
* it shows with an approximately 31% probability.
**************************************************************************

/ Print message  "\n "
0x05a0 (0x1c3e): (0x05) Print message (constant) 0x05

/ Branch if the player is NOT in the "sponge lined coffin" (0xae)
0x05a2 (0x1c40): (0x19) If var[0x57] != (constant) 0xae then Goto 0x05c1

/ Player IS in the "sponge lined coffin"

/ Branch if the coffin lid is closed (0x00)
/ var[0x14] is the constant 0x00
0x05a6 (0x1c44): (0x13) If var[0x35] > var[0x14] then Goto 0x05c1

/ Coffin lid is closed

/ Branch if the first word IS "search" or "examine" (0x23)
0x05aa (0x1c48): (0x18) If var[0x29] == (constant) 0x23 then Goto 0x05c1

/ Set the temporary variable to a random number
0x05ae (0x1c4c): (0x06) Function - Random - Set var[0x72]=<random number>

/ Branch and do not perform a location search in the closed coffin
/ if the random number is greater than 80. Only performs a search
/ with a probability of approximately 31%
0x05b1 (0x1c4f): (0x1b) If var[0x72] > (constant) 0x50 then Goto 0x05c1

/ Set the target location to the current location
0x05b5 (0x1c53): (0x09) Set var[0x58] = var[0x57]

/ Set the first word to "search" / "examine" (0x23)
0x05b8 (0x1c56): (0x08) Set var[0x29] = (constant) 0x23

/ Set the second word to blank (0x00)
/ var[0x14] is the constaint 0x00
0x05bb (0x1c59): (0x09) Set var[0x2a] = var[0x14]

/ Call the "search" / "examine" subroutine
0x05be (0x1c5c): (0x01) Gosub 0x0fa5

/ Perform location checks and print "What now?"
0x05c1 (0x1c5f): (0x00) Goto 0x02ed

**************************************************************************
* Command: again
* -----------------
* Set the current word ids and count to the previously cached 
* word ids and count
**************************************************************************

/ Player entered "again" so set the current words to the previously entered
/ words that were cached in 0x28 to 0x2b

/ Set the first word to the cached first word from the previous user input
0x05c4 (0x1c62): (0x09) Set var[0x29] = var[0x2d]

/ Set the second word to the cached first word from the previous user input
0x05c7 (0x1c65): (0x09) Set var[0x2a] = var[0x2e]

/ Set the third word to the cached first word from the previous user input
0x05ca (0x1c68): (0x09) Set var[0x2b] = var[0x2f]

/ Set the count to the cached count from the previous input
0x05cd (0x1c6b): (0x09) Set var[0x2c] = var[0x30]

/ Return to process the previous command
0x05d0 (0x1c6e): (0x02) Return

**************************************************************************
* Second word is "everything" so work out if get or drop or something else
**************************************************************************

/ Branch if the verb is either "get" or "take" or "carry"
/ and try and add all the objects in the current location to the player's 
/ inventory
0x05d1 (0x1c6f): (0x18) If var[0x29] == (constant) 0x28 then Goto 0x05dc

/ Branch if the verb is "drop" or "put" or "abandon"
0x05d5 (0x1c73): (0x18) If var[0x29] == (constant) 0x29 then Goto 0x05f4

/ For any other verb e.g. attach everything, "You can't do that"
0x05d9 (0x1c77): (0x00) Goto 0x18ca

**************************************************************************
* Process "get everything" / "take everything" / "carry everything"
**************************************************************************

/ Set the working object id to the id of the first object (0x50)
/ the code will then loop through each object checking to see if it's
/ in this current location and add it to the inventory if it can
0x05dc (0x1c7a): (0x08) Set var[0x1e] = (constant) 0x50

/ Set the second word to be the current object
0x05df (0x1c7d): (0x09) Set var[0x2a] = var[0x1e]

/ Check to see if the object is available in the player's current location
0x05e2 (0x1c80): (0x01) Gosub 0x15f0

/ Branch if the object is not in the player's current location
/ var[0x14] is the constant 0x00
0x05e5 (0x1c83): (0x10) If var[0x4e] == var[0x14] then Goto 0x05ec

/ Try and add the object to the player's inventory by 
/ performing the get <object>
/ (the sub-routine will perform all sorts of checks)
0x05e9 (0x1c87): (0x01) Gosub 0x0a00

/ Increment the current object id to move to the next object
/ var[0x0c] is the constant 0x01
0x05ec (0x1c8a): (0x0a) Set var[0x1e] += var[0x0c]

/ The "angel" (0x8d) is the last object processed here - loop back around 
/ if there's still another object to process
0x05ef (0x1c8d): (0x1a) If var[0x1e] < (constant) 0x8d then Goto 0x05df

/ All items picked up
0x05f3 (0x1c91): (0x02) Return

**************************************************************************
* Process "drop everything" / "put everything"
**************************************************************************

/ Set the working object id to the id of the first object (0x50)
/ the code will then loop through each object checking to see if it's
/ in the inventory or being worn and therefore can be dropped
/ NOTE: dropping everything does not drop items that you are wearing
0x05f4 (0x1c92): (0x08) Set var[0x1e] = (constant) 0x50

/ Get the current location of the current object
0x05f7 (0x1c95): (0xa2) Set var[0x1c] = list#2[var[0x1e]] (list address 0x169e)

/ Branch If the current location of the object is NOT in the player's inventory, 
/ var[0x10] is the constant for the inventory location 0xe1
0x05fa (0x1c98): (0x11) If var[0x1c] != var[0x10] then Goto 0x0604

/ Object is in the inventory

/ Set the second word to be the current object 
0x05fe (0x1c9c): (0x09) Set var[0x2a] = var[0x1e]

/ Drop the object (remove from the player's inventory and put it in the current location)
0x0601 (0x1c9f): (0x01) Gosub 0x0a80

/ Increment the current object id to move to the next object
/ var[0x05] is the constant 0x01
0x0604 (0x1ca2): (0x0a) Set var[0x1e] += var[0x0c]

/ The "angel" (0x8c) is the last object processed here - loop back around 
/ if there's still another object to process
0x0607 (0x1ca5): (0x1a) If var[0x1e] < (constant) 0x8d then Goto 0x05f7

/ All items dropped
0x060b (0x1ca9): (0x02) Return

**************************************************************************
* Process "it" in a sentence
**************************************************************************

/ It appears that if you type "it" then that word
/ will be replaced with the cached input from the previous command (the last
/ command that did not contain "it").  I guess this is so that 
/ you can type "give it" or "get it" etc after e.g. "exam <object>" or
/ "drop <object>"

/ Branch if the second word is NOT "it" (0xdf) branch ahead
/ as it doesn't need to be replaced with the previous cached word
0x060c (0x1caa): (0x19) If var[0x2a] != (constant) 0xdf then Goto 0x0613

/ Second word is "it"

/ Replace the second word with the cached second word from the player's previous command
0x0610 (0x1cae): (0x09) Set var[0x2a] = var[0x2e]

/ Branch if the third word is NOT "it" (0xdf) branch ahead
/ as it doesn't need to be replaced with the previous cached word
0x0613 (0x1cb1): (0x19) If var[0x2b] != (constant) 0xdf then Goto 0x061a

/ Third word is "it"

/ Replace the third word with the cached third word from the player's previous command
0x0617 (0x1cb5): (0x09) Set var[0x2b] = var[0x2f]

/ Re-sort the words so that the dictionary ids (verbs/objects/npcs etc)
/ are in ascending order
0x061a (0x1cb8): (0x01) Gosub 0x1703

/ Completed processing "it"
0x061d (0x1cbb): (0x02) Return

**************************************************************************
* Command: <any direction> with dictionary id 0x01 to 0x13
**************************************************************************

/ Branch if the direction is a compass direction e.g. North or South-East
0x061e (0x1cbc): (0x1a) If var[0x29] < (constant) 0x09 then Goto 0x0635

/ Branch if the direction is "cross/across/climb/jump/backwards/forwards/
/ ahead/left/right
0x0622 (0x1cc0): (0x1b) If var[0x29] > (constant) 0x0c then Goto 0x0635

/ Direction is one of  upwards/over/stand/downwards/under/sit/lie/inside/
/ enter/into/on/board/outside/leave/off

/ Branch if the second word is "drop" or "put" (0x29)
0x0626 (0x1cc4): (0x18) If var[0x2a] == (constant) 0x29 then Goto 0x0eac

/ Branch if the second word is "insert" (0x3d)
0x062b (0x1cc9): (0x18) If var[0x2a] == (constant) 0x3d then Goto 0x0eac

/ Branch if the second word is "look" (0x25)
0x0630 (0x1cce): (0x18) If var[0x2a] == (constant) 0x25 then Goto 0x086e

/ Branch if the first word is a compass direction e.g. North or South-East
0x0635 (0x1cd3): (0x1a) If var[0x29] < (constant) 0x0e then Goto 0x0671

/ Direction is NOT a compass direction

/ Branch if the direction is NOT "climb"
0x0639 (0x1cd7): (0x19) If var[0x29] != (constant) 0x0e then Goto 0x0647

/ Direction is climb 

/ Change the first word from climb (0x0e) to up (0x09)
0x063d (0x1cdb): (0x08) Set var[0x29] = (constant) 0x09

/ Branch if the second word is NOT "under"
0x0640 (0x1cde): (0x19) If var[0x2a] != (constant) 0x0a then Goto 0x0647

/ Second word is under

/ Set the first word to "under" or "down"
0x0644 (0x1ce2): (0x09) Set var[0x29] = var[0x2a]

/ Branch if the second word is NOT "jump"
0x0647 (0x1ce5): (0x19) If var[0x29] != (constant) 0x0f then Goto 0x0655

/ Second word is jump

/ Change the first word to "down" (0x0a)
0x064b (0x1ce9): (0x08) Set var[0x29] = (constant) 0x0a

/ Branch if the second word is NOT "up(wards)" or "over"
0x064e (0x1cec): (0x19) If var[0x2a] != (constant) 0x09 then Goto 0x0655

/ Second word is "up(wards)" or "over"

/ Set the first word to "up(wards)" or "over"
0x0652 (0x1cf0): (0x09) Set var[0x29] = var[0x2a]

**************************************************************************
* Check to see if the direction in the first word is left, right, 
* forwards or backwards
**************************************************************************

/ NOTE how left, right, forwards, backwards are process 
/ is a bit all a bit weird... or unintuitive to me at least
/ 
/ 1. It generates a random direction differently for each word and will then try and go in that direction 
/ 2. The random direction will either be NE, SE, SW or NW
/ 3. The random direction is based on the current value held in var[0x11]
/ 4. For FORWARDS it just takes the current direction held in var[0x11] (does not change it)
/ 5. For RIGHT it moves to the next ordinal clockwise e.g. NE -> SE or SE -> SW etc
/ 6. For BACKWARDS it moves two ordinal directions clockwise e.g. NE -> SW or SW -> NE  etc
/ 7. For LEFT it moves three ordinal directions clockwise e.g NE -> NW or SW -> SE etc
/
/ Except... the first time through for FORWARDS, it's set to 0 and there's no 0 direction
/ Why not initialise var[0x11] to 0x02?
/
/ If it's a valid direction now (command code is < 0x0f) then
/ branch and check they can move in that direction
/ NOTE comparison should really be 0x0d as climb "0x0e" is substituted above (0x063d)

/ Branch if the direction dictionary id is between 0x0a and 0x0e although climb (0x0e) will have been 
/ changed to over/stand (0x09) so not processed here
/ (dowwards, under, sit, lie, inside, enter, into, on, board, outside,, leave, off, cross,
/  across)
0x0655 (0x1cf3): (0x1a) If var[0x29] < (constant) 0x0f then Goto 0x0671

/ Branch if the direction is "forwards"/"ahead" (0x11)
0x0659 (0x1cf7): (0x18) If var[0x29] == (constant) 0x11 then Goto 0x066e

/ First word is NOT "forwards" or "ahead"

/ Move the current random diagonal direction held in var[0x18] to the next clockwise diaganal direction (e.g. NE -> SE)
0x065d (0x1cfb): (0x01) Gosub 0x16be

/ Branch if the direction is "right" (0x13)
0x0660 (0x1cfe): (0x18) If var[0x29] == (constant) 0x13 then Goto 0x066e

/ Move the current random diagonal direction held in var[0x18] to the next clockwise diaganal direction (e.g. NE -> SE)
0x0664 (0x1d02): (0x01) Gosub 0x16be

/ Branch if the direction is backwards (0x10)
0x0667 (0x1d05): (0x18) If var[0x29] == (constant) 0x10 then Goto 0x066e

/ First word must be "left"

/ Move the current random diagonal direction held in var[0x18] to the next clockwise diaganal direction (e.g. NE -> SE)
0x066b (0x1d09): (0x01) Gosub 0x16be

/ Set the first word to the random diagonal direction 
0x066e (0x1d0c): (0x09) Set var[0x29] = var[0x18]

/ Branch if the first word is NOT "Over" or "Stand" (0x09)
0x0671 (0x1d0f): (0x19) If var[0x29] != (constant) 0x09 then Goto 0x0689

/ First word IS "Over" or "Stand"

/ Set the second word to the object "coffin" (0x5f)
0x0675 (0x1d13): (0x08) Set var[0x2a] = (constant) 0x5f

/ Check to see if the coffin is in the player's current location
0x0678 (0x1d16): (0x01) Gosub 0x15f0

/ Branch if the coffin is NOT in the player's current location
/ var[0x14] is the constant 0x01
0x067b (0x1d19): (0x10) If var[0x4e] == var[0x14] then Goto 0x0689

/ Branch if the player is already standing on the coffin
/ var[0x0c] is the constant 0x01
0x067f (0x1d1d): (0x10) If var[0x05] == var[0x0c] then Goto 0x0689

/ Set the status flag to indicate the player is standing on the coffin
/ var[0x0c] is the constant 0x01
0x0683 (0x1d21): (0x09) Set var[0x05] = var[0x0c]

/ Print the location description
0x0686 (0x1d24): (0x00) Goto 0x01d4

**************************************************************************

/ Branch if the first word is not "downwards" or "under" or "sit" or "lie" 
/ (0xa)
0x0689 (0x1d27): (0x19) If var[0x29] != (constant) 0x0a then Goto 0x0697

/ First word is "downwards" or "under" or "sit" or "lie" (0xa)

/ Branch if the player is NOT standing on the coffin 
/ var[0x14] is the constant 0x00
0x068d (0x1d2b): (0x10) If var[0x05] == var[0x14] then Goto 0x0697

/ Player IS standing on the coffin

/ Change the player to NOT standing on the coffin as they just typed down
0x0691 (0x1d2f): (0x09) Set var[0x05] = var[0x14]

/ Print the location description
0x0694 (0x1d32): (0x00) Goto 0x01d4

**************************************************************************

/ Check if the player can move in the direction requested 
0x0697 (0x1d35): (0x0f) Exits - check location var[0x57] can move var[0x29] - exit flags in var[0x63] and target location (or 0x00) in var[0x58]

/ Branch if the player can move in the requested location 
/ When they can, var[0x58] will be set to the code of the target location
/ When they cannot, var[0x58] will be set to 0x00
/ var[0x14] is the constant 0x00
0x069c (0x1d3a): (0x13) If var[0x58] > var[0x14] then Goto 0x06a3

/ Player cannot move in the requested direction, print a contextual
/ reason why e.g. "Deep snow blocks you"
0x06a0 (0x1d3e): (0x00) Goto 0x187f

**************************************************************************
* Process moving through a door
**************************************************************************

/ Rules are:
/ 1. If there's not door in that direction (indicated by the exit flags)
/    don't process rules for doors
/ 2. If there's a single door in a location and it's open (var[0x16])
/    then allow the user through the door otherwise bump their nose
/ 3. If the player is in an airlock:
/    a. Door status is NOT used (var[0x16]) as there are two possible doors
/    b. If they pressed the green button and the target location IS their
/    prior location to entering the airlock, allow it otherwise bump their nose
/    (green button should always take player back to their prior location)
/    c. If they pressed the yellow button and the target location is NOT their
/    prior location to entering the airlock, allow it otherwise bump their nose
/    (yellow button should always take player back to a different location to
/    their prior location)

/ Cache the exit flags for the direction the player wants to head in 
0x06a3 (0x1d41): (0x09) Set var[0x72] = var[0x63]

/ Branch if there is NOT a door in this direction from this 
/ If the exit flags are less that 0x04 then there is no door
0x06a6 (0x1d44): (0x1a) If var[0x63] < (constant) 0x04 then Goto 0x06c5

/ There IS a door in this direction

/ Branch if the door is open (0x01)
/ var[0x14] is the constant 0x00
0x06aa (0x1d48): (0x13) If var[0x16] > var[0x14] then Goto 0x06c3

/ Door status is closed (0x00)

/ Branch if the player is NOT in airlock (0x00) as the door is closed 
/ and the player will bump their nose on the door
/ var[0x14] is the constant 0x00
0x06ae (0x1d4c): (0x10) If var[0x19] == var[0x14] then Goto 0x06c0

/ Player IS in an airlock - door status (var[0x16]) can be ignored

/ Note - the door status flag is NOT used in an airlock, instead 
/ var[0x19] is used to indicate which button press opened which door direction

/ Note - important
/ Depending on the player's previous location, depends which door
/ opens when pressing a yellow or green button. The green button
/ will always open the door that they just came through.  The
/ yellow button will always open the other door. 

/ Branch if the player pressed the green button (0xcd) to do a belt and braces 
/ check on the target location matching the player's prior location (should
/ always match)
0x06b2 (0x1d50): (0x18) If var[0x19] == (constant) 0xcd then Goto 0x06bc

/ Player pressed the yellow button (0xcc)

/ Branch if the player's previous location (where they came from to get into the
/ airlock) is NOT the exit's target location.  Should always be different.
0x06b6 (0x1d54): (0x11) If var[0x55] != var[0x58] then Goto 0x06c3

/ Player's previous location matches the player's prior location so don't
/ allow the move (Should never reach here if the exits are correct). 

/ Player pressed the yellow button however target location is the same as the 
/ player's previous location, don't allow it, bump their nose
0x06ba (0x1d58): (0x00) Goto 0x06c0

**************************************************************************

/ Player pressed the green button above and branched to here
/ Branch if the player's previous location (where they came from to get into the
/ airlock) IS the exit's target location. Remember the green button takes the 
/ player to their previous location prior to entering the airlock
0x06bc (0x1d5a): (0x10) If var[0x55] == var[0x58] then Goto 0x06c3

/ Door is shut or exit does not take player back to previous location when
/ the green button has been pressed in an airlock (that should never happen)
/ or the yellow button has been pressed and exit takes the player back to the
/ previous location (should never happen)

/ Print message  "You bump your nose on a door "
0x06c0 (0x1d5e): (0x05) Print message (constant) 0x3e

/ All done
0x06c2 (0x1d60): (0x02) Return

**************************************************************************

/ Either:
/ 1. Single exit with a door and door was open
/ 2. In an airlock:
/    a. Green button pressed and target location is the same as player's 
/    previous location
/    b. Yellow button pressed and target location is different to player's 
/    previous location

/ Print message  "The door closes behind you\n "
0x06c3 (0x1d61): (0x05) Print message (constant) 0x3f

**************************************************************************
* Process the player moving to a different section and/or floor/level 
* in the freezer disk
**************************************************************************

**************************************************************************
* Process the player moving from "curving e/w corridor" (0x44) to the 
* "curving e/w corridor" (0x46)or vice versa
**************************************************************************

/ When the player moves:
/ 
/ 1. From the "curving e/w corridor" (0x44) to the "curving e/w corridor"
/ beside a blue door" (0x46) then move to a new section/sector.  This changes
/ the second colour displayed in the lights.  This direction adds to the colour
/ so e.g. it moves from Black (0x01) to Brown (0x02).
/
/ 2. From the "curving e/w corridor" to the "curving e/w corridor" (0x46)
/ beside a blue door" (0x44) then move to a new section/sector. This changes
/ the second colour displayed in the lights.  This direction deducts the colour
/ so e.g. it moves from Brown (0x02) to Black (0x01).
/ 
/ 3. If the player is in the black sector when moving East from the 
/ "curving e/w corridor beside a blue door" (0x46) to the "curving 
/ e/w corridor" (0x44) they will instead move to the "...curving 
/ e/w corridor south of a wide entrance..." (0x42) where the elevator is.
/
/ Remember that var[0x5c] = second colour x 10 + third colour x 1 

/ Set the temporary variable to the increment / decrement amount 
/ to change the second colour (10)
0x06c5 (0x1d63): (0x08) Set var[0x72] = (constant) 0x0a

/ Branch if the current location is NOT the "curving e/w corridor below 
/ indicator lights" (0x44)
0x06c8 (0x1d66): (0x19) If var[0x57] != (constant) 0x44 then Goto 0x06d3

/ Current Location IS the "curving e/w corridor (0x44)

/ Branch if the target location is NOT the "in a curving e/w corridor 
/ beside a blue door." (0x46)
0x06cc (0x1d6a): (0x19) If var[0x58] != (constant) 0x46 then Goto 0x06d3

/ Current Location IS the "curving e/w corridor (0x44)
/ Target location IS the "curving e/w corridor beside a blue door" (0x46)

/ Increment the second colour by adding 10
0x06d0 (0x1d6e): (0x0a) Set var[0x5c] += var[0x72]

**************************************************************************

/ Branch if the current location is NOT the "in a curving e/w corridor 
/ beside a blue door." (0x46)
0x06d3 (0x1d71): (0x19) If var[0x57] != (constant) 0x46 then Goto 0x06e7

/ Branch if the target location is NOT the "curving e/w corridor below 
/ indicator lights" (0x44)
0x06d7 (0x1d75): (0x19) If var[0x58] != (constant) 0x44 then Goto 0x06e7

/ Current location IS the "curving e/w corridor beside a blue door" (0x46)
/ Target Location IS the "curving e/w corridor" (0x44)   

/ Branch if the player is in the black sector now (second colour)
/ - value will be less that ten as black (0x00) x 10 + <other colour> x 1
/ will be < 10
0x06db (0x1d79): (0x12) If var[0x5c] < var[0x72] then Goto 0x06e4

/ Player is NOT in the black sector (second colour)

/ Decrement the second colour by subtracting 10
0x06df (0x1d7d): (0x0b) Set var[0x5c] -= var[0x72]

/ Player continues to loop until they move to the black sector
0x06e2 (0x1d80): (0x00) Goto 0x06e7

/ Set the target destination to the "...curving e/w corridor south of 
/ a wide entrance..." (0x42) where the elevator is.
0x06e4 (0x1d82): (0x08) Set var[0x58] = (constant) 0x42

**************************************************************************
* Process the player moving from "curving e/w corridor beside a green door"
* (0x45) to "curving e/w corridor" (0x44) - instead move them to the elevator
* location (0x42)
**************************************************************************

/ When the player moves:
/ 
/ 1. From the "curving e/w corridor beside a green door" (0x45) to the 
/ "curving e/w corridor" (0x44), if they are in the white sector 
/ move them instead to "...curving e/w corridor south of 
/ a wide entrance..." (0x42) where the elevator is instead of moving 
/ to location 0x44. 
/
/ Remember that var[0x5c] = second colour x 10 + third colour x 1 

/ Branch if the current location is NOT "curving e/w corridor beside
/ a green door" (0x45)
0x06e7 (0x1d85): (0x19) If var[0x57] != (constant) 0x45 then Goto 0x06f6

/ Branch if the target location is NOT "curving e/w corridor below indicator
/ lights" (0x44)
0x06eb (0x1d89): (0x19) If var[0x58] != (constant) 0x44 then Goto 0x06f6

/ Current location IS the "curving e/w corridor beside a green door" (0x45)
/ Target Location IS the "curving e/w corridor" (0x44)   

/ Branch if the player is NOT in the white sector (second colour will be 
/ white (0x09) and have a value of 90 to 99) i.e. 9 x 10 + <third colour> x 1 
0x06ef (0x1d8d): (0x1a) If var[0x5c] < (constant) 0x5a then Goto 0x06f6

/ Player IS in the white sector

/ Set the target destination to the "...curving e/w corridor south of 
/ a wide entrance..." (0x42) where the elevator is instead of moving 
/ to location 0x44. 
0x06f3 (0x1d91): (0x08) Set var[0x58] = (constant) 0x42

**************************************************************************
* Process the player moving from "...curving e/w corridor south of 
* a wide entrance..." (0x42) where the elevator is to "curving e/w corridor 
* beside a green door" (0x45) - move the second colour from black to white
**************************************************************************

/ Branch if the current location is NOT "...curving e/w corridor south of 
/ a wide entrance..." (0x42) where the elevator is
0x06f6 (0x1d94): (0x19) If var[0x57] != (constant) 0x42 then Goto 0x0704

/ Branch if the target location is NOT "curving e/w corridor beside
/ a green door" (0x45)
0x06fa (0x1d98): (0x19) If var[0x58] != (constant) 0x45 then Goto 0x0704


/ Current location IS the "...curving e/w corridor south of a wide entrance..." (0x42)
/ where the elevator is
/ Target location IS the "curving e/w corridor beside a green door" (0x45)

/ Set the temporary variable to 90
0x06fe (0x1d9c): (0x08) Set var[0x73] = (constant) 0x5a

/ Add 90 to the second colour taking it from black (0x00) to white (0x09)
0x0701 (0x1d9f): (0x0a) Set var[0x5c] += var[0x73]

**************************************************************************

/ Branch if the current location is NOT  "in a blue glass elevator..."(0x3f)
0x0704 (0x1da2): (0x19) If var[0x57] != (constant) 0x3f then Goto 0x0713

/ Branch if the target location is NOT the "...curving e/w corridor south of 
/ a wide entrance..." (0x42) where the elevator is
0x0708 (0x1da6): (0x19) If var[0x58] != (constant) 0x42 then Goto 0x0713

/ Branch if the player pressed a non-black colour in the elevator (this 
/ will be set to that colour as it's the level colour the player is now on)
/ var[0x14] is the constant 0x00
0x070c (0x1daa): (0x13) If var[0x3f] > var[0x14] then Goto 0x0713

/ Player pressed black (0x00) so they get out of the mortuary loops

/ Set the player's target location to the "curving path with a 100m torus"
0x0710 (0x1dae): (0x08) Set var[0x58] = (constant) 0x37

**************************************************************************
* Process the player moving from the "...winding Transpex
* tube..." (0x34) to the "...winding Transpex tunnel..." (0x35) - 
* either increment the first colour (which freezer disk the player is in)
* or bump their nose on the door if they have reached white
**************************************************************************

/ Branch if the player's current location is NOT the "...winding Transpex
/ tube..." (0x34)
0x0713 (0x1db1): (0x19) If var[0x57] != (constant) 0x34 then Goto 0x0723

/ Branch if the player's target location is NOT the "...winding Transpex
/ tunnel..." (0x35)
0x0717 (0x1db5): (0x19) If var[0x58] != (constant) 0x35 then Goto 0x0723

/ Player is trying to move North from the "...winding Transpex
/ tube..." (0x34) to the "...winding Transpex tunnel..." (0x35)

/ Branch if the player's first colour for which mortuary passenger disk is white (0x09) 
/ - they cannot go North anymore and will bump their nose ont he door
0x071b (0x1db9): (0x1b) If var[0x5a] > (constant) 0x08 then Goto 0x187f

/ Player's first colour for which mortuary passenger disk is NOT white

/ Increment the colour of which mortuary passenger disk they are at (first colour)
0x0720 (0x1dbe): (0x0a) Set var[0x5a] += var[0x0c]

**************************************************************************
* Process the player moving from the "...winding Transpex tunnel..." (0x35)
* to the "...winding Transpex tube..." (0x34) to - 
* either decrement the first colour (which freezer disk the player is in)
* or set their target destination to the "...featureless cylindrical 
* airlock... "(0x99) if they are in the black mortuary freezer disk already
**************************************************************************

/ Branch if the player's current location is NOT the "...winding Transpex
/ tunnel..." (0x35)
0x0723 (0x1dc1): (0x19) If var[0x57] != (constant) 0x35 then Goto 0x0737

/ Branch if the player's target location is NOT the "...winding Transpex
/ tube..." (0x34)
0x0727 (0x1dc5): (0x19) If var[0x58] != (constant) 0x34 then Goto 0x0737

/ Branch if the player's first colour for which mortuary freezer disk 
/ is NOT black (0x00) they will continue to loop to the next colour
0x072b (0x1dc9): (0x13) If var[0x5a] > var[0x14] then Goto 0x0734

/ Player's first colour for which mortuary freezer disk IS Black

/ Heading South when the first colour is black takes the player to 
/ the "...featureless cylindrical airlock... "(0x99)

/ Set their destinatino to the "...featureless cylindrical airlock... "(0x99)
0x072f (0x1dcd): (0x08) Set var[0x58] = (constant) 0x99

/ Perform location checks
0x0732 (0x1dd0): (0x00) Goto 0x0737

/ Decrement the colour of which mortuary freezer disk they are at (first colour)
0x0734 (0x1dd2): (0x0b) Set var[0x5a] -= var[0x0c]

**************************************************************************
* Process if the player is in the blue or green mortuary and trying to go
* up through the trapdoor
**************************************************************************

/ Following happens:
/
/ 1. If the player is NOT standing on the coffin and going up, the trapdoor is too high
/ 2. If the player is standing on the coffin and going up, they will go through
/ the trapdoor
/ 3. If the player is on the brown level, they cannot go higher and will bump into a wall

/ Branch if the player's current location IS the "blue mortuary" (0x49)
0x0737 (0x1dd5): (0x18) If var[0x57] == (constant) 0x49 then Goto 0x073f

/ Player is NOT in the "blue mortuary" (0x49)

/ Branch if the player's current location is NOT the "green mortuary" (0x4a)
0x073b (0x1dd9): (0x19) If var[0x57] != (constant) 0x4a then Goto 0x076a

/ Player is in the blue or green mortuary}

/ Branch if the first word is NOT "up" (0x09)
0x073f (0x1ddd): (0x19) If var[0x29] != (constant) 0x09 then Goto 0x0759

/ Player is in the blue or green mortuary}and is trying to go "up"

/ Branch if the player IS standing on the coffin (0x01)
/ var[0x14] is the constant 0x01
0x0743 (0x1de1): (0x13) If var[0x05] > var[0x14] then Goto 0x074a

/ Print message  "The trapdoor's too high to reach unless you stand on something "
0x0747 (0x1de5): (0x05) Print message (constant) 0xb1

/ All done, player can't reach the trapdoor
0x0749 (0x1de7): (0x02) Return

**************************************************************************
* Player is standing on the coffin, process them going through the trapdoor
**************************************************************************

/ Branch if the player is in the brown (0x01) level (there is no trapdoor as the 
/ black level is no longer the mortuary) and bump into a wall
/ var[0x0c] is the constant 0x01
0x074a (0x1de8): (0x10) If var[0x3f] == var[0x0c] then Goto 0x187f

/ Player is NOT on the brown (0x01) level

/ Move the player to the next level (lower colour number) e.g.
/ Red (0x02) to Brown (0x01)
/ var[0x0c] is the constant 0x01
0x074f (0x1ded): (0x0b) Set var[0x3f] -= var[0x0c]

/ Set the third light colour (the level the player is on) to the next level
/ (lower colour number) e.g. Red (0x02) to Brown (0x01)
/ var[0x0c] is the constant 0x01
0x0752 (0x1df0): (0x0b) Set var[0x5c] -= var[0x0c]

/ Print message  "You scramble through a trapdoor "
0x0755 (0x1df3): (0x05) Print message (constant) 0xb2

/ Skip over the "down" processing as the player just went up
0x0757 (0x1df5): (0x00) Goto 0x076a

**************************************************************************
* Process if the player is in the blue or green mortuary and trying to go
* down through the trapdoor
**************************************************************************

/ Branch if the first word is NOT "down" (0x0a)
0x0759 (0x1df7): (0x19) If var[0x29] != (constant) 0x0a then Goto 0x076a

/ Branch if the player is on the white (0x09) level as they cannot go further down
0x075d (0x1dfb): (0x18) If var[0x3f] == (constant) 0x09 then Goto 0x187f

/ Move the player to the next level (higher colour number) e.g.
/ Brown (0x01) to Red (0x02)
/ var[0x0c] is the constant 0x01
0x0762 (0x1e00): (0x0a) Set var[0x3f] += var[0x0c]

/ Set the third light colour (the level the player is on) to the next level
/ (higher colour number) e.g. Brown (0x01) to Red (0x02)
/ var[0x0c] is the constant 0x01
0x0765 (0x1e03): (0x0a) Set var[0x5c] += var[0x0c]

/ Print message  "You scramble through a trapdoor "
0x0768 (0x1e06): (0x05) Print message (constant) 0xb2

**************************************************************************
* Process the player moving out of the coffin
**************************************************************************

/ Branch if the player's current location is NOT "in a coffin" (0xae)
0x076a (0x1e08): (0x19) If var[0x57] != (constant) 0xae then Goto 0x0778

/ Player IS in the coffin (0xae)

/ Branch if the coffin is still closed (0x00)
/ var[0x14] is the constant 0x00
0x076e (0x1e0c): (0x10) If var[0x35] == var[0x14] then Goto 0x187f

/ Print message  "The coffin slides away\n "
0x0773 (0x1e11): (0x05) Print message (constant) 0xdc

/ Set the last three coloured lights to the player's coffin starting
/ position
0x0775 (0x1e13): (0x09) Set var[0x46] = var[0x49]

**************************************************************************
* Process if the player has moved the nutrimat machine in the padded cell
**************************************************************************

/ Branch if the player's current location is NOT "in a padded cell"
0x0778 (0x1e16): (0x19) If var[0x57] != (constant) 0xb2 then Goto 0x0781

/ Player IS "in a padded cell"

/ Branch if the nutrimat machine has NOT been moved
/ var[0x0d] is the constant 0x01
0x077c (0x1e1a): (0x12) If var[0x43] < var[0x0d] then Goto 0x187f

/ Nutrimat machine HAS NOT been moved

**************************************************************************
* Process if the player is moving from the diner to the rubbish tip
**************************************************************************

/ Branch if the player's current location is NOT "in the diner..." (0x5b)
0x0781 (0x1e1f): (0x19) If var[0x57] != (constant) 0x5b then Goto 0x078b

/ Branch if the player's destintation is NOT the "rubbish tip" (0x61)
0x0785 (0x1e23): (0x19) If var[0x58] != (constant) 0x61 then Goto 0x078b

/ Player is moving from the "diner" (0x5b) to the "rubbish tip" (0x61)

/ Print message  "You slide down a garbage chute.. "
0x0789 (0x1e27): (0x05) Print message (constant) 0xfc

**************************************************************************
* Process if the robot is going to allow the player to move from 
* a "vast smooth-surfaced cylinder beside a contoured ramp" (0x4e) to 
* a  "a wide ramp to heavy plasteel door." (0x64) - only if they are
* wearing the elite status necklace
**************************************************************************

/ Branch if the player's current location is NOT "vast smooth-surfaced 
/ cylinder beside a contoured ramp" (0x4e)
0x078b (0x1e29): (0x19) If var[0x57] != (constant) 0x4e then Goto 0x07a9

/ Branch if the player's target location is NOT "a wide ramp to 
/ heavy plasteel door." (0x64)
0x078f (0x1e2d): (0x19) If var[0x58] != (constant) 0x64 then Goto 0x07a9

/ Print message  "A robot head pokes out "
0x0793 (0x1e31): (0x05) Print message (constant) 0xfa

/ Branch if the player IS wearing the elite status necklace
/ var[0x14] is the constant 0x00
0x0795 (0x1e33): (0x13) If var[0x4a] > var[0x14] then Goto 0x07a1

/ Player is NOT wearing the elite status necklace

/ Set the base cyclical message id to "BUG OFF, FLESHIE!" (0xfd)
0x0799 (0x1e37): (0x08) Set var[0x40] = (constant) 0xfd

/ Print one of the following cyclical messages:
/ 0xfd : "BUG OFF, FLESHIE!"
/ 0xfe : and retracts again with a snort of disgust
/ 0xff : "DROIDS ONLY!"
0x079c (0x1e3a): (0x01) Gosub 0x1916

/ Skip the message printing for the player wearing the elite status messages
0x079f (0x1e3d): (0x00) Goto 0x07a9

**************************************************************************

/ Print message  ""Greetings, Respected Citizen. You are most welcome!" "
0x07a1 (0x1e3f): (0x05) Print message (constant) 0xfb

/ Set the location door status to open (0x01) as the robot will let the
/ player pass by now 
/ var[0x0c] is the constant 0x01
0x07a3 (0x1e41): (0x09) Set var[0x16] = var[0x0c]

/ Perform additional location checks
0x07a6 (0x1e44): (0x00) Goto 0x1358

**************************************************************************

/ Branch if the player's current location is NOT " standing on smooth 
/ simrock on the side of a large tube" (0x4f)
0x07a9 (0x1e47): (0x19) If var[0x57] != (constant) 0x4f then Goto 0x07cc

/ Branch if the player's target location is NOT "in a large low room, 
/ surrounded by lights and vids" (0x53)
0x07ad (0x1e4b): (0x19) If var[0x58] != (constant) 0x53 then Goto 0x07cc

/ Branch if the player is NOT wearing the necklace (won't be carried down)
/ var[0x14] is the constant 0x00
0x07b1 (0x1e4f): (0x10) If var[0x4a] == var[0x14] then Goto 0x07ba

/ Print message  "You are carried down "
0x07b5 (0x1e53): (0x05) Print message (constant) 0x11a

/ Skip over the player falling through the open cyladder 
0x07b8 (0x1e56): (0x00) Goto 0x07cc

**************************************************************************
* Process player falling through the open cyladder
**************************************************************************

/ Branch if the scruffy robot IS "in a large low room, 
/ surrounded by lights and vids" (0x53) - this is at the bottom of the 
/ open cyladder so the robot has just gone down it
0x07ba (0x1e58): (0x18) If var[0x70] == (constant) 0x53 then Goto 0x07c2

/ Print message  "The cyladder rejects you "
0x07be (0x1e5c): (0x05) Print message (constant) 0x118

/ Player denied going down the cyladder
0x07c1 (0x1e5f): (0x02) Return

/ Robot has just descended the cyladder

/ Print message  "You fall through the open cyladder "
0x07c2 (0x1e60): (0x05) Print message (constant) 0x119

/ Set the score index into list#2 for falling through the open cyladder (0x108)
0x07c5 (0x1e63): (0x08) Set var[0x0b] = (constant) 0x108

/ Set the flag to mark this as scored
0x07c9 (0x1e67): (0xe2) Set list#2[var[0x0b]] = var[0x0c] (list address 0x169e)

**************************************************************************
* Process player going up the cyladder
**************************************************************************

/ Branch if the player's current location is NOT "in a large low room, 
/ surrounded by lights and vids" (0x53)
0x07cc (0x1e6a): (0x19) If var[0x57] != (constant) 0x53 then Goto 0x07d7

/ Branch if the player's target destination based on the direction they 
/ are moving in is " standing on smooth simrock on the side of a large tube" (0x4f)
0x07d0 (0x1e6e): (0x19) If var[0x58] != (constant) 0x4f then Goto 0x07d7

/ Player is moving from "in a large low room..." to "standing on a smooth
/ simrock..."

/ Print message  "You're carried up "
0x07d4 (0x1e72): (0x05) Print message (constant) 0x11b

**************************************************************************

/ Branch if the player's current location is NOT "on a ladder up the pylon" (0x26)
0x07d7 (0x1e75): (0x19) If var[0x57] != (constant) 0x26 then Goto 0x07e5

/ Player IS "on a ladder up the pylon" (0x26)

/ Branch if the destination is the "...shuttle platform..." (0x25)
0x07db (0x1e79): (0x18) If var[0x58] == (constant) 0x25 then Goto 0x07e5

/ Destination is NOT the "...shuttle platform..." so need to work which 
/ location they will arrive at when going down from the pylon.
/ The snowrail carriages are really just the same location (0x2e). So are the shuttle platforms 
/ (0x25) and "on a ladder on the pylon" (0x26) - what actually
/ changes is the value of var[0x59] which defines which location the player will 
/ move to when they move "down" from "on a ladder on the pylon" (0x26) which 
/ is the location beneath the shuttle platform.  Depending on which 
/ "station" the shuttle is at, the player can be taken one of the following:
/ 0x1a : on a flat snowfield north of an immense unclimbably smooth cliff. A pylon stands nearby
/ 0x1b : on trodden snow between a tall pylon and a hemidome calling itself the "Snowball Hilton"
/ 0x1c : on churned and rutted snow below a tall pylon
/ 0x1d : beside the northern ice-cliff which has a tiny cave at its base. A pylon stands nearby
/ 0x1e : on smooth snow beside a pylon, dwarfed by the north cliff
/ 0x1f : on trampled snow outside a major snowdesic dome. Brilliant light from an entrance split in the hemidome illuminates a nearby pylon
/ 0x20 : on smooth snow, beside one of a chain of pylons. A ladder leads up the pylon to a cabin
/ 0x21 : on soft snow outside a sagging warehouse. A dark plastic path leads from the warehouse to a nearby pylon
/ var[0x5a] contains this destination

/ Set the target destination down from the pylon to wherever they are in the 
/ shuttle platform loop
0x07df (0x1e7d): (0x09) Set var[0x58] = var[0x5a]

/ Reset the shuttle platform loop location to 0x00 (will get set again 
/ if they go up from any of the locations that takes the player to the pylon
/ var[0x14] is the constant 0x00
0x07e2 (0x1e80): (0x09) Set var[0x5a] = var[0x14]

**************************************************************************

/ Branch if the player's target destination is NOT "on a ladder on the 
/ pylon" (0x26)
0x07e5 (0x1e83): (0x19) If var[0x58] != (constant) 0x26 then Goto 0x07f0

/ Player IS trying to move to "on a ladder on the pylon" (0x26)

/ Branch if the player is trying to move to the pylon from the 
/ "shuttle platform" (0x25)
0x07e9 (0x1e87): (0x18) If var[0x57] == (constant) 0x25 then Goto 0x07f0

/ Player IS trying to move to "on a ladder on the pylon" (0x26)
/ from the "shuttle platform" (0x25)

/ Set where they are in the shuttle platform loop to the id of the
/ destination that they are moving from (player's current location)
0x07ed (0x1e8b): (0x09) Set var[0x5a] = var[0x57]

/ Branch if the supplementary message has NOT been set to "A massive
/ waldroid guards the ladder" (0x179)
0x07f0 (0x1e8e): (0x19) If var[0x60] != (constant) 0x179 then Goto 0x07fd

/ Branch if the player is NOT trying to move to "climbing Jacob's 
/ Ladder" (0x73)
0x07f5 (0x1e93): (0x19) If var[0x58] != (constant) 0x73 then Goto 0x07fd

/ Player IS trying to climb Jacob's ladder and waldroid is guarding it

/ Print message  "The robot blocks you "
0x07f9 (0x1e97): (0x05) Print message (constant) 0x17f

/ All done
0x07fc (0x1e9a): (0x02) Return

**************************************************************************
* Process the player trying to go up the slippery unclean ramp
**************************************************************************

/ Branch if the first supplementary message in this location is NOT set to 
/ "The ramp is coated in unislime" (0x15c) as the cat hasn't cleaned the ramp 
/ yet
0x07fd (0x1e9b): (0x19) If var[0x60] != (constant) 0x15c then Goto 0x080c

/ Ramp is slippery

/ Branch if the target destination is NOT up the ramp i.e. to "...a wide 
/ sloping ramp south of the red cylinder..." (0x7c)
0x0802 (0x1ea0): (0x19) If var[0x58] != (constant) 0x7c then Goto 0x080c

/ Ramp is slippery and player is trying to go up it

/ Print message  "You slip and fall "
0x0806 (0x1ea4): (0x05) Print message (constant) 0x180

/ Kill the player
0x0809 (0x1ea7): (0x00) Goto 0x133c

**************************************************************************
* Process the player trying to move passed the laser
**************************************************************************

/ Branch if the player's destination is NOT "at a junction in a north-south 
/ corridor" (0x82)
0x080c (0x1eaa): (0x19) If var[0x58] != (constant) 0x82 then Goto 0x081a

/ Player is trying to move past the laser to location (0x82)

/ Branch if the laser has been destroyed
0x0810 (0x1eae): (0x13) If var[0x3d] > var[0x14] then Goto 0x081a

/ Laser has NOT been destroyed

/ Print message  "A laser blast spears out "
0x0814 (0x1eb2): (0x05) Print message (constant) 0x181

/ Kill the player
0x0817 (0x1eb5): (0x00) Goto 0x133c

**************************************************************************
* Process the player trying to move to the instrument panel when the 
* flames are present
**************************************************************************

/ Branch if the player's destination is NOT "beside the main instrument 
/ panel" (0x84)
0x081a (0x1eb8): (0x19) If var[0x58] != (constant) 0x84 then Goto 0x0828

/ Player is trying to move to the instrument panel 

/ Branch if the petrol has been extinguished (this variable will be 
/ set to 0xff or higher)
0x081e (0x1ebc): (0x1b) If var[0x56] > (constant) 0x06 then Goto 0x0828

/ Petrol not extinguished

/ Print message  "Burning petrol engulfs you "
0x0822 (0x1ec0): (0x05) Print message (constant) 0x182

/ Kill the player
0x0825 (0x1ec3): (0x00) Goto 0x133c

**************************************************************************
* Process the player entering the spidroid hopper to move locations
**************************************************************************

/ Branch if the player's destination is NOT "the flexible bubble body 
/ of a spidroid" (0x9f)
0x0828 (0x1ec6): (0x19) If var[0x58] != (constant) 0x9f then Goto 0x083e

/ Player IS trying to move to the body of a spidroid
0x082c (0x1eca): (0x11) If var[0x28] != var[0x57] then Goto 0x187f

/ Print message  "You feel a surge of accelleration "
0x0831 (0x1ecf): (0x05) Print message (constant) 0x18f

/ Clever way of flipping between the two locations when using
/ the spidroid hopper. If 0xa0 is subtracted from 0x141 the  
/ location is 0xa1.  If 0xa1 is subtracted from 0x141 the location
/ is 0xa0.

/ Set the temporary variable to the 0x141
0x0834 (0x1ed2): (0x08) Set var[0x72] = (constant) 0x141

/ Subtract the current spidroid location id from it to get 
/ the other location id
0x0838 (0x1ed6): (0x0b) Set var[0x72] -= var[0x28]

/ Set the spidroid location to this new location id
0x083b (0x1ed9): (0x09) Set var[0x28] = var[0x72]

**************************************************************************  
* Set the player's destination to the spidroid hopper's location
**************************************************************************  

/ Branch if the player is NOT currently in the spidroid "hopper" (0x9f)
0x083e (0x1edc): (0x19) If var[0x57] != (constant) 0x9f then Goto 0x0845

/ Player IS in the spidroid "hopper"

/ Set the destination location to the location of the spidroid "hopper"
/ which would have been calculated when moving into the spidroid "hopper"
0x0842 (0x1ee0): (0x09) Set var[0x58] = var[0x28]

**************************************************************************  
* Process if the player is trying to enter the snowdozer
**************************************************************************  

/ Branch if the player's current location is NOT "on churned and rutted 
/ snow below a tall pylon" (0x1c)
0x0845 (0x1ee3): (0x19) If var[0x57] != (constant) 0x1c then Goto 0x0852

/ Player IS "on churned and rutted snow below a tall pylon" (0x1c)

/ Branch if the player's destination is NOT " in the high control bubble 
/ of the Snowdozer." (0x2f)
0x0849 (0x1ee7): (0x19) If var[0x58] != (constant) 0x2f then Goto 0x0852

/ Player IS trying to move to the snowdozer

/ BUG: this should be checking against the value held in var[0x0d]
/ which is the constant 0x02 which represents the empty string in the 
/ descriptions table. So the playing CAN get back into the snowdozer
/ even though it has moved on. Why not use the snowdozer status in var[0x1a]?
/
/ Branch if the supplementary message for the snowdozer being present is 
/ null as the snow dozer has moved off already.
/ var[0x14] is the constant 0x00
0x084d (0x1eeb): (0x10) If var[0x60] == var[0x14] then Goto 0x187f

**************************************************************************  
* Process if the player is trying to leave the snowdozer
**************************************************************************  

/ Branch if the player's current location is NOT " in the high control bubble 
/ of the Snowdozer." (0x2f)
0x0852 (0x1ef0): (0x19) If var[0x57] != (constant) 0x2f then Goto 0x0864

/ Player IS in the snowdozer

/ Branch if the player's destination is NOT "on churned and rutted 
/ snow below a tall pylon" (0x1c)
0x0856 (0x1ef4): (0x19) If var[0x58] != (constant) 0x1c then Goto 0x0864

/ Player is trying to leave the snowdozer

/ Branch if the snowdozer's status is:
/        0x00 - Initial state - broken track
/        0x01 - Snowdozer track welded/mended
/ var[0x0d] is the constant 0x02
0x085a (0x1ef8): (0x12) If var[0x1a] < var[0x0d] then Goto 0x0864

/ Keys are turned and snowdozer started

/ Print message  "The dozer lumbers off, pushing iceblocks into the hole
/ as it goes "
0x085e (0x1efc): (0x05) Print message (constant) 0x14f

/ Set the state of the snowdozer to:
/        0x03 - Started, lumbered off, pushing iceblocks
/ var[0x0e] is the constant 0x03
0x0861 (0x1eff): (0x09) Set var[0x1a] = var[0x0e]

/ Set the random direction to try if the player types "forwards", 
/ "backwards", "left" or "right" to the first word the player entered
/ WHY do this?!?! Just to further randomise it?
0x0864 (0x1f02): (0x09) Set var[0x18] = var[0x29]

/ Move the player, reset many things and print the location description
0x0867 (0x1f05): (0x00) Goto 0x134f

**************************************************************************  
* Command: "attack" or "kick" or "fight" or "kill" or "chop"
* or "hit" or "smash" or "cut"
**************************************************************************  

/ Process if the player typed e.g. "look on <object>" or "look under 
/ <object>" by converting it into "examine <object>". Not sure why this is
/ here for "attack" processing

/ Branch if the second word is NOT "look" (0x25)
0x086a (0x1f08): (0x19) If var[0x2a] != (constant) 0x25 then Goto 0x087d

/ Second word IS "look"

/ Set the first word to "examine" / "search "(0x23)
0x086e (0x1f0c): (0x08) Set var[0x29] = (constant) 0x23

/ Set the second word to the third word i.e. the object if specified
0x0871 (0x1f0f): (0x09) Set var[0x2a] = var[0x2b]

/ Set the cached first word (used for "again" processing) to 
/ "examine" / "search" (0x23)
0x0874 (0x1f12): (0x08) Set var[0x2d] = (constant) 0x23

/ Set the cached second word (used for "again" processing) to 
/ the object if specified
0x0877 (0x1f15): (0x09) Set var[0x2e] = var[0x2b]

/ Process the "examine" command
0x087a (0x1f18): (0x00) Goto 0x0fa5

**************************************************************************

/ Branch if the player's location is NOT "...a winding transpex tunnel..." (0x35)
0x087d (0x1f1b): (0x19) If var[0x57] != (constant) 0x35 then Goto 0x088a

/ Player IS at "...a winding transpex tunnel..." (0x35)

/ Print message  "You cut a gaping slash and the escaping air sucks you out! "
0x0881 (0x1f1f): (0x05) Print message (constant) 0x12f

/ Set the player's current location to "floating in space" (0x17)
0x0884 (0x1f22): (0x08) Set var[0x57] = (constant) 0x17

/ Print the location description
0x0887 (0x1f25): (0x00) Goto 0x01d4

**************************************************************************

/ Print message  "There's nothing to attack! "
0x088a (0x1f28): (0x05) Print message (constant) 0x44

/ All done
0x088c (0x1f2a): (0x02) Return

**************************************************************************
* Command: "inventory"
**************************************************************************

/ Print message  "You own "
0x088d (0x1f2b): (0x05) Print message (constant) 0x19

/ Set the contextual suffix for objects to the empty string
/ so nothing is accidentally print for objects in the inventory
0x088f (0x1f2d): (0x08) Set var[0x40] = (constant) 0x02

/ Set the target location to be the inventory (0xe1)
/ var[0x10] is the constant 0xe1
0x0892 (0x1f30): (0x09) Set var[0x58] = var[0x10]

/ Print all the objects in the inventory
0x0895 (0x1f33): (0x01) Gosub 0x1767

/ Update the number of carried items variable to what was 
/ counted in the sub-routine
0x0898 (0x1f36): (0x09) Set var[0x4d] = var[0x4f]

/ Check to see if the player has any objects in their inventory
/ if so skip ahead as the objects were printed above
/ (var[0x14] is the constant 0x00)
0x089b (0x1f39): (0x13) If var[0x4d] > var[0x14] then Goto 0x08a1

/ No items in the inventory so no object decriptions printed

/ Print message  "nothing.\n "
0x089f (0x1f3d): (0x05) Print message (constant) 0x3c

**************************************************************************
* Print what the player is wearing
**************************************************************************

/ Set the message id to the intro phrase "And you're wearing"
/ This will be printed before the first object
0x08a1 (0x1f3f): (0x08) Set var[0x40] = (constant) 0x1a

/ Set the location to check for and print objects to the 
/ wearing location (0xe2)
/ var[0x11] is the constant 0xe2
0x08a4 (0x1f42): (0x09) Set var[0x58] = var[0x11]

/ Print the objects the player is wearing with the 
/ prefix "And you're wearing" held in var[0x40]
0x08a7 (0x1f45): (0x01) Gosub 0x1767

/ Inventory command finished
0x08aa (0x1f48): (0x02) Return

**************************************************************************
* Command "listen" or "hear"
**************************************************************************

/ Print message  "You hear nothing extra "
0x08ab (0x1f49): (0x05) Print message (constant) 0x8d

/ Listen command complete
0x08ad (0x1f4b): (0x02) Return

**************************************************************************
* Command: "look"
**************************************************************************

/ Branch ahead a the depth of the player's dug hole is 0x00
/ var[0x14] is the constant 0x00
0x08ae (0x1f4c): (0x10) If var[0x26] == var[0x14] then Goto 0x08ba

/ Player has dug a hole so print a message about its depth

/ Set the default message id to the one before the hole depth messages (0xc0)
0x08b2 (0x1f50): (0x08) Set var[0x40] = (constant) 0xc0

/ Add the depth of the hole to the message id
0x08b5 (0x1f53): (0x0a) Set var[0x40] += var[0x26]

/ Print one of the following messages:
/ 0xc1 : You're in a tiny hole
/ 0xc2 : You're in a large hole
/ 0xc3 : You're at the bottom of a deep pit
/ 0xc4 : The bottom of the hole collapses. You fall into space!
0x08b8 (0x1f56): (0x04) Print message var[0x40]

/ Print the location description or say it's dark
0x08ba (0x1f58): (0x00) Goto 0x01d4

**************************************************************************
* Command: "plugh" or "plover" or "sesame" or "xyzzy" or "agaliarept"
**************************************************************************

/ Print message  "\nA psychobot taps you on the shoulder. "Ahem. Your 
/ behaviour patterns seem irrational". You feel a hypo.. Then nothing "
0x08bd (0x1f5b): (0x05) Print message (constant) 0x8e

/ Set the target location to mov the player to to "in a padded cell. 
/ The walls are lined by Tuffkwilt (TM) padding..." location (0xb2) 
0x08bf (0x1f5d): (0x08) Set var[0x58] = (constant) 0xb2

/ Set the freezer disk first colour to black
0x08c2 (0x1f60): (0x09) Set var[0x5a] = var[0x14]

/ Set the freezer disk second / third colours to black
0x08c5 (0x1f63): (0x09) Set var[0x5c] = var[0x14]

/ Move the player, reset many things and print the location description
0x08c8 (0x1f66): (0x00) Goto 0x134f

**************************************************************************
* Command: "quit"
**************************************************************************

/ Set the message to display to "Really stop?" (0x35)
0x08cb (0x1f69): (0x08) Set var[0x40] = (constant) 0x35

/ Print the message and get the user response
0x08ce (0x1f6c): (0x01) Gosub 0x1737

/ Branch and quit if the user said yes (0x01)
/ var[0x14] is the constant 0x00
0x08d1 (0x1f6f): (0x13) If var[0x7b] > var[0x14] then Goto 0x133f

/ Print message  "I didn't think you meant it "
0x08d6 (0x1f74): (0x05) Print message (constant) 0x8f

/ Back to the game
0x08d8 (0x1f76): (0x02) Return

**************************************************************************
* Command: "restore"
* Ask if the player really wants to restore and process response
**************************************************************************

/ Set the temporary message id to "Really restore?" (0x37)
0x08d9 (0x1f77): (0x08) Set var[0x40] = (constant) 0x37

/ Print the message and get the user response
0x08dc (0x1f7a): (0x01) Gosub 0x1737

/ Branch and quit if the user said yes (0x01)
/ var[0x14] is the constant 0x00
0x08df (0x1f7d): (0x13) If var[0x7b] > var[0x14] then Goto 0x08e6

/ Print message  "I didn't think you meant it "
0x08e3 (0x1f81): (0x05) Print message (constant) 0x8f

/ Back to the game
0x08e5 (0x1f83): (0x02) Return

**************************************************************************
* Restore the game
**************************************************************************

/ Restore from the save game
0x08e6 (0x1f84): (0x06) Function - Restore (0x04)

/ Print the location description or "it's dark"
0x08e8 (0x1f86): (0x00) Goto 0x01d4

**************************************************************************
* Unused code
**************************************************************************

/ NOTE Isn't called by anything...
0x08eb (0x1f89): (0x02) Return

**************************************************************************
* Command: "save"
* Save the game
**************************************************************************

/ Call the save game function
0x08ec (0x1f8a): (0x06) Function - Save (0x03)

/ Print the location description or "it's dark"
0x08ee (0x1f8c): (0x00) Goto 0x01d4

**************************************************************************
* Print "I didn't expect that!"
**************************************************************************

/ Print message  "I didn't expect you to say that! "
0x08f1 (0x1f8f): (0x05) Print message (constant) 0x90

/ All done
0x08f3 (0x1f91): (0x02) Return

**************************************************************************
* Command: "score"
* Print player's score 
**************************************************************************

/ Set the score to zero
/ var[0x14] is the constant 0x00
0x08f4 (0x1f92): (0x09) Set var[0x64] = var[0x14]

/ Score increment is 50 (0x32)
0x08f7 (0x1f95): (0x08) Set var[0x72] = (constant) 0x32

/ Points are awarded for the following in the game when set to 0x01 
/ in list#2 (first number is the list index)
/
/ 0x105 - Pulling the lever in the coffin in the first location
/ 0x106 - Pressing three buttons to reveal a coffin to climb up it to escape the nightingale
/ 0x107 - Reaching "a significant cylindrical ledge..." (0x33)
/ 0x108 - Falling through the open cyladder after the scruffy robot descends
/ 0x109 - The first time the player looks wears the visor, examines a number and blinks
/ 0x10a - Examining the video viewer when the mempak is inserted and getting the coffin codes
/ 0x10b - Inserting the cup into the "natural wholefood no chemicals" machine to get the think lentil custard
/ 0x10c - Giving the bumble bearing to the damaged janitor droid
/ 0x10d - When the revivial machine grabs and opens the frozen coffin to reveal the crewmember
/ 0x10e - Giving the revived crewmember from the frozen coffin liquid
/ 0x10f - Pressing the button in the monorail shuttle to move to the next station
/ 0x110 - Opening the security door with the combination code given by the revived crewmember
/ 0x111 - Attaching the flask to the helmet, recharging its air
/ 0x112 - Welding the snowdozer's track to mend it
/ 0x113 - Turning the keys in the high control bubble of the Snowdozer
/ 0x114 - Being massaged by the comfortable couch in the "massage parlour" after waiting one turn/command
/ 0x115 - When the cat is dropped to clean the unislime from the ramp 
/ 0x116 - Waving the tray to reflect the laser beam back on itself and making it explode
/ 0x117 - Playng the flute to shatter the petrol bomb close to the end of the game
/ 0x118 - Pulling the red lever on the main instrument panel at the end of the game

/ Set the starting index to the first item scoring index in list#2
0x08fa (0x1f98): (0x08) Set var[0x1b] = (constant) 0x105    

/ Get the value of the scoring item
0x08fe (0x1f9c): (0xa2) Set var[0x1c] = list#2[var[0x1b]] (list address 0x169e)

/ Branch to increment the index to the next item if this item was not scored (0x00)
/ var[0x14] is the constant 0x00
0x0901 (0x1f9f): (0x10) If var[0x1c] == var[0x14] then Goto 0x0908

/ Item was scored

/ Add 50 to the score 
0x0905 (0x1fa3): (0x0a) Set var[0x64] += var[0x72]

/ Increment the scoring item index
0x0908 (0x1fa6): (0x0a) Set var[0x1b] += var[0x0c]

/ Loop until all scoring items have been processed
0x090b (0x1fa9): (0x1a) If var[0x1b] < (constant) 0x119 then Goto 0x08fe

/ Print message  "You scored "
0x0910 (0x1fae): (0x05) Print message (constant) 0x39

/ Print the player's score
0x0912 (0x1fb0): (0x03) Print Number var[0x64]

/ Print message  "out of 1000 "
0x0914 (0x1fb2): (0x05) Print message (constant) 0x3a

/ Score printed
0x0916 (0x1fb4): (0x02) Return

**************************************************************************
* Command: "wait"
**************************************************************************

/ Print message  "Time passes "
0x0917 (0x1fb5): (0x05) Print message (constant) 0x91

/ Set the inner loop counter to 0x00
/ var[0x14] is the constant 0x00
0x0919 (0x1fb7): (0x09) Set var[0x72] = var[0x14]

/ Set the outer loop counter to 0x00
/ var[0x14] is the constant 0x00
0x091c (0x1fba): (0x09) Set var[0x73] = var[0x14]

/ Add one to the inner loop counter 
0x091f (0x1fbd): (0x0a) Set var[0x73] += var[0x0c]

/ Loop until the inner loop counter reaches 1,000 (0x3e8)
0x0922 (0x1fc0): (0x1a) If var[0x73] < (constant) 0x3e8 then Goto 0x091f

/ Print a dot after the inner loop counter reaches 1,000

/ Print message  ". "
0x0927 (0x1fc5): (0x05) Print message (constant) 0x04

/ Increment the outer loop counter
0x0929 (0x1fc7): (0x0a) Set var[0x72] += var[0x0c]

/ Loop 6 times to delay and print a dot 
0x092c (0x1fca): (0x1a) If var[0x72] < (constant) 0x06 then Goto 0x091c

/ Wait complete
0x0930 (0x1fce): (0x02) Return

**************************************************************************
* Command: "give" or "feed" or "pay"
**************************************************************************

/ Note that the current location var[0x57] and target location var[0x58]
/ will be set to the player's current location

/ Check that the object in the second word var[0x2a] is in the player's
/ inventory or being worn by the player - will not return if it's invalid or the 
/ player does not have or is not wearing the object
0x0931 (0x1fcf): (0x01) Gosub 0x1867

/ Set the flag the indicates whether an NPC was in the location 
/ and accepted the item (either a faceless android or the crew-member or
/ or damaged janitor droid). Used to determine whether to print "There's
/ no one to give it to ".  Initially set to "not given to an NPC 
/ and accepted" (0x00)
/ var[0x14] is the constant 0x00
0x0934 (0x1fd2): (0x09) Set var[0x4e] = var[0x14]

**************************************************************************
* Process red / green ticket checks for the two faceless androids
**************************************************************************

/ Red ticket (0x79) only works at location "a wide counter staffed 
/ by a faceless android" (0x66)
/ Green ticket (0x7a) only works at location "a small counter staffed 
/ by a faceless android" (0x67)

/ Branch if the player's current location IS "at a small counter staffed by 
/ a faceless android" (0x66)
0x0937 (0x1fd5): (0x18) If var[0x58] == (constant) 0x66 then Goto 0x093f

/ Branch if the player's current location is NOT "at a wide counter staffed 
/ by a faceless android" (0x67)
0x093b (0x1fd9): (0x19) If var[0x58] != (constant) 0x67 then Goto 0x09a4

/ Location is either "at a small counter staffed by a faceless android" 
/ or "at a wide counter staffed by a faceless android" 

/ Branch if the second word is "a debt card" (0x5d)
0x093f (0x1fdd): (0x18) If var[0x2a] == (constant) 0x5d then Goto 0x1265

/ Branch if the second word is NOT the red ticket (0x79) or green ticket (0x7a) 
0x0944 (0x1fe2): (0x1a) If var[0x2a] < (constant) 0x79 then Goto 0x096e

/ Branch if the second word is NOT the red ticket (0x79) or green ticket (0x7a) 
0x0949 (0x1fe7): (0x1b) If var[0x2a] > (constant) 0x7a then Goto 0x096e

/ Object is the red or green ticket

/ Branch if the target (current) location is "at a small counter staffed by 
/ a faceless android" (0x66) 
0x094e (0x1fec): (0x18) If var[0x58] == (constant) 0x66 then Goto 0x095d

/ Location is "at a wide counter staffed by a faceless android" (0x67)

/ Branch if the player is NOT giving the "red ticket" (0x79) and print 
/ "Huh! No good to me!"
0x0952 (0x1ff0): (0x19) If var[0x2a] != (constant) 0x79 then Goto 0x0961

/ Player is giving the red ticket in location "at a wide counter 
/ staffed by a faceless android" (0x67)

/ Print message  ""OK, take something" "
0x0956 (0x1ff4): (0x05) Print message (constant) 0xde

/ Increment the number of active red tickets each of which allows the
/ player to take an item
0x0958 (0x1ff6): (0x0a) Set var[0x69] += var[0x0c]

/ Continue rest of checks
0x095b (0x1ff9): (0x00) Goto 0x0969

/ Player is "at a small counter...." (0x67) 

/ Branch if the second word IS the green ticket (0x7a) and print
/ "OK, take something"
0x095d (0x1ffb): (0x18) If var[0x2a] == (constant) 0x7a then Goto 0x0964

/ Player is giving the wrong ticket to the one of the faceless androids

/ Print message  ""Huh! No good to me!" "
0x0961 (0x1fff): (0x05) Print message (constant) 0xe8

/ Faceless android (either) doesn't want the item
0x0963 (0x2001): (0x02) Return

/ Print message  ""OK, take something" "
0x0964 (0x2002): (0x05) Print message (constant) 0xde

/ Increment the number of green tickets each of which allows the
/ player to take an item
0x0966 (0x2004): (0x0a) Set var[0x6a] += var[0x0c]

/ Set the flag that indicates if a player has or is wearing an item
0x0969 (0x2007): (0x09) Set var[0x4e] = var[0x0c]

/ Continue performing the rest of the checks for give/feed/pay
0x096c (0x200a): (0x00) Goto 0x09a4

**************************************************************************

/ Player is NOT giving the red (0x79) or green ticket (0x7a) and is 
/ in location "at a small counter staffed by a faceless android" 
/ (0x66) or "at a wide counter staffed by a faceless android" (0x67)

/ Branch if the second word is NOT a red form (0x66), an orange form (0x67),
/ a green form (0x68) or a green form (0x69)
0x096e (0x200c): (0x1a) If var[0x2a] < (constant) 0x66 then Goto 0x1273
0x0973 (0x2011): (0x1b) If var[0x2a] > (constant) 0x69 then Goto 0x1273

/ Second word IS a red form (0x66), an orange form (0x67),
/ a green form (0x68) or a green form (0x69)

/ Branch if the player's current location IS "at a wide counter 
/ staffed by a faceless android" (0x67)
0x0978 (0x2016): (0x18) If var[0x58] == (constant) 0x67 then Goto 0x0986

/ Location is "at a small counter staffed by a faceless android" (0x67)

/ Branch if the second word is the red form (0x66)
0x097c (0x201a): (0x18) If var[0x2a] == (constant) 0x66 then Goto 0x098e

/ Branch if the second word is the yellow form (0x68)
0x0980 (0x201e): (0x18) If var[0x2a] == (constant) 0x68 then Goto 0x098e

/ Form is either orange (0x67) or green (0x69) and player is "at a small 
/ counter staffed by a faceless android" (0x66) 

/ Go and print "Huh! no good to me"
0x0984 (0x2022): (0x00) Goto 0x09a1

**************************************************************************

/ Player's current location is "at a wide counter 
/ staffed by a faceless android" (0x67)

/ Branch if the player is giving the red form (0x66) and print "Huh!
/ No good to me" (can only be used at the small counter)
0x0986 (0x2024): (0x18) If var[0x2a] == (constant) 0x66 then Goto 0x09a1

/ Branch if the player is giving the yellow form (0x68) and print "Huh!
/ No good to me"
0x098a (0x2028): (0x18) If var[0x2a] == (constant) 0x68 then Goto 0x09a1

/ Player is given the orange (0x67) or green (0x69) form - android
/ at location (0x67) accepts it 

/ Print message  ""Spose I could let you have something.." "
0x098e (0x202c): (0x05) Print message (constant) 0xe9

/ Set the "colour of the next form the player can take" to the 
/ colour form they just handed in
0x0990 (0x202e): (0x09) Set var[0x22] = var[0x2a]

/ Add one to the form's dictionary id to allow the player to pick up
/ the next coloured form
/ var[0x0c] is the constant 0x01
0x0993 (0x2031): (0x0a) Set var[0x22] += var[0x0c]

/ Branch if the player still has more forms to process and return 
/ this form to its default location (or remove from the game 
/ any other object)
0x0996 (0x2034): (0x1a) If var[0x22] < (constant) 0x6a then Goto 0x180e

/ Player has processed all the forms 

/ Set the "colour of the next form the player can take" to a high
/ value (0xff) to allow the player to pick up the lance
0x099b (0x2039): (0x09) Set var[0x22] = var[0x13]

/ Set the location of the object to the location id for out of the game (0xff)
/ or default back to their initial location e.g. if a form or ticket
0x099e (0x203c): (0x00) Goto 0x180e

**************************************************************************

/ Print message  ""Huh! No good to me!" "
0x09a1 (0x203f): (0x05) Print message (constant) 0xe8

/ Faceless android did not want the form
0x09a3 (0x2041): (0x02) Return

**************************************************************************
* Perform damanged janitor droid checks against the part its been given
**************************************************************************

/ Branch if the player's location is NOT " on a rubbish tip" (0x61)
0x09a4 (0x2042): (0x19) If var[0x58] != (constant) 0x61 then Goto 0x09ce

/ Branch if the robot is already mended (0x01) or dead (0xff)
0x09a8 (0x2046): (0x13) If var[0x6b] > var[0x14] then Goto 0x09ce

/ Print message  "The robot tries it in place: "
0x09ac (0x204a): (0x05) Print message (constant) 0xee

0x09ae (0x204c): (0x01) Gosub 0x180e

/ Branch if the item the player is giving to the robot (which is the
/ second recognised word) matches the item that it needs (held in var[0x6c])
0x09b1 (0x204f): (0x10) If var[0x2a] == var[0x6c] then Goto 0x09bb

/ Item does NOT match - wrong spare part

/ Print message  "GRAUNCH! ZZZAP! hiss.. "
0x09b5 (0x2053): (0x05) Print message (constant) 0xf0

/ Set the status of the robot to dead (0xff)
/ var[0x13] is the constant 0xff
0x09b7 (0x2055): (0x09) Set var[0x6b] = var[0x13]

/ Robot is dead
0x09ba (0x2058): (0x02) Return

/ Print message  "it's OK. The droid is mended! It rummages around for a 
/ reward to give you, then bounces away "   
0x09bb (0x2059): (0x05) Print message (constant) 0xef

/ Set the status of the damanged janitor droid to mended (0x01)
/ var[0x0c] is the constant 0x01
0x09bd (0x205b): (0x09) Set var[0x6b] = var[0x0c]

/ Set the second word (object) to the battered bubble helmet (0x55)
0x09c0 (0x205e): (0x08) Set var[0x2a] = (constant) 0x55

/ Add the battered bubble helmet to the player's inventory
0x09c3 (0x2061): (0x01) Gosub 0x140b

/ Set the score index into list#2 for mending the droid (0x10c)
0x09c6 (0x2064): (0x08) Set var[0x0b] = (constant) 0x10c

/ Set the flag to mark this as scored
/ var[0x0c] is the constant 0x01
0x09ca (0x2068): (0xe2) Set list#2[var[0x0b]] = var[0x0c] (list address 0x169e)

/ Droid mended
0x09cd (0x206b): (0x02) Return

**************************************************************************

/ Branch if the supplementary message is NOT "The coffin holding the 
/ crewmember is held in place" (0x142) - used as a status check to see
/ if the coffin has been grabbed
0x09ce (0x206c): (0x19) If var[0x60] != (constant) 0x142 then Goto 0x09f6

/ Branch if the player is NOT giving the liquid/water (0x60) and 
/ print "Don't be silly!"
0x09d3 (0x2071): (0x19) If var[0x2a] != (constant) 0x60 then Goto 0x18cf

/ Branch if the status of the cup is empty (0x00) and say "Don't be
/ silly"
/ var[0x14] is the constant 0x00
0x09d8 (0x2076): (0x10) If var[0x6e] == var[0x14] then Goto 0x18cf

/ Coffin is being held in place, cup is full and player is 
/ giving the liquid/water

/ Set the status of the coffin / crew member to fully revived (0x02)
/ as the value at this point will always be 0x01    
/ var[0x0c] is the constant 0x01
0x09dd (0x207b): (0x0a) Set var[0x37] += var[0x0c]

/ Print message  "She drinks it gratefully. Apparently you should visit 
/ the habidome whose code is "
0x09e0 (0x207e): (0x05) Print message (constant) 0x146

/ Set the temporary variable to the randomly generated security door code
0x09e3 (0x2081): (0x09) Set var[0x72] = var[0x38]

/ Set the format of the door code to three colours 
0x09e6 (0x2084): (0x08) Set var[0x73] = (constant) 0x65

/ Set the temporary variable to indicate that the crew-member has drunk
/ from the cup (0x01)
/ var[0x0c] is the constant 0x01
0x09e9 (0x2087): (0x09) Set var[0x4e] = var[0x0c]

/ Print the 3 habidome security door code colours  
0x09ec (0x208a): (0x01) Gosub 0x165a

/ Set the score index into list#2 for reviving the crew member (0x10e)
0x09ef (0x208d): (0x08) Set var[0x0b] = (constant) 0x10e

/ Set the flag to mark this as scored
0x09f3 (0x2091): (0xe2) Set list#2[var[0x0b]] = var[0x0c] (list address 0x169e)

/ Branch if the crew-member has NOT drunk from the cup (0x00)
/ var[0x0c] is the constant 0x01
0x09f6 (0x2094): (0x10) If var[0x4e] == var[0x14] then Goto 0x09fd

/ Remove the cup full of liquid from the game
0x09fa (0x2098): (0x00) Goto 0x180e

**************************************************************************

/ Print message  "There's no one to give it to "
0x09fd (0x209b): (0x05) Print message (constant) 0x92

/ No one to give it to
0x09ff (0x209d): (0x02) Return

**************************************************************************
* Command: "get" or "take" or "carry"
**************************************************************************

/ Additional checks for the coffin

/ Branch if the second word is NOT the "coffin" (0x5f)
0x0a00 (0x209e): (0x19) If var[0x2a] != (constant) 0x5f then Goto 0x0a0e

/ Second word IS the coffin - perform two additional checks 

/ Branch if the coffin containing the frozen crew member 
/ has already been grabbed by the revival machine and print "You can't do that"
/ var[0x14] is the constant 0x00
0x0a04 (0x20a2): (0x13) If var[0x37] > var[0x14] then Goto 0x18ca

/ Branch if the player is standing on the freezer coffin (0x01) and 
/ print "don't be silly"
/ var[0x14] is the constant 0x00
0x0a09 (0x20a7): (0x13) If var[0x05] > var[0x14] then Goto 0x18cf

**************************************************************************

/ Check to see if the object is in the location passed in var[0x58]
/ and the second and third object references match the player's 
/ first, second and third freezer disk lights (or defaults outside)
/ In this instance var[0x58] will be the player's current position
0x0a0e (0x20ac): (0x01) Gosub 0x15f0

/ Branch if the object is in the player's current position (0x01)
/ and check if the player can pick it up
/ var[0x14] is the constant 0x00
0x0a11 (0x20af): (0x13) If var[0x4e] > var[0x14] then Goto 0x0a2c

/ Branch if the player is wearing the object (0xe2) and put it in 
/ their inventory
/ var[0x11] is the constant 0xe2
0x0a15 (0x20b3): (0x10) If var[0x1c] == var[0x11] then Goto 0x140b

/ Branch if the player has the object in their inventory (0xe1) 
/ and print that they already have it
/ var[0x10] is the constant 0xe1
0x0a1a (0x20b8): (0x10) If var[0x1c] == var[0x10] then Goto 0x0a27

/ Branch if the second word is NOT a valid object and print
/ "You can't do that"
/ Objects have ids from 0x50 to 0x8b
0x0a1e (0x20bc): (0x1b) If var[0x2a] > (constant) 0x8b then Goto 0x18ca

/ Print message  "You can't see "
0x0a23 (0x20c1): (0x05) Print message (constant) 0x29

/ Skip ahead and then print the name of the object in the second word the player entered
0x0a25 (0x20c3): (0x00) Goto 0x0a29

/ Print message  "You already have "
0x0a27 (0x20c5): (0x05) Print message (constant) 0x2b

/ Print the name of the object in the second word the player entered
0x0a29 (0x20c7): (0x04) Print message var[0x2a]

/ Player already has or can't see the object
0x0a2b (0x20c9): (0x02) Return

**************************************************************************
* Check to see if the player can pick up an item "at a wide counter 
* staffed by a faceless android"
**************************************************************************

/ Branch if the current location is NOT "at a wide counter staffed by a 
/ faceless android" (0x67)
0x0a2c (0x20ca): (0x19) If var[0x58] != (constant) 0x67 then Goto 0x0a37

/ Branch if the player has at least one active red ticket
0x0a30 (0x20ce): (0x13) If var[0x69] > var[0x14] then Goto 0x0a37

/ No active red tickets

/ Print message  ""I say! Where's your red ticket?" "
0x0a34 (0x20d2): (0x05) Print message (constant) 0xdf

/ Player can't take the item
0x0a36 (0x20d4): (0x02) Return

**************************************************************************
* Check to see if the player can pick up an item "at a small counter 
* staffed by a faceless android"
**************************************************************************

/ Branch if the current location is NOT "at a small counter staffed by a 
/ faceless android" (0x67)
0x0a37 (0x20d5): (0x19) If var[0x58] != (constant) 0x66 then Goto 0x0a42

/ No active green tickets

/ Branch if the player has at least one active green ticket
0x0a3b (0x20d9): (0x13) If var[0x6a] > var[0x14] then Goto 0x0a42

/ Print message  ""Not so fast, Citizen. Hand over a green ticket!" "
0x0a3f (0x20dd): (0x05) Print message (constant) 0xe0

/ Player can't take the item
0x0a41 (0x20df): (0x02) Return

**************************************************************************

/ Branch if the second word is the lance (0x6e)
0x0a42 (0x20e0): (0x18) If var[0x2a] == (constant) 0x6e then Goto 0x0a4e

/ Object is NOT the lance (0x6e)

/ Branch if the player is not picking up any of the following:
/ 0x66: red form
/ 0x67: orange form
/ 0x68: yellow form
/ 0x69: green form
0x0a46 (0x20e4): (0x1a) If var[0x2a] < (constant) 0x66 then Goto 0x0a5a

/ Branch if the player is not picking up any of the following:
/ 0x66: red form
/ 0x67: orange form
/ 0x68: yellow form
/ 0x69: green form
0x0a4a (0x20e8): (0x1b) If var[0x2a] > (constant) 0x69 then Goto 0x0a5a

/ Player is picking up any of the forms or the lance

/ Branch if the next form value is less than the dictionary id of the item
/ the player is trying to pickup, tell them they are NOT authorised
/ This forces the player to pick up the forms in order before getting the 
/ the lance so red -> orange -> yellow -> green -> lance.
/ Next form value is set to 0xff when the green form is handed in OR 
/ if the debt card is given to either of the faceless androids
0x0a4e (0x20ec): (0x12) If var[0x22] < var[0x2a] then Goto 0x0a54

/ Player is allowed to pick up the form
0x0a52 (0x20f0): (0x00) Goto 0x0a5a

**************************************************************************

/ Set the base message to be "Oi! Where's your authorisation form 
/ for that?" (0xe5)
0x0a54 (0x20f2): (0x08) Set var[0x40] = (constant) 0xe5

/ Call the routine that cycles the messages between so that 
/ any message between 0x23 - 0x25 is shown. Options are:
/ 1. "Oi! Where's your authorisation form for that?" (0xe5)
/ 2. The robot snarls and grabs it back. You need the right form  (0xe6)
/ 3. The robot blocks you: "Present your authorisation first!" (0xe7)
/ Message is chosen based on the value of var[0x41] that cycles through
/ 0-2 everytime the routine is called (not just here)
0x0a57 (0x20f5): (0x00) Goto 0x1916

**************************************************************************

/ Branch if the second word that the player input is NOT the battery pack (0x5b)
0x0a5a (0x20f8): (0x19) If var[0x2a] != (constant) 0x5b then Goto 0x0a74

/ Second word IS the battery pack

/ Get the current location of the battery pack 
0x0a5e (0x20fc): (0xa2) Set var[0x1c] = list#2[var[0x2a]] (list address 0x169e)

/ 0xc5 is a special location that the player cannot reach - it represents
/ inside the video viewer and it's the initial location for the batpack 
/ and the location where the mempak viewer will go once inserted into the 
/ video viewer. It has no defined location description other than ""

/ Branch if the battery pack IS inside the video viewer - let the player take it
0x0a61 (0x20ff): (0x18) If var[0x1c] == (constant) 0xc5 then Goto 0x0a69

/ 0xc6 is a special location that the player cannot reach - it represents
/ inside the lamp and it's where the batpack ends up when inserted into the lamp

/ Branch if the battery pack location is NOT "on a great pile of garbage" (0xc6)
/ This is a DIFFERENT location to one that's navigable "on a great pile of 
/ garbage" (0x62) and this location cannot be navigated to
0x0a65 (0x2103): (0x19) If var[0x1c] != (constant) 0xc6 then Goto 0x0a74

/ Check to see if the player has the screwdriver (0x01) or not (0x00)
/ Branch if the player has the screwdriver
/ var[0x14] is the constant 0x00
0x0a69 (0x2107): (0x13) If var[0x66] > var[0x14] then Goto 0x0a71

/ Print message  "The battery's deep inside, you can't get a grip "
0x0a6d (0x210b): (0x05) Print message (constant) 0x11d

/ Player cannot get the battery pack
0x0a70 (0x210e): (0x02) Return

**************************************************************************

/ Print message  "You lever it out with the screwdriver "
0x0a71 (0x210f): (0x05) Print message (constant) 0x11c

/ Branch if the player has space in their inventory and add the 
/ battery pack to their inventory (won't return here as it's a goto
/ not a gosub)
0x0a74 (0x2112): (0x12) If var[0x4d] < var[0x50] then Goto 0x140b

/ No space in the player's inventory

/ Print message  "You're carrying too much to take "
0x0a79 (0x2117): (0x05) Print message (constant) 0x2f

/ Print the name of the object
0x0a7b (0x2119): (0x04) Print message var[0x2a]

/ Print the location description
0x0a7d (0x211b): (0x00) Goto 0x01d4

**************************************************************************
* Command: "drop" or "put"
**************************************************************************

/ Check that the object in the second word var[0x2a] is in the player's
/ inventory or being worn by the player - will not return if it's invalid or the 
/ player does not have or is not wearing the object.  Will set var[0x4e] to
/ 0x01 if the object is worn or in the player's inventory
0x0a80 (0x211e): (0x01) Gosub 0x1867

/ Drop the object
0x0a83 (0x2121): (0x00) Goto 0x143e

**************************************************************************
* Command: "wear"
**************************************************************************

/ Get the current location of the object and also determine if the 
/ object is in the player's current location
0x0a86 (0x2124): (0x01) Gosub 0x15f0

/ Branch if the object is being worn already by the player (0xe2)
/ var[0x11] is the constant 0xe2
0x0a89 (0x2127): (0x10) If var[0x1c] == var[0x11] then Goto 0x0a97

/ Object is NOT in the player's inventory

/ Branch if the object IS in the player's current location 
/ var[0x14] is the constant 0x01
0x0a8d (0x212b): (0x13) If var[0x4e] > var[0x14] then Goto 0x0a94

/ Object is NOT in the player's inventory AND is NOT in the player's 
/ current location

/ Check that the object in the second word var[0x2a] is in the player's
/ inventory (we know they are not wearing it from above) - will not 
/ return if it's invalid or not in the player's inventory.  Will set var[0x4e] 
/ to 0x01 if it is in the player's inventory
0x0a91 (0x212f): (0x01) Gosub 0x1867

/ Move the object's location to being worn
0x0a94 (0x2132): (0x00) Goto 0x1423

**************************************************************************

/ Player is already wearing the object

/ Print message  "You already have "
0x0a97 (0x2135): (0x05) Print message (constant) 0x2b

/ Print the name of the object
0x0a99 (0x2137): (0x04) Print message var[0x2a]

/ All done
0x0a9b (0x2139): (0x02) Return

**************************************************************************
* Command: "throw" or "hurl"
**************************************************************************

/ Check that the object in the second word var[0x2a] is in the player's
/ inventory or being worn by the player - will not return if it's invalid or the 
/ player does not have or is not wearing the object.  Will set var[0x4e] to
/ 0x01 if the object is worn or in the player's inventory
0x0a9c (0x213a): (0x01) Gosub 0x1867

/ Drop the object
0x0a9f (0x213d): (0x00) Goto 0x143e

**************************************************************************
* Command: "fill"
**************************************************************************

/ Check that the object in the second word var[0x2a] is in the player's
/ inventory or being worn by the player - will not return if it's invalid or the 
/ player does not have or is not wearing the object.  Will set var[0x4e] to
/ 0x01 if the object is worn or in the player's inventory
0x0aa2 (0x2140): (0x01) Gosub 0x1867

/ Branch if the second word is NOT "cup" / "water" / "liquid" (0x60)
/ and print that "You can't fill <object>"
0x0aa5 (0x2143): (0x19) If var[0x2a] != (constant) 0x60 then Goto 0x0ab4

/ Second word IS "cup" / "water" / "liquid"

/ Branch if the player's location is NOT " in the diner: a minute corner of
/ the condo, equipped for eating etc. A "natural wholefood no chemicals" machine 
/ is fixed to the wall, alongside a square hole for garbage" (0x5b)
0x0aa9 (0x2147): (0x19) If var[0x58] != (constant) 0x5b then Goto 0x18ca

/ Player's location is "in the diner..." (0x5b)

/ Set the third word to "vending" / "machine" / "slot" (0x9e)
/ so it will be correctly procesed by the sub-routine if the player
/ did not specify it
0x0aae (0x214c): (0x08) Set var[0x2b] = (constant) 0x9e

/ Call the "insert" command processing (it changes the first word 
/ to "insert" too)
0x0ab1 (0x214f): (0x00) Goto 0x0eac

**************************************************************************

/ Print message  "You can't fill "
0x0ab4 (0x2152): (0x05) Print message (constant) 0x93

/ Print the description of the object in the second word
0x0ab6 (0x2154): (0x04) Print message var[0x2a]

/ All done
0x0ab8 (0x2156): (0x02) Return

**************************************************************************
* Command: "empty" or "pour"
* ---------------------
* Player cannot empty or pour anything in the game
**************************************************************************

/ Check that the object in the second word var[0x2a] is in the player's
/ inventory or being worn by the player - will not return if it's invalid or the 
/ player does not have or is not wearing the object.  Will set var[0x4e] to
/ 0x01 if the object is worn or in the player's inventory
0x0ab9 (0x2157): (0x01) Gosub 0x1867

/ Print message  "You can't empty "
    0x0abc (0x215a): (0x05) Print message (constant) 0x94

/ Print the description of the object in the second word
0x0abe (0x215c): (0x04) Print message var[0x2a]

/ All done
0x0ac0 (0x215e): (0x02) Return

**************************************************************************
* Command: "open" or "unlock"
**************************************************************************

/ Branch if the second word is blank i.e. was not entered or matched (0x00)
/ var[0x14] is the constant 0x00
0x0ac1 (0x215f): (0x10) If var[0x2a] == var[0x14] then Goto 0x0b17

/ Branch if the second word is an NPC, not pickable object or a number/colour
/ (something the player cannot open)
0x0ac5 (0x2163): (0x1b) If var[0x2a] > (constant) 0x8b then Goto 0x0b17

/ Check to see if the player has the second word object in 
/ their inventory or wearing it or its in the same location as them
/ Will not return if not
0x0ac9 (0x2167): (0x01) Gosub 0x1311

/ Branch if the second word is NOT the toolbox (0x8b)
0x0acc (0x216a): (0x19) If var[0x2a] != (constant) 0x8b then Goto 0x0ad8

/ Branch if the toolbox is already open (0x01)
/ var[0x0c] is the constant 0x01
0x0ad0 (0x216e): (0x10) If var[0x53] == var[0x0c] then Goto 0x0b37

/ Toolbox is closed so open it 

/ Set the toolbox to open (0x01)
/ var[0x0c] is the constant 0x01
0x0ad4 (0x2172): (0x09) Set var[0x53] = var[0x0c]

/ All done
0x0ad7 (0x2175): (0x02) Return

**************************************************************************

/ Branch if the second word is NOT the coffin (0x5f)
0x0ad8 (0x2176): (0x19) If var[0x2a] != (constant) 0x5f then Goto 0x18ca

/ Second word IS the coffin

/ Branch if the coffin is already open (0x01)
/ var[0x0c] is the constant 0x01
0x0add (0x217b): (0x10) If var[0x52] == var[0x0c] then Goto 0x0b37

/ Coffin is closed (0x00)

/ Set the coffin status to open (0x01)
/ var[0x0c] is the constant 0x01
0x0ae1 (0x217f): (0x09) Set var[0x52] = var[0x0c]

/ Branch if the coffin is NOT deployed in the blue mortuary (0x49)
0x0ae4 (0x2182): (0x19) If var[0x5d] != (constant) 0x49 then Goto 0x0afa

/ Coffin IS deployed in the blue morturary

/ Player's coffin is always deployed in the blue mortuary in 
/ Red Black White

/ Branch if the coffin is NOT deployed in the area with the first colour of
/ "Red" (0x02)
0x0ae8 (0x2186): (0x19) If var[0x5e] != (constant) 0x02 then Goto 0x0afa

/ First colour is Red

/ Branch if the coffin is NOT deployed in the area with the second colour of
/ "Black" (0x00) and third colour of White (0x09)
/ Value is calculated as 0x00 x 10 + 0x09 x 1
0x0aec (0x218a): (0x19) If var[0x5f] != (constant) 0x09 then Goto 0x0afa

/ First colour is Red, Second colour is Black, Third colour is White

/ Check to see if the player is in their starting position in the mortuary 
/ loop and if they pressed the three buttons for their coffin
/ var[0x48] is the cache of the last button presses
0x0af0 (0x218e): (0x11) If var[0x48] != var[0x49] then Goto 0x0afa

/ The current location in the mortuary loop is the player's starting position
/ then when the player opens the coffin, it will be empty (as they are no longer in it)

/ Print message  "It's empty "
0x0af4 (0x2192): (0x05) Print message (constant) 0xa3

/ Set the coffin contents indicator to "empty" 0x00
/ var[0x14] is the constant 0x00
0x0af6 (0x2194): (0x09) Set var[0x36] = var[0x14]

/ All done
0x0af9 (0x2197): (0x02) Return

**************************************************************************

/ Branch if the mortuary doesn't match the cremember's coffin mortuary colour
/ var[0x7e] will always be set to the "green mortuary" (0x4a) after the player
/ reaches the significant ledge (so they can't find it before reaching the Ledge)
0x0afa (0x2198): (0x11) If var[0x5d] != var[0x7e] then Goto 0x0b11

/ Branch if the coffin is NOT deployed in a location that matches the crew 
/ member's first colour (which passenger disk)
0x0afe (0x219c): (0x11) If var[0x5e] != var[0x7f] then Goto 0x0b11

/ First colour matches

/ Branch if the coffin is NOT deployed in a location that matches the crew 
/ member's second (which section of the passenger disk) and third (which 
/ level in the passenger disk) colours 
0x0b02 (0x21a0): (0x11) If var[0x5f] != var[0x80] then Goto 0x0b11

/ First, second and third colours match

/ Branch if the last three colours do NOT match the crew member's 
/ last three colours for deployment (randomly generated at the start
/ of the game)
0x0b06 (0x21a4): (0x11) If var[0x48] != var[0x4b] then Goto 0x0b11

/ Print message  "A crewmember is inside "
0x0b0a (0x21a8): (0x05) Print message (constant) 0x123

/ Set the coffin contents indicator to "crewmember" 0x02
/ var[0x0d] is the constant 0x02
0x0b0d (0x21ab): (0x09) Set var[0x36] = var[0x0d]

/ All done
0x0b10 (0x21ae): (0x02) Return

**************************************************************************

/ Print message  "There's a woman in the coffin "
0x0b11 (0x21af): (0x05) Print message (constant) 0xa4

/ Set the coffin contents indicator to "woman" 0x01
/ var[0x0c] is the constant 0x02
0x0b13 (0x21b1): (0x09) Set var[0x36] = var[0x0c]

/ All done
0x0b16 (0x21b4): (0x02) Return

**************************************************************************

/ Check if there is a door that can be opened in any direction 
0x0b17 (0x21b5): (0x01) Gosub 0x16e5

/ Branch if a door was found (0x01)
/ var[0x14] is the constant 0x00
0x0b1a (0x21b8): (0x13) If var[0x15] > var[0x14] then Goto 0x0b21

/ Print message  "There's nothing here worth opening "
0x0b1e (0x21bc): (0x05) Print message (constant) 0x42

/ All done
0x0b20 (0x21be): (0x02) Return

**************************************************************************
* Process opening the bolted trapdoor in the winch room
**************************************************************************

/ Branch if the player's current location is NOT "in the winch room beside 
/ a pair of linedrives" which is up from the blue glass elevator
0x0b21 (0x21bf): (0x19) If var[0x57] != (constant) 0x3c then Goto 0x0b33

/ Player is "in the winch room beside a pair of linedrives" which is up 
/ from the blue glass elevator

/ Set the temporary variable to the "spanner" (0x78)
0x0b25 (0x21c3): (0x08) Set var[0x1b] = (constant) 0x78

/ Get the current location of the "spanner"
0x0b28 (0x21c6): (0xa2) Set var[0x1c] = list#2[var[0x1b]] (list address 0x169e)

/ Branch if the "spanner" IS in the player's inventory (0xe1)
/ var[0x10] is the constant 0xe1
0x0b2b (0x21c9): (0x10) If var[0x1c] == var[0x10] then Goto 0x0b33

/ Player does NOT have the "spanner" in their inventory

/ Print message  "You need a spanner "
0x0b2f (0x21cd): (0x05) Print message (constant) 0x147

/ Cannot open the trapdoor since no spanner
0x0b32 (0x21d0): (0x02) Return

**************************************************************************

/ Branch if the door is not yet open (0x00)
/ var[0x14] is the constant 0x00
0x0b33 (0x21d1): (0x10) If var[0x16] == var[0x14] then Goto 0x0b3a

/ Door is open 

/ Print message  "It's already open "
0x0b37 (0x21d5): (0x05) Print message (constant) 0x40

/ Nothing changed
0x0b39 (0x21d7): (0x02) Return

**************************************************************************
* Process whether the door can be opened by hand or not
**************************************************************************

/ Branch and disallow the door opening if the player is "on a shuttle 
/ platform. A button protrudes from the barrier" (0x25)
0x0b3a (0x21d8): (0x18) If var[0x58] == (constant) 0x25 then Goto 0x0b72

/ Branch and disallow the door opening if the player is "in a snowrail 
/ carriage. Uncomfortable lumpy benches are moulded from the trash-strewn
/ floor and the filthy windows are opaque. There's a "go" button" (0x2e)
0x0b3e (0x21dc): (0x18) If var[0x58] == (constant) 0x2e then Goto 0x0b72

/ Branch and disallow the door opening if the player is "on a curving 
/ path in a 100m torus. A wide glassy tube spans the space above through 
/ a net of wires and pipes. A button protrudes from the floor" (0x37)
0x0b42 (0x21e0): (0x18) If var[0x58] == (constant) 0x37 then Goto 0x0b72

/ Branch and disallow the door opening if the player is "in a curving e/w 
/ corridor south of a wide entrance. A button protrudes from the floor 
/ and indicator lights decorate the ceiling" (0x42)
0x0b46 (0x21e4): (0x18) If var[0x58] == (constant) 0x42 then Goto 0x0b72

/ Branch and disallow the door opening if the player is "at the south end
/ of a narrowing marblon cylinder. A button emerges beside an airlock door"
/ (0x4b)
0x0b4a (0x21e8): (0x18) If var[0x58] == (constant) 0x4b then Goto 0x0b72

/ Branch and disallow the door opening if the player is "at the north end
/ of a narrowing marblon cylinder. A button pokes from the floor beside an 
/ airlock door"
/ (0x4c)
0x0b4e (0x21ec): (0x18) If var[0x58] == (constant) 0x4c then Goto 0x0b72

/ Branch and disallow the door opening if the player is "on a wide ramp to
/ heavy plasteel door. A battery of videyes surround a notable flashing 
/ sign: "DROID-HANDLED STORE SERVICE. PRIVATE"" (0x64)
0x0b52 (0x21f0): (0x18) If var[0x58] == (constant) 0x64 then Goto 0x0b72

/ Branch and disallow the door opening if the player is "in a beige, 
/ kidney-shaped entrance hall south of a buttoned airlock" (0x6b)
0x0b56 (0x21f4): (0x18) If var[0x58] == (constant) 0x6b then Goto 0x0b72

/ Branch and disallow the door opening if the player is "in a tasteful 
/ pink and green alcove beside a security door. There's a combination panel" (0x6c)
0x0b5a (0x21f8): (0x18) If var[0x58] == (constant) 0x6c then Goto 0x0b72

/ Branch and disallow the door opening if the player is "on narrow,
/ winding stairs leading down to an airlock iris. There is the usual 
/ floor button" (0x6e)
0x0b5e (0x21fc): (0x18) If var[0x58] == (constant) 0x6e then Goto 0x0b72

/ Branch and disallow the door opening if the player is "in a ruined 
/ bubble farm" (0x70)
0x0b62 (0x2200): (0x18) If var[0x58] == (constant) 0x70 then Goto 0x0b72

/ Branch if the player is in a location before the "a cylindrical airlock 
/ between two iris doors" (0x98) as the door will just slide open
0x0b66 (0x2204): (0x1a) If var[0x58] < (constant) 0x98 then Goto 0x0b75

/ Player is at or after the "cylindrical airlock"

/ Branch if the player is between the "cylindrical airlock" (0x98)
/ and before the "vast docking bay" (0xa0) - all doors in those locations
/ are too smooth to grip and require a button press to open
0x0b6a (0x2208): (0x1a) If var[0x58] < (constant) 0xa0 then Goto 0x0b72

/ Branch if the location is NOT the "bright, tidy docking bay" (0xa1)
0x0b6e (0x220c): (0x19) If var[0x58] != (constant) 0xa1 then Goto 0x0b75

/ Player IS in the "bright tidy docking bay" (0xa1)

/ Print message  "The door is too smooth to grip "
0x0b72 (0x2210): (0x05) Print message (constant) 0xb0

/ All done
0x0b74 (0x2212): (0x02) Return

**************************************************************************

/ Door is allowed to be opened 

/ Print message  "The door slides open "
0x0b75 (0x2213): (0x05) Print message (constant) 0xb3

/ Set the door status to open (0x01)
/ var[0x0c] is the constant 0x01
0x0b77 (0x2215): (0x09) Set var[0x16] = var[0x0c]

/ All done
0x0b7a (0x2218): (0x02) Return

**************************************************************************
* Command: "close" or "lock" or "shut"
**************************************************************************

/ Branch if the second word is the "eyes" (0xa2) and process 
/ it the same as "blink"
0x0b7b (0x2219): (0x18) If var[0x2a] == (constant) 0xa2 then Goto 0x127c

/ NOT the eyes

/ Branch if the second word is null (0x00)
/ var[0x14] is the constant 0x00
0x0b80 (0x221e): (0x10) If var[0x2a] == var[0x14] then Goto 0x0ba4

/ Second word is NOT null

/ Branch if the second word is NOT an object that can be taken
0x0b84 (0x2222): (0x1b) If var[0x2a] > (constant) 0x8b then Goto 0x0ba4

/ It is an object that can be taken


/ Check to see if the player has the second word object in 
/ their inventory or wearing it or its in the same location as them
0x0b88 (0x2226): (0x01) Gosub 0x1311

/ Branch if the second word is NOT the freezer coffin (0x5f)
0x0b8b (0x2229): (0x19) If var[0x2a] != (constant) 0x5f then Goto 0x0b97

/ Second word is the coffin

/ Branch if the status of the coffin is already closed (0x00) and
/ print "It's already closed"
/ var[0x14] is the constant 0x00
0x0b8f (0x222d): (0x10) If var[0x52] == var[0x14] then Goto 0x0bb2

/ Freezer coffin is open (0x01)

/ Set the status to closed (0x00)
/ var[0x14] is the constant 0x00
0x0b93 (0x2231): (0x09) Set var[0x52] = var[0x14]

/ Coffin closed
0x0b96 (0x2234): (0x02) Return

**************************************************************************

/ Second word is NOT the freezer coffin

/ Branch if the second word is NOT the toolbox (0x8b) and print 
/ "You can't do that "
0x0b97 (0x2235): (0x19) If var[0x2a] != (constant) 0x8b then Goto 0x18ca

/ Branch if the toolbox is alrady closed (0x00) and print 
/ "It's already closed "
/ var[0x14] is the constant 0x00
0x0b9c (0x223a): (0x10) If var[0x53] == var[0x14] then Goto 0x0bb2

/ Toolbox was open

/ Set the status of the toolbox to closed (0x00)
/ var[0x14] is the constant 0x00
0x0ba0 (0x223e): (0x09) Set var[0x53] = var[0x14]

/ Toolbox closed
0x0ba3 (0x2241): (0x02) Return

**************************************************************************

/ Check if there is a door in the current location 
0x0ba4 (0x2242): (0x01) Gosub 0x16e5

/ Branch if there is a door (0x01)
/ var[0x14] is the constant 0x00
0x0ba7 (0x2245): (0x13) If var[0x15] > var[0x14] then Goto 0x0bae

/ No door in this location

/ Print message  "There's nothing here worth closing "
0x0bab (0x2249): (0x05) Print message (constant) 0x43

/ No door
0x0bad (0x224b): (0x02) Return

**************************************************************************

/ At least one door in the current location

/ Branch if the door is open (0x01)
/ var[0x14] is the constant 0x00
0x0bae (0x224c): (0x13) If var[0x16] > var[0x14] then Goto 0x0bb4

/ Door is already closeds

/ Print message  "It's already closed "
0x0bb2 (0x2250): (0x05) Print message (constant) 0x41

/ Set the door to closed (0x00)
/ var[0x14] is the constant 0x00
0x0bb4 (0x2252): (0x09) Set var[0x16] = var[0x14]

/ Close the door
0x0bb7 (0x2255): (0x02) Return

**************************************************************************
* Command: "bite" or "eat" or "nibble" or "swallow" or "taste"
**************************************************************************

/ Check if the player has the object
0x0bb8 (0x2256): (0x01) Gosub 0x1311

/ Print message  "Yeuch! "
0x0bbb (0x2259): (0x05) Print message (constant) 0x96

/ Player cannot eat any object in this game
0x0bbd (0x225b): (0x02) Return

**************************************************************************
* Command: "drink" or "sip"
**************************************************************************

/ Check if the player has the object
0x0bbe (0x225c): (0x01) Gosub 0x1311

/ Branch if the second word is NOT the cup/water (0x60) and 
/ print "Don't be silly!"
0x0bc1 (0x225f): (0x19) If var[0x2a] != (constant) 0x60 then Goto 0x18cf

/ Set the message to print to be "It's empty" (0x108)
0x0bc6 (0x2264): (0x08) Set var[0x40] = (constant) 0x108

/ Branch if the cup is empty (0x00)
/ var[0x14] is the constant 0x00
0x0bca (0x2268): (0x10) If var[0x6e] == var[0x14] then Goto 0x0bd5

/ Set the cup status to empty (0x00)
/ var[0x14] is the constant 0x00
0x0bce (0x226c): (0x09) Set var[0x6e] = var[0x14]

/ Set the message to print to be "The custard tastes even worse 
/ than it looks" (0x108)
0x0bd1 (0x226f): (0x08) Set var[0x40] = (constant) 0x107

/ Print either that's "it's empty " or "The custard tastes.."
0x0bd5 (0x2273): (0x04) Print message var[0x40]

/ Drink command complete
0x0bd7 (0x2275): (0x02) Return

**************************************************************************
* Command: "light"
**************************************************************************

/ Check that the object in the second word var[0x2a] is in the player's
/ inventory or being worn by the player - will not return if it's invalid or the 
/ player does not have or is not wearing the object.  Will set var[0x4e] to
/ 0x01 if the object is worn or in the player's inventory
0x0bd8 (0x2276): (0x01) Gosub 0x1867

/ Branch if the second word is NOT the lamp (0x87) and print 
/ "You can't do that"
0x0bdb (0x2279): (0x19) If var[0x2a] != (constant) 0x87 then Goto 0x18ca

/ Second word is the lamp

/ Set the temporary variable to the dictionary id of the batpak (0x5b)
0x0be0 (0x227e): (0x08) Set var[0x1b] = (constant) 0x5b

/ Get the current location of the batpak
0x0be3 (0x2281): (0xa2) Set var[0x1c] = list#2[var[0x1b]] (list address 0x169e)

/ Branch if the location of the batpak is not in the "special location" (0xc6)
/ It has a description of "on a great pile of garbage" but it isn't the same as 
/ the one the player can reach. It represents inside the lamp.  If the batpak
/ is here let it be switched on.
0x0be6 (0x2284): (0x18) If var[0x1c] == (constant) 0xc6 then Goto 0x0bee

/ Battery is NOT inside the lamp

/ Print message  "You've no power "
0x0bea (0x2288): (0x05) Print message (constant) 0x12a

/ Lamp not switched on
0x0bed (0x228b): (0x02) Return

**************************************************************************

/ Branch if the lamp status is off (0x00)
/ var[0x14] is the constant 0x00
0x0bee (0x228c): (0x10) If var[0x3c] == var[0x14] then Goto 0x0bf6

/ Lamp is already lit

/ Print message  "It IS lit "
0x0bf2 (0x2290): (0x05) Print message (constant) 0x128

/ No change as already lit
0x0bf5 (0x2293): (0x02) Return

**************************************************************************

/ Print message  "It illuminates brightly "
0x0bf6 (0x2294): (0x05) Print message (constant) 0x12b

/ Set the lamp status to 0x01
/ var[0x0c] is the constant 0x01
0x0bf9 (0x2297): (0x09) Set var[0x3c] = var[0x0c]

/ Print the room description
0x0bfc (0x229a): (0x00) Goto 0x01d4

**************************************************************************
* Command: "extinguish"
**************************************************************************

/ Branch if the second word is NOT null (0x00)
/ Note second word will always be NOT null because of the checks 
/ from 0x0491 to 0x04a2.  0x04a2 will print "You'll need to say more than
/ that" if there is only one word.
/ var[0x14] is the constant 0x00
0x0bff (0x229d): (0x11) If var[0x2a] != var[0x14] then Goto 0x0c06

/ Note - can never reach here
/ Second word is null - player just typed "extinguish"

/ Set the second word to "extinguisher" (0x63)
0x0c03 (0x22a1): (0x08) Set var[0x2a] = (constant) 0x63

/ Check if the player has the object 
0x0c06 (0x22a4): (0x01) Gosub 0x1311

/ Branch if the second word is NOT the lamp and print "You can't do that"
0x0c09 (0x22a7): (0x19) If var[0x2a] != (constant) 0x87 then Goto 0x18ca

/ Second word is the lamp

/ Note - this can never be true... 
/ Branch if the second word is the extinguisher (0x63)
0x0c0e (0x22ac): (0x18) If var[0x2a] == (constant) 0x63 then Goto 0x12b9

/ Second word is still the lamp

/ Branch if the lamp is switched off 
/ var[0x14] is the constant 0x00
0x0c13 (0x22b1): (0x13) If var[0x3c] > var[0x14] then Goto 0x0c1b

/ Print message  "It already is "
0x0c17 (0x22b5): (0x05) Print message (constant) 0x129

/ Lamp is already off
0x0c1a (0x22b8): (0x02) Return

**************************************************************************

/ Print message  "It fades to black "
0x0c1b (0x22b9): (0x05) Print message (constant) 0x12c

/ Set the status of the lamp to off (0x00)
/ var[x014] is the constant 0x00
0x0c1e (0x22bc): (0x09) Set var[0x3c] = var[0x14]

/ Lamp is off
0x0c21 (0x22bf): (0x02) Return

**************************************************************************
* Unused
**************************************************************************

/ Print that "You can't" do whatever the player just asked
0x0c22 (0x22c0): (0x00) Goto 0x18ca

**************************************************************************
* Command: "press" or "push" or "squeeze"
**************************************************************************

/ Branch if the second word is NOT buttons/panels/lights/indicators (0xa5)
0x0c25 (0x22c3): (0x19) If var[0x2a] != (constant) 0xa5 then Goto 0x0d92

/ Second word IS buttons/panels/lights/indicators (0xa5)

/ Branch if the location is "on a shuttle platform. A button 
/ protrudes from the barrier" (0x25) 
0x0c2a (0x22c8): (0x18) If var[0x58] == (constant) 0x25 then Goto 0x0c91

/ Branch if the location is " in a snowrail carriage. Uncomfortable lumpy 
/ benches are moulded from the trash-strewn floor and 
/ the filthy windows are opaque. There's a "go" button" (0x2e)
0x0c2e (0x22cc): (0x18) If var[0x58] == (constant) 0x2e then Goto 0x0c98

/ Branch if the location is "on a curving path in a 100m torus. A wide
/ glassy tube spans the space above through a net of wires and pipes. A 
/ button protrudes from the floor" (0x37)
0x0c33 (0x22d1): (0x18) If var[0x58] == (constant) 0x37 then Goto 0x0cb0

/ Branch if the location is "in a curving e/w corridor south of a wide 
/ entrance. A button protrudes from the floor and indicator lights 
/ decorate the ceiling" (0x42)
0x0c38 (0x22d6): (0x18) If var[0x58] == (constant) 0x42 then Goto 0x0cb0

/ Branch if the location is "in a blue glass elevator. A sliding door 
/ makes up one wall; the others are featureless apart from a panel of 
/ multi-coloured buttons. Square trapdoors show in floor and ceiling" (0x3f)
0x0c3d (0x22db): (0x18) If var[0x58] == (constant) 0x3f then Goto 0x0cea

/ Branch if the location is "at the entrance to a blue mortuary beside 
/ indicator lights and a control panel"
0x0c42 (0x22e0): (0x18) If var[0x58] == (constant) 0x47 then Goto 0x0d03

/ Branch if thhe location is "by the entrance to a green mortuary beside 
/ lights and a panel" (0x48)
0x0c47 (0x22e5): (0x18) If var[0x58] == (constant) 0x48 then Goto 0x0d03

/ Branch if the location is "in a tasteful pink and green alcove beside 
/ a security door. There's a combination panel" (0x6c)
0x0c4c (0x22ea): (0x18) If var[0x58] == (constant) 0x6c then Goto 0x0cc1

/ Branch if the location is "at the south end of a narrowing marblon 
/ cylinder. A button emerges beside an airlock door" (0x4b)
/ and open the door
0x0c51 (0x22ef): (0x18) If var[0x58] == (constant) 0x4b then Goto 0x0c78

/ Branch if the location is "at the north end of a widening marblon cylinder. 
/ A button pokes from the floor beside an airlock door" (0x4c)
/ and open the door
0x0c55 (0x22f3): (0x18) If var[0x58] == (constant) 0x4c then Goto 0x0c78

/ Branch if the location is "in a beige, kidney-shaped entrance hall 
/ south of a buttoned airlock" (0x6b) and open the door
0x0c59 (0x22f7): (0x18) If var[0x58] == (constant) 0x6b then Goto 0x0c78

/ Branch if the location is "on narrow, winding stairs leading down to 
/ an airlock iris. There is the usual floor button" (0x6e)
/ and open the door
0x0c5d (0x22fb): (0x18) If var[0x58] == (constant) 0x6e then Goto 0x0c78

/ Branch if the current location is "in a ruined bubble farm" (0x70)
/ and open the door
0x0c61 (0x22ff): (0x18) If var[0x58] == (constant) 0x70 then Goto 0x0c78

/ Branch if the current location is "in a vast docking bay, surrounded by 
/ piles of metallic junk. The massive exterior doors are open to space 
/ and, through them, lights are visible in the far south. A thickly 
/ knotted rope stretches into the void. At the back of the docking bay 
/ is an airlock iris with a floor button" (0xa0) and open the door
0x0c65 (0x2303): (0x18) If var[0x58] == (constant) 0xa0 then Goto 0x0c78

/ Branch if the current location is "in the bright, tidy docking bay 
/ of the crew habidome. An airlock iris (with button) 
/ leads further into the dome" (0xa1) and open the door
0x0c69 (0x2307): (0x18) If var[0x58] == (constant) 0xa1 then Goto 0x0c78

/ Branch if the current location is before "in a cylindrical airlock 
/ between two iris doors" (0x98) and print "You can't see it"
0x0c6d (0x230b): (0x1a) If var[0x58] < (constant) 0x98 then Goto 0x0c75

/ Branch if the current location is one of the following:
/ 0x98 : in a cylindrical airlock between two iris doors
/ 0x99 : in a featureless clindrical airlock between two iris doors
/ 0x9a : in a cubic airlock between two iris doors
/ 0x9b : in a vertical airlock between two iris doors
/ 0x9c : in an ice tunnel
/ 0x9d : in a tiny stratoglider. It is extensibly damaged
/ and process airlock button presses
0x0c71 (0x230f): (0x1a) If var[0x58] < (constant) 0x9e then Goto 0x0c7d

/ Print "You can't see it"
0x0c75 (0x2313): (0x00) Goto 0x18c5

**************************************************************************

/ Set the door status to open (0x01)
/ var[0x16] is the constant 0x01
0x0c78 (0x2316): (0x09) Set var[0x16] = var[0x0c]

/ Print "The door slides open"
0x0c7b (0x2319): (0x00) Goto 0x0c8e

**************************************************************************

/ Process airlock button presses - there are two buttons in each 
/ airlock, a green one (opens the door to the next location) 
/ and a yellow one (opens the door to the player's previous location)

/ Branch if the second word is null (0x00) and Print the 
/ "Could you rephrase that?" cyclic message
/ var[0x14] is the constant 0x00
0x0c7d (0x231b): (0x10) If var[0x2b] == var[0x14] then Goto 0x1907

/ Second word not null

/ Branch if the player is pressing the "yellow" button 
0x0c82 (0x2320): (0x18) If var[0x2b] == (constant) 0xcc then Goto 0x0c8b

/ Branch if the player is NOT pressing the "green" button (or "yellow")
/ and print "don't be silly!"
0x0c86 (0x2324): (0x19) If var[0x2b] != (constant) 0xcd then Goto 0x18cf

/ Player pressed the green or yellow button

/ Set the airlock door status to the colour of the button that was 
/ pressed i.e. yellow (0xcc) or green (0xcd) to indicate the door is open
0x0c8b (0x2329): (0x09) Set var[0x19] = var[0x2b]

/ Print message  "The door slides open "
0x0c8e (0x232c): (0x05) Print message (constant) 0xb3

/ One of the doors slid open
0x0c90 (0x232e): (0x02) Return

**************************************************************************  

/ Player is "on a shuttle platform" (0x25)

/ Print message  "The monorail shuttle arrives and its doors open "
0x0c91 (0x232f): (0x05) Print message (constant) 0x156

/ Set the door status to open (0x01)
/ var[0x0c] is the constant 0x01
0x0c94 (0x2332): (0x09) Set var[0x16] = var[0x0c]

/ Shuttle door is open
0x0c97 (0x2335): (0x02) Return

**************************************************************************

/ Player is "in a snowrail carriage" (0x2e) and pressed the "go" button

/ Print message  "The shuttle rushes to the next station and opens its doors "
0x0c98 (0x2336): (0x05) Print message (constant) 0x157

/ Set the door status to open (0x01)
/ var[0x0c] is the constant 0x01
0x0c9b (0x2339): (0x09) Set var[0x16] = var[0x0c]

/ Set the score index into list#2 for pressing the monorail shuttle button
/ to move to the next station (0x10f)
0x0c9e (0x233c): (0x08) Set var[0x0b] = (constant) 0x10f

/ Set the flag to mark this as scored
0x0ca2 (0x2340): (0xe2) Set list#2[var[0x0b]] = var[0x0c] (list address 0x169e)

/ The snowrail carriages are really just the same location (0x2e). So are the shuttle platforms 
/ (0x25) and "on a ladder on the pylon" (0x26) - what actually
/ changes is the value of var[0x59] which defines which location the player will 
/ move to when they move "down" from "on a ladder on the pylon" (0x26) which 
/ is the location beneath the shuttle platform.  Depending on which 
/ "station" the shuttle is at, the player can be taken one of the following:
/ 0x1a : on a flat snowfield north of an immense unclimbably smooth cliff. A pylon stands nearby
/ 0x1b : on trodden snow between a tall pylon and a hemidome calling itself the "Snowball Hilton"
/ 0x1c : on churned and rutted snow below a tall pylon
/ 0x1d : beside the northern ice-cliff which has a tiny cave at its base. A pylon stands nearby
/ 0x1e : on smooth snow beside a pylon, dwarfed by the north cliff
/ 0x1f : on trampled snow outside a major snowdesic dome. Brilliant light from an entrance split in the hemidome illuminates a nearby pylon
/ 0x20 : on smooth snow, beside one of a chain of pylons. A ladder leads up the pylon to a cabin
/ 0x21 : on soft snow outside a sagging warehouse. A dark plastic path leads from the warehouse to a nearby pylon
/ 
/ Again, that location increments and loops with each press of the button in the shuttle
/ when it "moves" to the next station

/ Increment the location where the player will be taken
0x0ca5 (0x2343): (0x0a) Set var[0x59] += var[0x0c]

/ Branch if the location id is in the range of 0x1a to 0x21
0x0ca8 (0x2346): (0x1a) If var[0x59] < (constant) 0x22 then Goto 0x0caf

/ Location is invalid so reset it to loop back around
0x0cac (0x234a): (0x08) Set var[0x59] = (constant) 0x1a

/ Processed
0x0caf (0x234d): (0x02) Return

**************************************************************************

/ Player's location is "on a curving path in a 100m torus. A wide
/ glassy tube spans the space above through a net of wires and pipes. A 
/ button protrudes from the floor" (0x37) or  "in a curving e/w corridor south 
/ of a wide entrance. A button protrudes from the floor and indicator lights 
/ decorate the ceiling" (0x42)

/ Branch if the coffin containing the frozen crew member 
/ has already been grabbed by the revival machine (0x01 or 0x02)
/ var[0x14] is the constant 0x00
0x0cb0 (0x234e): (0x13) If var[0x37] > var[0x14] then Goto 0x0cbb

/ Coffin has NOT been grabbed by the revival machine

0x0cb4 (0x2352): (0x1a) If var[0x3f] < (constant) 0x09 then Goto 0x0cbb
/ Print message  ""SORRY! A COLONIST MAY BE LOOSE ON WHITE LEVEL! ELEVATOR
/ SERVICE TO AFFECTED AREAS IS SUSPENDED!" "
0x0cb8 (0x2356): (0x05) Print message (constant) 0xbc

/ All done
0x0cba (0x2358): (0x02) Return

**************************************************************************

/ Print message  "The elevator arrives with a whoosh and its door opens "
0x0cbb (0x2359): (0x05) Print message (constant) 0xce

/ Set the location door status to "open" (0x01)
/ var[0x0c] is the constant 0x01
0x0cbd (0x235b): (0x09) Set var[0x16] = var[0x0c]

/ All done
0x0cc0 (0x235e): (0x02) Return
**************************************************************************

/ Branch if the player did not specify a colour and print the 
/ "Could you rephrase that?" cyclic message (colours are 0xc8 to 0xd1)
0x0cc1 (0x235f): (0x1a) If var[0x2b] < (constant) 0xc8 then Goto 0x1907

/ Branch if the player did not specify a colour and print the 
/ "Could you rephrase that?" cyclic message (colours are 0xc8 to 0xd1)
0x0cc6 (0x2364): (0x1b) If var[0x2b] > (constant) 0xd1 then Goto 0x1907

/ Rotate the last three colour lights and add the new colour 
/ from the button the player pressed
0x0ccb (0x2369): (0x01) Gosub 0x15c2

/ Branch if the colours do not match the security door code 
0x0cce (0x236c): (0x11) If var[0x46] != var[0x38] then Goto 0x0cdf

/ Colours DO match the security door code

/ Print message  "The door slides open "
0x0cd2 (0x2370): (0x05) Print message (constant) 0xb3

/ Set the door status to open (0x01)
/ var[0x0c] is the constant 0x01
0x0cd4 (0x2372): (0x09) Set var[0x16] = var[0x0c]

/ Set the score index into list#2 for opening the security door (0x110)
0x0cd7 (0x2375): (0x08) Set var[0x0b] = (constant) 0x110

/ Set the flag to mark this as scored
/ var[0x0c] is the constant 0x01
0x0cdb (0x2379): (0xe2) Set list#2[var[0x0b]] = var[0x0c] (list address 0x169e)

/ Security door processing done
0x0cde (0x237c): (0x02) Return

**************************************************************************

/ Reset the security door buttons if 3 buttons have been pressed

/ Branch if the number of buttons pressed does not equal 3
/ var[0x0e] is the constant 0x03
0x0cdf (0x237d): (0x11) If var[0x47] != var[0x0e] then Goto 0x0ce9

/ Three buttons have been pressed

/ Set the last three lights back to black, black, black
/ var[0x14] is the constant 0x00
0x0ce3 (0x2381): (0x09) Set var[0x46] = var[0x14]

/ Set the number of buttons the player has pressed to 0
/ var[0x14] is the constant 0x00
0x0ce6 (0x2384): (0x09) Set var[0x47] = var[0x14]

/ Security door processing done
0x0ce9 (0x2387): (0x02) Return

**************************************************************************

/ Player's location is "in a blue glass elevator. A sliding door 
/ makes up one wall; the others are featureless apart from a panel of 
/ multi-coloured buttons. Square trapdoors show in floor and ceiling" (0x3f)

/ Branch if the second word is NOT a valid colour
0x0cea (0x2388): (0x1a) If var[0x2b] < (constant) 0xc8 then Goto 0x1907

/ Branch if the second word is NOT a valid colour
0x0cef (0x238d): (0x1b) If var[0x2b] > (constant) 0xd1 then Goto 0x1907

/ Colour is "black" (0xc8) or "brown" (0xc9) or "red" (0xca) or "orange" (0xcb)
/ or "yellow" (0xcc) or "green" (0xcd) or "blue" (0xce) or "purple" (0xcf) or
/ "grey" (0xd0) or "white" (0xd1)

/ Set the level that the player is on in the freezer disk to the 
/ dictionary id of the colour of the button they pressed
0x0cf4 (0x2392): (0x09) Set var[0x3f] = var[0x2b]

/ Set the temporary variable to the number to subtract from the 
/ dictonary id to get to an absolute number for the colour
0x0cf7 (0x2395): (0x08) Set var[0x72] = (constant) 0xc8

/ Subtract the dictionary id
0x0cfa (0x2398): (0x0b) Set var[0x3f] -= var[0x72]

/ Print message  "The floor shakes and the door opens "
0x0cfd (0x239b): (0x05) Print message (constant) 0xcf

/ Set the door indicator to open (0x01)
/ var[0x0c] is the constant 0x01
0x0cff (0x239d): (0x09) Set var[0x16] = var[0x0c]

/ All done
0x0d02 (0x23a0): (0x02) Return

**************************************************************************
* Process pressing the blue or green mortuary's panel lights
**************************************************************************

/ Player is "by the entrance to a [blue|green] mortuary beside 
/ lights and a panel"

/ Branch if the player did not specify a valid colour and print 
/ the cyclic "Could you rephrase that?" message
0x0d03 (0x23a1): (0x1a) If var[0x2b] < (constant) 0xc8 then Goto 0x1907

/ Branch if the player did not specify a valid colour and print 
/ the cyclic "Could you rephrase that?" message
0x0d08 (0x23a6): (0x1b) If var[0x2b] > (constant) 0xd1 then Goto 0x1907

/ Branch if a coffin has not been deployed and print the colours of the lights
/ var[0x14] is the constant 0x00
0x0d0d (0x23ab): (0x10) If var[0x5d] == var[0x14] then Goto 0x0d5e

/ Coffin has been deployed or taken so either deployed in the blue morturay (0x49)
/ or the green mortuary (0x4a).  They player may or may not have taken it.

/ Set the temporary variable to the dictionary id for the "coffin" (0x5f)
0x0d11 (0x23af): (0x08) Set var[0x1b] = (constant) 0x5f

/ Get the current location for the coffin (room) - first location reference (freezer disc)
0x0d14 (0x23b2): (0xa2) Set var[0x1c] = list#2[var[0x1b]] (list address 0x169e)

/ Branch if the coffin is NOT in the its deployed location - it means the player
/ has taken it and either in their inventory, or dropped somewhere or taken by 
/ the revival machine. Another coffin cannot be deployed until this one is returned
/ so print a message saying that.
0x0d17 (0x23b5): (0x11) If var[0x1c] != var[0x5d] then Goto 0x0d5b

/ Coffin IS in its deployed location (either the blue or green mortuary)
/ but is it in the right freezer disk

/ Add on the number of objects in the game to the first colour of lights
/ location for the coffin
/ var[0x6d] is the constant 0x3c (60), the number of objects in the game
0x0d1b (0x23b9): (0x0a) Set var[0x1b] += var[0x6d]

/ Get the current location for the coffin (room) - second location reference (sector)
0x0d1e (0x23bc): (0xa2) Set var[0x1c] = list#2[var[0x1b]] (list address 0x169e)

/ Branch if the coffin is NOT in the its deployed location - it means the player
/ has taken it and either in their inventory, or dropped somewhere or taken by 
/ the revival machine. Another coffin cannot be deployed until this one is returned
/ so print a message saying that.
0x0d21 (0x23bf): (0x11) If var[0x1c] != var[0x5e] then Goto 0x0d5b

/ Coffin IS in its deployed location (either the blue or green mortuary)
/ but is it in the right freezer disk, and right sector

/ Add on the number of objects in the game to the first colour of lights
/ location for the coffin
/ var[0x6d] is the constant 0x3c (60), the number of objects in the game
0x0d25 (0x23c3): (0x0a) Set var[0x1b] += var[0x6d]

/ Get the current location for the coffin (room) - third location reference (level)
0x0d28 (0x23c6): (0xa2) Set var[0x1c] = list#2[var[0x1b]] (list address 0x169e)

/ Branch if the coffin is NOT in the its deployed location - it means the player
/ has taken it and either in their inventory, or dropped somewhere or taken by 
/ the revival machine. Another coffin cannot be deployed until this one is returned
/ so print a message saying that.
0x0d2b (0x23c9): (0x11) If var[0x1c] != var[0x5f] then Goto 0x0d5b

/ Coffin IS in its deployed location (either the blue or green mortuary)
/ but is it in the right freezer disk, right sector and level

/ Set the target location to the current location
0x0d2f (0x23cd): (0x09) Set var[0x58] = var[0x57]

/ Add one to the current location (player is at the entrance, 
/ coffin should appear in the morgue part which is one greater)
0x0d32 (0x23d0): (0x0a) Set var[0x58] += var[0x0d]

/ Set the second word to be the "coffin" (0x5f)
0x0d35 (0x23d3): (0x08) Set var[0x2a] = (constant) 0x5f

/ Check to see if a coffin is already in the morgue
0x0d38 (0x23d6): (0x01) Gosub 0x15f0

/ Branch if the coffin is NOT present (0x00)
/ var[0x14] is the constant 0x00
0x0d3b (0x23d9): (0x10) If var[0x4e] == var[0x14] then Goto 0x0d41

/ Coffin is present

/ Print message  "The coffin slides away\n "
0x0d3f (0x23dd): (0x05) Print message (constant) 0xdc

/ Initialise the indicator if a player is wearing, holding or 
/ has the object in the same location as them to 0x01 (does have it)
/ also used to see if it's in their inventory or if they are wearing it
/ var[0x0c] is the constant 0x01
0x0d41 (0x23df): (0x09) Set var[0x4e] = var[0x0c]

/ Remove the object from the game (set its location to 0xff)
0x0d44 (0x23e2): (0x01) Gosub 0x180e

/ Set the location of the coffin to nowhere (0x00)
/ var[0x14] is the constant 0x00
0x0d47 (0x23e5): (0xe2) Set list#2[var[0x2a]] = var[0x14] (list address 0x169e)

/ Set the deployment location of the coffin to "not deployed" (0x00)
/ var[0x14] is the constant 0x00
0x0d4a (0x23e8): (0x09) Set var[0x5d] = var[0x14]

/ Set the target location to the current location 
0x0d4d (0x23eb): (0x09) Set var[0x58] = var[0x57]

/ Reset the indicator lights to black (0x00), black (0x00), black (0x00)
/ 100 x 0x00 + 10 x 0x00 + 1 x 0x00 = 0x00
/ var[0x14] is the constant 0x00
0x0d50 (0x23ee): (0x09) Set var[0x46] = var[0x14]

/ Set the number of buttons pressed to 0x00
/ var[0x14] is the constant 0x00
0x0d53 (0x23f1): (0x09) Set var[0x47] = var[0x14]

/ Set the status of the coffin to "closed" (0x00)
/ var[0x14] is the constant 0x00
0x0d56 (0x23f4): (0x09) Set var[0x52] = var[0x14]

/ Print the "indicator lights flicker" along with the reset colours
0x0d59 (0x23f7): (0x00) Goto 0x0d5e

**************************************************************************
* Process the coffin NOT being in its deployed location when the player
* is trying to deploy another
**************************************************************************

/ Print message  ""PLEASE RETURN YOUR COFFIN FIRST!" "
0x0d5b (0x23f9): (0x05) Print message (constant) 0xa5

/ Player not allowed another coffin
0x0d5d (0x23fb): (0x02) Return

**************************************************************************

/ Rotate the last three indicator lights from right to left so 
/ e.g. black red white becomes red white <new button colour>. This new value
/ is stored in var[0x46]
0x0d5e (0x23fc): (0x01) Gosub 0x15c2

/ Print message  "Indicator lights flicker "
0x0d61 (0x23ff): (0x05) Print message (constant) 0x4a

/ Set the input variable to the sub-routine to the left most colour
0x0d63 (0x2401): (0x09) Set var[0x78] = var[0x59]

/ Set the input variable to the sub-routine to the middle two colours
0x0d66 (0x2404): (0x09) Set var[0x79] = var[0x5b]

/ Set the input variable to the right most just rotated colours
0x0d69 (0x2407): (0x09) Set var[0x7a] = var[0x46]

/ Print the colour of all six lights 
0x0d6c (0x240a): (0x01) Gosub 0x131a

/ Branch and do nothing if the player has pressed less than 3 buttons
/ - a coffin only slides out when the player has pressed three buttons
0x0d6f (0x240d): (0x1a) If var[0x47] < (constant) 0x03 then Goto 0x0d91

/ Player has pressed 3 buttons

/ Print message  "A coffin slides from an aperture "
0x0d73 (0x2411): (0x05) Print message (constant) 0xd0

/ Set the second word to the coffin (0x5f) so it can be moved
/ to the main room
0x0d75 (0x2413): (0x08) Set var[0x2a] = (constant) 0x5f

/ Add 2 to the target location - it's currently set to the 
/ player's current location which is either the "entrance to the 
/ [blue|green] mortuary". Adding 2 to the location id sets this
/ to the main [blue|green] room in the mortuary where the slabs
/ are located and where the coffin should appear.
0x0d78 (0x2416): (0x0a) Set var[0x58] += var[0x0d]

/ Move the coffin to the green or blue main room
0x0d7b (0x2419): (0x01) Gosub 0x143e

/ Set the deployment location of the coffin to the green or blue main
/ room from above.  This is cached so that the game knows where it should
/ be returned to if the player takes it.
0x0d7e (0x241c): (0x09) Set var[0x5d] = var[0x58]

/ Cache the values of that just made the coffin slide out

/ Cache the freezer disk colour 
0x0d81 (0x241f): (0x09) Set var[0x5e] = var[0x5a]

/ Cache the freezer disk sector and level
0x0d84 (0x2422): (0x09) Set var[0x5f] = var[0x5c]

/ Cache the button presses that made the coffin slide out
0x0d87 (0x2425): (0x09) Set var[0x48] = var[0x46]

/ Set the score index into list#2 for revealing a coffin (0x106)
0x0d8a (0x2428): (0x08) Set var[0x0b] = (constant) 0x106

/ Set the flag to mark this as scored
/ var[0x0c] is the constant 0x01
0x0d8e (0x242c): (0xe2) Set list#2[var[0x0b]] = var[0x0c] (list address 0x169e)

/ Mortuary lights button press processing complete
0x0d91 (0x242f): (0x02) Return

**************************************************************************
* Process pressing/pushing/squeezing something other than the 
* buttons/panels/lights/indicators
**************************************************************************

/ Branch if the second word is a "door" (0xaf) and process the door opening
0x0d92 (0x2430): (0x18) If var[0x2a] == (constant) 0xaf then Goto 0x0ac1

/ Branch if the second word is it/everything/green/yellow/one/two etc(0xc7+)
/ and print the cyclical message "Could you rephrase that?"
0x0d97 (0x2435): (0x1b) If var[0x2a] > (constant) 0xc7 then Goto 0x1907

/ Check that the object in the second word var[0x2a] is in the player's
/ inventory or being worn by the player - will not return if it's invalid or the 
/ player does not have or is not wearing the object.  Will set var[0x4e] to
/ 0x01 if the object is worn or in the player's inventory
0x0d9c (0x243a): (0x01) Gosub 0x1867

/ Branch if the second word IS the fire extinguisher (0x63)
/ and process the player setting it off
0x0d9f (0x243d): (0x18) If var[0x2a] == (constant) 0x63 then Goto 0x12b9

/ Branch if the second word is NOT the aerosol paint can (0x5a)
/ and print "You can't do that"
0x0da4 (0x2442): (0x19) If var[0x2a] != (constant) 0x5a then Goto 0x0dac

/ Object IS the aerosol paint can

/ Print message  "Paint puffs from the can "
0x0da8 (0x2446): (0x05) Print message (constant) 0x188

/ Paint can processed
0x0dab (0x2449): (0x02) Return

**************************************************************************

/ Print "You can't do that "
0x0dac (0x244a): (0x00) Goto 0x18ca

**************************************************************************
* Command: "fasten" or "tie" or "attach" or "fix"
**************************************************************************

/ Check to see if the player has the object or is wearing it
0x0daf (0x244d): (0x01) Gosub 0x1311

/ Set the default message to display to "You can't do that" (0x27)
0x0db2 (0x2450): (0x08) Set var[0x40] = (constant) 0x27

/ Branch if the object is NOT a diagnostic probe (0x64)
0x0db5 (0x2453): (0x19) If var[0x2a] != (constant) 0x64 then Goto 0x0dd1

**************************************************************************
* Process attaching the diagnostic probe
**************************************************************************

/ Object IS the diagnostic probe

/ Set the message to display to "The robot fends you off!" (0xf2)
0x0db9 (0x2457): (0x08) Set var[0x40] = (constant) 0xf2

/ Branch if the player's current location is NOT "on a rubbish tip" (0x61)
/ and print the message "The robot fends you off!"
0x0dbc (0x245a): (0x19) If var[0x58] != (constant) 0x61 then Goto 0x0dce

/ Object is the diagnostic probe and location is on a rubbish tip

/ Note - redundant as already set
/ Set the message to "The robot fends you off!" (0xf2)
0x0dc0 (0x245e): (0x08) Set var[0x40] = (constant) 0xf2

/ Branch if the status of the damaged janitor droid is 
/ "dead" (0xff)
/ var[0x13] is the constant 0xff
0x0dc3 (0x2461): (0x10) If var[0x6b] == var[0x13] then Goto 0x0dce

/ Print message  "The droid needs "
0x0dc7 (0x2465): (0x05) Print message (constant) 0xf3

/ Print the random spare part that the droid needs which is held
/ held in this variable
0x0dc9 (0x2467): (0x04) Print message var[0x6c]

/ Set the message to display to "."
0x0dcb (0x2469): (0x08) Set var[0x40] = (constant) 0x07

/ Print any of the messages from above depending on the point it 
/ branched here
0x0dce (0x246c): (0x04) Print message var[0x40]

/ Robot has had probe attached
0x0dd0 (0x246e): (0x02) Return

**************************************************************************
* Process attaching the air flask
**************************************************************************

/ Branch if the player is NOT attaching the air flask (0x65)
0x0dd1 (0x246f): (0x19) If var[0x2a] != (constant) 0x65 then Goto 0x0df3

/ Player is attaching the air flask

/ Set the second word to the helmet (0x55)
0x0dd5 (0x2473): (0x08) Set var[0x2a] = (constant) 0x55

/ Check they have or are wearing the helmet?
0x0dd8 (0x2476): (0x01) Gosub 0x15e1

/ Process attaching the air flask to the helmet
0x0ddb (0x2479): (0x10) If var[0x4e] == var[0x14] then Goto 0x0df3

/ Print message  "The flask joins invisibly with the helmet, recharging its air "
0x0ddf (0x247d): (0x05) Print message (constant) 0x18e

/ Change the counter until the helmet air supply runs out to 2,000 - it's 
/ decremented by 2 each command so it's 1,000 turns
0x0de2 (0x2480): (0x08) Set var[0x03] = (constant) 0x7d0

/ Set the score index into list#2 for attaching the flask to the helmet (0x111)
0x0de6 (0x2484): (0x08) Set var[0x0b] = (constant) 0x111

/ Set the flag to mark this as scored
/ var[0x0c] is the constant 0x01
0x0dea (0x2488): (0xe2) Set list#2[var[0x0b]] = var[0x0c] (list address 0x169e)

/ Set the second word back to the air flask (0x65)
0x0ded (0x248b): (0x08) Set var[0x2a] = (constant) 0x65

/ Remove the air flask from the game
0x0df0 (0x248e): (0x00) Goto 0x180e

**************************************************************************

/ Print "You can't do that"
0x0df3 (0x2491): (0x00) Goto 0x18ca

**************************************************************************
* Command: "unfasten" or "untie"
**************************************************************************

/ Check to see if the player has the second word object in 
/ their inventory or wearing it or its in the same location as them
0x0df6 (0x2494): (0x01) Gosub 0x1311

/ Print "You can't do that"
0x0df9 (0x2497): (0x00) Goto 0x18ca

**************************************************************************
* Command: "wave" or "shake"
**************************************************************************

/ Check that the object in the second word var[0x2a] is in the player's
/ inventory or being worn by the player - will not return if it's invalid or the 
/ player does not have or is not wearing the object.  Will set var[0x4e] to
/ 0x01 if the object is worn or in the player's inventory
0x0dfc (0x249a): (0x01) Gosub 0x1867

/ Branch if the second word is not the object "holo wand" (0x6b)
0x0dff (0x249d): (0x19) If var[0x2a] != (constant) 0x6b then Goto 0x0e14

/ Object IS the holo wand

/ Print message  "It whistles\n "
0x0e03 (0x24a1): (0x05) Print message (constant) 0x158

/ Branch if the player's current location is NOT one of the following:
/ 0x88 : in the southwest corner of freezer control, beside a control chair. The south wall is a wavery and obscure confusion of flickery projected vids
/ 0x89 : in a comfortable cave carved into warm sandstone. Bright sunlight streams in from the east
/ 0x8a : in a beige alcove at the rear of the cave...
/ 0x8b : in one cubicle of a great library...
/ 0x8c : in a soft, pink room. 
/ 0x8d : in a grey room, lit by flickering candles
/ 0x8e : in a solid black room filled with a glaring white light...
/ 0x8f : on a wide sunlit beach of yellow sand... 
/ 0x90 : on a desert island in the middle of a sweeping coral atoll...
/ 0x91 : in a superb recreation lounge....
/ 0x92 : in a sumptious bathroom with sunken bath, jacuzzi etc.
/ 0x93 : in a bright meadow, full of flowers and sweet grasses
/ 0x94 : under the shade of an old apple tree. The ground is covered with thick, soft moss
/ 0x95 : in a forest glade (yes, really). Warm sunlight filters through the branches overhead, and cute little furry animals peer out from the undergrowth. Narrow leaf-strewn pathways lead in all directions through fragrant vegetation
/ 0x96 : in a snake-pit. Venemous reptiles are slithering towards you
/ 0x97 : in an open-plan control room. As the ship flies 
0x0e06 (0x24a4): (0x1a) If var[0x57] < (constant) 0x88 then Goto 0x0e14
0x0e0a (0x24a8): (0x1b) If var[0x57] > (constant) 0x97 then Goto 0x0e14

/ Location IS one of the above - each of those is a hologram, waving the wand makes the hologram
/ disappear - this is achieved by adding an offset when in these rooms of 0x40 (64) to the 
/ description id.  To get to the description id from the location id, add 0x190 to the location id.
/ The 0x40 is added after this. So to get from "in a soft, pink room", it's usual description id
/ would be 0x190 + 0x8c == 0x21c.  To get to the non-hologram description it's 
/ 0x190 + 0x8c + 0x40 == 0x25c. All of the above will turn into (0x190 + 0x40 + location id):
/ 0x258 : in the southwest corner of Freezer Control, beside a control chair. To the south is an alcove full of machinery
/ 0x259 : in a beige room
/ 0x25a : in a beige bedroom
/ 0x25b : in a pink room
/ 0x25c : in a pink bedroom
/ 0x25d : in a russet room
/ 0x25e : in a russet bedroom beside a crude pit
/ 0x25f : in a yellow room
/ 0x260 : in a yellow bedroom
/ 0x261 : in a well-equipped, but spartan, recreation lounge
/ 0x262 : in an ugly bathroom
/ 0x263 : in a pale green room
/ 0x264 : in a green bedroom
/ 0x265 : in a large round room with many exits
/ 0x266 : in a crudely gouged pit
/ 0x267 :

/ Set the description offset to make the holograms disappear (use the alternative
/ description for the room)
0x0e0e (0x24ac): (0x08) Set var[0x27] = (constant) 0x40

/ Print the room description
0x0e11 (0x24af): (0x00) Goto 0x01d4

**************************************************************************

/ Branch if the object in the second word is NOT the silver tray (0x89)
0x0e14 (0x24b2): (0x19) If var[0x2a] != (constant) 0x89 then Goto 0x0e2e

/ Object IS the silver tray

/ Branch if the player's current location is NOT "at a T-junction where 
/ the dark passage ends at a brightly lit corridor. Looks risky.." (0x80)
/ and print nothing happens
0x0e18 (0x24b6): (0x19) If var[0x57] != (constant) 0x80 then Goto 0x0e2e

/ Player is at the T-junction

/ The laser blast will kill the player if they go Weset without having 
/ first waved the tray

/ Branch if the laser has already been destroyed (0x01)
/ var[0x14] is the constant 0x00
0x0e1c (0x24ba): (0x13) If var[0x3d] > var[0x14] then Goto 0x0e2e

/ Print message  "The tray reflects a laser beam back on itself. You hear an explosion "
0x0e20 (0x24be): (0x05) Print message (constant) 0x185

/ Set the laser status to destroyed (0x01)
/ var[0x0c] is the constant 0x01
0x0e23 (0x24c1): (0x09) Set var[0x3d] = var[0x0c]

/ Set the score index into list#2 for destryoing the laser (0x116)
0x0e26 (0x24c4): (0x08) Set var[0x0b] = (constant) 0x116

/ Set the flag to mark this as scored
/ var[0x0c] is the constant 0x01
0x0e2a (0x24c8): (0xe2) Set list#2[var[0x0b]] = var[0x0c] (list address 0x169e)

/ Laser destroyed 
0x0e2d (0x24cb): (0x02) Return

/ Print the "Nothing happens" cyclic message
0x0e2e (0x24cc): (0x00) Goto 0x1911

**************************************************************************
* Command: "play" or "blow"
**************************************************************************

/ Check that the object in the second word var[0x2a] is in the player's
/ inventory or being worn by the player - will not return if it's invalid or the 
/ player does not have or is not wearing the object.  Will set var[0x4e] to
/ 0x01 if the object is worn or in the player's inventory
0x0e31 (0x24cf): (0x01) Gosub 0x1867

/ Branch if the second word is NOT the "flute" (0x62) and print
/ "Don't be silly" for any other object
0x0e34 (0x24d2): (0x19) If var[0x2a] != (constant) 0x62 then Goto 0x18cf

/ Player is trying to play the flute

/ Print message  "It plays a scale, from low notes to very high "
0x0e39 (0x24d7): (0x05) Print message (constant) 0x183

/ Branch if the supplementary message is NOT set to "A figure with a petrol 
/ bomb stands at the west of the room" (0x17a).  This is used as a status check
/ for this room. Just return if the branch is taken (nothing to smash)
0x0e3c (0x24da): (0x19) If var[0x60] != (constant) 0x17a then Goto 0x0e4e

/ Figure is still stood there 

/ Print message  ". The petrol bomb shatters, surrounding its owner in fire. 
/ She staggers back through a hidden airlock - you will not see her again! "
0x0e41 (0x24df): (0x05) Print message (constant) 0x184

/ Increment the number of turns that the fire has been burning
/ var[0x0c] is the constant 0x01
0x0e44 (0x24e2): (0x0a) Set var[0x56] += var[0x0c]

/ Set the score index into list#2 for beating the figure with the petrol bomb (0x117)
0x0e47 (0x24e5): (0x08) Set var[0x0b] = (constant) 0x117

/ Set the flag to mark this as scored
0x0e4b (0x24e9): (0xe2) Set list#2[var[0x0b]] = var[0x0c] (list address 0x169e)

/ Figure with petrol bomb beaten
0x0e4e (0x24ec): (0x02) Return

**************************************************************************
* Command: "dig"
**************************************************************************

/ Set the message to print to "You've nothing to dig with" (0xbe)
0x0e4f (0x24ed): (0x08) Set var[0x40] = (constant) 0xbe

/ Set the temporary variable to the shovel's dictionary id (0x77)
0x0e52 (0x24f0): (0x08) Set var[0x1b] = (constant) 0x77

/ Get the current location of the shovel (0x77)
0x0e55 (0x24f3): (0xa2) Set var[0x1c] = list#2[var[0x1b]] (list address 0x169e)

/ Branch if the location of the shovel is NOT in the player's inventory (0xe1)
/ and print the "You've nothing to dig with" (0xbe) messages
/ var[0x10] is the constant 0xe1
0x0e58 (0x24f6): (0x11) If var[0x1c] != var[0x10] then Goto 0x0e8b

/ Shovel IS in the player's inventory

/ Set the message to print to "You can't dig here" (0xbf)
0x0e5c (0x24fa): (0x08) Set var[0x40] = (constant) 0xbf

/ Branch if the player's current location is on the web or floating in space
/ as the player can't dig here so print that message
0x0e5f (0x24fd): (0x1a) If var[0x58] < (constant) 0x1a then Goto 0x0e8b

/ Set the message to print to "You dent the shovel" (0xc0)
0x0e63 (0x2501): (0x08) Set var[0x40] = (constant) 0xc0

/ Branch if the player's current location is NOT one of the following locations and print 
/ "You dent the shovel":
/ 0x1a : on a flat snowfield north of an immense unclimbably smooth cliff...
/ 0x1b : on trodden snow between a tall pylon and a hemidome calling itself the "Snowball Hilton"
/ 0x1c : on churned and rutted snow below a tall pylon
/ 0x1d : beside the northern ice-cliff which has a tiny cave at its base. A pylon stands nearby
/ 0x1e : on smooth snow beside a pylon, dwarfed by the north cliff
/ 0x1f : on trampled snow outside a major snowdesic dome...
/ 0x20 : on smooth snow, beside one of a chain of pylons...
/ 0x21 : on soft snow outside a sagging warehouse...
/ 0x22 : at the rim of a colossal hole, hundreds of meters in width...
0x0e66 (0x2504): (0x1b) If var[0x58] > (constant) 0x23 then Goto 0x0e8b

/ Increment the depth of the hole
0x0e6a (0x2508): (0x0a) Set var[0x26] += var[0x0c]

/ Add the depth of the hole to the based message id (0xc0) to get one of the following:
/ 0xc1 : You're in a tiny hole
/ 0xc2 : You're in a large hole
/ 0xc3 : You're at the bottom of a deep pit
/ 0xc4 : The bottom of the hole collapses. You fall into space!
0x0e6d (0x250b): (0x0a) Set var[0x40] += var[0x26]

/ Branch if the current location is NOT "on churned and rutted snow below a tall pylon" (0x1c)
/ as the player will not find anything just dig a deeper hole
0x0e70 (0x250e): (0x19) If var[0x58] != (constant) 0x1c then Goto 0x0e8b

/ Player IS "on churned and rutted snow below a tall pylon" (0x1c)

/ Set the second word to the bunch of keys (0x6c)
0x0e74 (0x2512): (0x08) Set var[0x2a] = (constant) 0x6c

/ Get the current location of the bunch of keys
0x0e77 (0x2515): (0xa2) Set var[0x1c] = list#2[var[0x2a]] (list address 0x169e)

/ Print message  "You find "
0x0e7a (0x2518): (0x05) Print message (constant) 0x48

/ Branch if the keys are "waiting to be discovered" (0xfe)
0x0e7c (0x251a): (0x18) If var[0x1c] == (constant) 0xfe then Goto 0x0e84

/ Keys have already been found so the player finds nothing

/ Print message  "nothing.\n "
0x0e80 (0x251e): (0x05) Print message (constant) 0x3c

/ Print the hole depth messsage and kill the player if they have dug too deep
0x0e82 (0x2520): (0x00) Goto 0x0e8b

**************************************************************************

/ Print the name of the object - always the keys (0x6c)
0x0e84 (0x2522): (0x04) Print message var[0x2a]

/ Print message  ".\n "
0x0e86 (0x2524): (0x05) Print message (constant) 0x07

/ Make the keys appear in the player's location
0x0e88 (0x2526): (0x01) Gosub 0x143e

**************************************************************************

/ Print the hole depth message
0x0e8b (0x2529): (0x04) Print message var[0x40]

/ If the player has dug more than 3 times, kill the player
0x0e8d (0x252b): (0x13) If var[0x26] > var[0x0e] then Goto 0x133c

/ Player successfully dug
0x0e92 (0x2530): (0x02) Return

**************************************************************************
* Command: "fire" or "shoot"
**************************************************************************

/ Check that the object in the second word var[0x2a] is in the player's
/ inventory or being worn by the player - will not return if it's invalid or the 
/ player does not have or is not wearing the object.  Will set var[0x4e] to
/ 0x01 if the object is worn or in the player's inventory
0x0e93 (0x2531): (0x01) Gosub 0x1867

/ Player has the object and it's a valid object

/ Branch if the object is NOT the gun (0x6a) and print "Don't be silly!"
0x0e96 (0x2534): (0x19) If var[0x2a] != (constant) 0x6a then Goto 0x18cf

/ Branch if the location IS "about to hit the fast moving ice-below." (0x19)
0x0e9b (0x2539): (0x18) If var[0x57] == (constant) 0x19 then Goto 0x0ea3

/ Second word is the gun and location is NOT the "about to hit the fast
/ moving ice below" 

/ Print message  "The recoil spins you round "
0x0e9f (0x253d): (0x05) Print message (constant) 0x143

/ Gun shoots
0x0ea2 (0x2540): (0x02) Return

**************************************************************************

/ Player is "about to hit the fast moving ice-below." (0x19)

/ Print message  "The gun matches your speed to the ground's "
0x0ea3 (0x2541): (0x05) Print message (constant) 0x144

/ Set the player's current location to "on a flat snowfield north of an 
/ immense unclimbably smooth cliff." (0x1a)
0x0ea6 (0x2544): (0x08) Set var[0x57] = (constant) 0x1a

/ Print the location description or "it's dark"
0x0ea9 (0x2547): (0x00) Goto 0x01d4

**************************************************************************
* Command: "insert"
**************************************************************************
           
/ Branch if the second word is NOT a verb or direction (objects and NPCs etc
/ have dicitonary ids of 0x50 onwards)
0x0eac (0x254a): (0x1b) If var[0x2a] > (constant) 0x4f then Goto 0x0ec2

/ Second word is a verb or direction - this mostly where there is a throwaway
/ word like "into" or "on"

/ Set the first word to the verb "insert" (0x3d)
/ Note - this is redundant because it's already been checked before coming 
/ here at 0x0539
0x0eb0 (0x254e): (0x08) Set var[0x29] = (constant) 0x3d

/ Set the second word to the third word
0x0eb3 (0x2551): (0x09) Set var[0x2a] = var[0x2b]

/ Set the third word to nothing (0x00)
/ var[0x14] is the constant 0x00
0x0eb6 (0x2554): (0x09) Set var[0x2b] = var[0x14]

/ Update the cached previous command to "insert <object>"

/ Update the cached first word
0x0eb9 (0x2557): (0x08) Set var[0x2d] = (constant) 0x3d

/ Update the cached second word
0x0ebc (0x255a): (0x09) Set var[0x2e] = var[0x2a]

/ Update the cached third word to null (0x00)
/ var[0x14] is the constant 0x00
0x0ebf (0x255d): (0x09) Set var[0x2f] = var[0x14]

**************************************************************************
* Process the insert
**************************************************************************

/ Check that the object in the second word var[0x2a] is in the player's
/ inventory or being worn by the player - will not return if it's invalid or the 
/ player does not have or is not wearing the object.  Will set var[0x4e] to
/ 0x01 if the object is worn or in the player's inventory
0x0ec2 (0x2560): (0x01) Gosub 0x1867

/ Branch if the third word is null (0x00)
/ var[0x14] is the constant 0x00
0x0ec5 (0x2563): (0x10) If var[0x2b] == var[0x14] then Goto 0x0ed6

/ Third word is NOT null 

/ Branch if the matched second word was an NPC or colour or number or
/ fixed object (not a container object)
0x0ec9 (0x2567): (0x1b) If var[0x2b] > (constant) 0x8b then Goto 0x0ed6

/ Check to see if the object is allowed to be inserted (player)
0x0ecd (0x256b): (0x01) Gosub 0x11d3

/ Branch if the object insert was disallowed (e.g. it was a corpse or coffin
/ laser or bomb)
/ Print "You can't do that"
0x0ed0 (0x256e): (0x13) If var[0x4e] > var[0x14] then Goto 0x18ca

/ Return - object was inserted into the other object
0x0ed5 (0x2573): (0x02) Return

**************************************************************************

/ At this point the player's target location is the same as the current location
/ Branch if the target (current) location is NOT "in the diner..." (0x5b)
0x0ed6 (0x2574): (0x19) If var[0x58] != (constant) 0x5b then Goto 0x0f01

/ Player is "in the diner" (0x5b)

/ Branch if the third word is empty (0x00)
/ var[0x14] is the constant 0x00
0x0eda (0x2578): (0x10) If var[0x2b] == var[0x14] then Goto 0x0ee2

/ Branch if the player is thid word is a regular object (0x50 to 0x8c)
0x0ede (0x257c): (0x1a) If var[0x2b] < (constant) 0x8c then Goto 0x0f01

/ Branch if the second word is the "cup" (0x60)
0x0ee2 (0x2580): (0x18) If var[0x2a] == (constant) 0x60 then Goto 0x0ef3

/ Branch if the third word is the "vending machine" (0x9e)
/ Second word could be anything at this point
0x0ee6 (0x2584): (0x18) If var[0x2b] == (constant) 0x9e then Goto 0x0efd

/ Player is "in the diner" (0x5b) and NOT inserting the cup and NOT into
/ the vending machine, so it's going into the trashbank

/ Print message  "The trashbank sucks it in "
0x0eea (0x2588): (0x05) Print message (constant) 0x105

/ Set the target destination for the item to "on a rubbish tip" (0x61)
0x0eed (0x258b): (0x08) Set var[0x58] = (constant) 0x61

/ Move the item to the rubbish tip
0x0ef0 (0x258e): (0x00) Goto 0x143e

**************************************************************************

/ Set the status of the cup to full of liquid (0x01)
0x0ef3 (0x2591): (0x09) Set var[0x6e] = var[0x0c]

/ Set the score index into list#2 for inserting the cup into the "natural
/ wholefood no chemicals" machine to get the think lentil custard" (0x10b)
0x0ef6 (0x2594): (0x08) Set var[0x0b] = (constant) 0x10b

/ Set the flag to mark this as scored
0x0efa (0x2598): (0xe2) Set list#2[var[0x0b]] = var[0x0c] (list address 0x169e)

/ Print message  "The machine fills it with thin lentil custard "
0x0efd (0x259b): (0x05) Print message (constant) 0x106

/ Cup inserted and filled
0x0f00 (0x259e): (0x02) Return

**************************************************************************

/ Set the third word to the lamp (0x87)
0x0f01 (0x259f): (0x08) Set var[0x2b] = (constant) 0x87

/ Try and add the object to the lamp
0x0f04 (0x25a2): (0x01) Gosub 0x11d3

/ Branch if the object was successfully added (0x00) to the lamp
/ var[0x14] is the constant 0x00
0x0f07 (0x25a5): (0x10) If var[0x4e] == var[0x14] then Goto 0x0f36

/ Object could NOT be added to the lamp

/ Set the third word to the video viewer (0x88)
0x0f0b (0x25a9): (0x08) Set var[0x2b] = (constant) 0x88

/ Try and add the object to the video viewer
0x0f0e (0x25ac): (0x01) Gosub 0x11d3

/ Branch if the object was successfully added (0x00) to the video viewer
/ var[0x14] is the constant 0x00
0x0f11 (0x25af): (0x10) If var[0x4e] == var[0x14] then Goto 0x0f36

/ Object could NOT be added to the video viewer

/ Set the third word to the toolbox (0x8b)
0x0f15 (0x25b3): (0x08) Set var[0x2b] = (constant) 0x8b

/ Try and add the object to the toolbox
0x0f18 (0x25b6): (0x01) Gosub 0x11d3

/ Branch if the object was successfully added (0x00) to the toolbox
/ var[0x14] is the constant 0x00
0x0f1b (0x25b9): (0x10) If var[0x4e] == var[0x14] then Goto 0x0f36

/ Set the third word to the floating table (0x8a)
0x0f1f (0x25bd): (0x08) Set var[0x2b] = (constant) 0x8a

/ Try and add the object to the floating table
0x0f22 (0x25c0): (0x01) Gosub 0x11d3

/ Branch if the object was successfully added (0x00) to the floating table
/ var[0x14] is the constant 0x00
0x0f25 (0x25c3): (0x10) If var[0x4e] == var[0x14] then Goto 0x0f36

/ Set the third word to the silver tray (0x89)
0x0f29 (0x25c7): (0x08) Set var[0x2b] = (constant) 0x89

/ Try and add the object to the silver tray
0x0f2c (0x25ca): (0x01) Gosub 0x11d3

/ Branch if the object was successfully added (0x00) to the silver tray
/ var[0x14] is the constant 0x00
0x0f2f (0x25cd): (0x10) If var[0x4e] == var[0x14] then Goto 0x0f36

/ Failed to insert into the lamp, video viewer, toolbox, floating table
/ and silver tray

/ Print "You can't do that"
0x0f33 (0x25d1): (0x00) Goto 0x18ca

/ All done inserting
0x0f36 (0x25d4): (0x02) Return

**************************************************************************
* Command: "turn" or "twist"
**************************************************************************

/ Check that the object in the second word var[0x2a] is in the player's
/ inventory or being worn by the player - will not return if it's invalid or the 
/ player does not have or is not wearing the object.  Will set var[0x4e] to
/ 0x01 if the object is worn or in the player's inventory
0x0f37 (0x25d5): (0x01) Gosub 0x1867

/ Branch if the second word is NOT the keys (0x6c)
0x0f3a (0x25d8): (0x19) If var[0x2a] != (constant) 0x6c then Goto 0x18ca

/ Branch if the player's current location is NOT " in the high control bubble 
/ of the Snowdozer" (0x2f)
0x0f3f (0x25dd): (0x19) If var[0x57] != (constant) 0x2f then Goto 0x1911

/ Player is trying to turn the keys " in the high control bubble 
/ of the Snowdozer"

/ Branch if the status of the snowdozer is mended and say it starts
/ var[0x14] is the constant 0x00
0x0f44 (0x25e2): (0x13) If var[0x1a] > var[0x14] then Goto 0x0f4c

/ Snowdozer has NOT been mended

/ Print message  "The dozer won't start until mended "
0x0f48 (0x25e6): (0x05) Print message (constant) 0x14d

/ Snowdozer won't start
0x0f4b (0x25e9): (0x02) Return

/ Print message  "It turns! A voice intones "Please Leave The Snowdozer" "
0x0f4c (0x25ea): (0x05) Print message (constant) 0x14e

/ Set the snowdozer status to "Keys turned and started" (0x02)
0x0f4f (0x25ed): (0x09) Set var[0x1a] = var[0x0d]

/ Set the score index into list#2 for starting the snowdozer (0x113)
0x0f52 (0x25f0): (0x08) Set var[0x0b] = (constant) 0x113

/ Set the flag to mark this as scored
0x0f56 (0x25f4): (0xe2) Set list#2[var[0x0b]] = var[0x0c] (list address 0x169e)

/ Snowdozer started
0x0f59 (0x25f7): (0x02) Return

**************************************************************************
* Command: "pull"
**************************************************************************

/ Branch if the second word is NOT lever (0xa7)
0x0f5a (0x25f8): (0x19) If var[0x2a] != (constant) 0xa7 then Goto 0x0f8f

/ At this point the player's target location is the same as the current location
/ Branch if the target (current) location is NOT "in a sponge-lined coffin" (0xae)
0x0f5e (0x25fc): (0x19) If var[0x58] != (constant) 0xae then Goto 0x0f76

/ Location is "in a sponge-lined coffin"

/ Branch if the coffin lid is already open (0x01)
/ var[0x14] is the constant 0x00
0x0f62 (0x2600): (0x13) If var[0x35] > var[0x14] then Goto 0x1911

/ Print message  "The lid above rises and a light comes on.. "
0x0f67 (0x2605): (0x05) Print message (constant) 0xdd

/ Set the coffin lid status to open (0x01)
/ var[0x0c] is the constant 0x01
0x0f69 (0x2607): (0x09) Set var[0x35] = var[0x0c]

/ Set the score index into list#2 for opening the coffin lid
0x0f6c (0x260a): (0x08) Set var[0x0b] = (constant) 0x105

/ Set the flag for the score to show the coffin lid has been opened
0x0f70 (0x260e): (0xe2) Set list#2[var[0x0b]] = var[0x0c] (list address 0x169e)

/ Print the location description or "it's dark"
0x0f73 (0x2611): (0x00) Goto 0x01d4

**************************************************************************

/ At this point the player's target location is the same as the current location
/ Branch if the target (current) location is NOT "beside the main instrument panel." (0x84)
0x0f76 (0x2614): (0x19) If var[0x58] != (constant) 0x84 then Goto 0x0f8f

/ Player is "beside the main instrument panel."

/ Branch if the snowdozer has at least had its keys turned and started (0x02)
/ (although you can't be here without getting to status 0x03 which is leaving
/ the snowdozer after it started)
/ var[0x0c] is the constant 0x01
0x0f7a (0x2618): (0x13) If var[0x1a] > var[0x0c] then Goto 0x0f82

/ Snowdozer hasn't had its track repaired or keys turned

/ Print message  ""OUT OF FUEL!" "
0x0f7e (0x261c): (0x05) Print message (constant) 0x150

/ Panel doesn't do anything 
0x0f81 (0x261f): (0x02) Return

**************************************************************************

/ Print message  "It turns! Engines Roar! The Snowball turns away from the sun.. YOU HAVE WON!\n "
0x0f82 (0x2620): (0x05) Print message (constant) 0x151

/ Set the score index into list#2 for pulling the lever and completing the game
0x0f85 (0x2623): (0x08) Set var[0x0b] = (constant) 0x118

/ Set the flag for the score to show the lever has been pulled and the game completed
0x0f89 (0x2627): (0xe2) Set list#2[var[0x0b]] = var[0x0c] (list address 0x169e)

/ Print the score, ask the question "Would you like to play again?"
0x0f8c (0x262a): (0x00) Goto 0x133f

**************************************************************************

/ Branch if the second word is NOT the vending machine (0x9e)
0x0f8f (0x262d): (0x19) If var[0x2a] != (constant) 0x9e then Goto 0x0fa2

/ Branch if the player's target (current) location is NOT "in a padded 
/ cell. The walls are lined by Tuffkwilt (TM) padding,..." (0xb2)
0x0f93 (0x2631): (0x19) If var[0x58] != (constant) 0xb2 then Goto 0x0fa2

/ Print message  "It moves a bit "
0x0f97 (0x2635): (0x05) Print message (constant) 0xf7

/ Add one to the vending machine status to indicate it's been moved for the
/ first time or again
/ var[0x0c] is the constant 0x01
0x0f99 (0x2637): (0x0a) Set var[0x43] += var[0x0c]

/ Branch if the vending machine has been moved at least twice 
/ and print the location description in full
/ var[0x0c] is the constant 0x01
0x0f9c (0x263a): (0x13) If var[0x43] > var[0x0c] then Goto 0x01d4

/ Print the location description or "it's dark"
0x0fa1 (0x263f): (0x02) Return

**************************************************************************

/ Print the "Nothing happens" cyclic message
0x0fa2 (0x2640): (0x00) Goto 0x1911

**************************************************************************
* Command: "search" or "examine"
**************************************************************************

/ Branch if there was no second word (0x00)
/ var[0x14] is the constant 0x00
0x0fa5 (0x2643): (0x10) If var[0x2a] == var[0x14] then Goto 0x115d

/ Set the message to display to "It is nothing special" (0x3b)
0x0faa (0x2648): (0x08) Set var[0x40] = (constant) 0x3b

/ Branch if the second word is NOT a true object (valid ids are 0x50 to 0x8b)
0x0fad (0x264b): (0x1b) If var[0x2a] > (constant) 0x8b then Goto 0x0fc2

/ Branch if the second word is NOT a true object (valid ids are 0x50 to 0x8b)
0x0fb1 (0x264f): (0x1a) If var[0x2a] < (constant) 0x50 then Goto 0x0fc2

/ Object is a true object (0x50 to 0x8b)

/ Check to see if the player has the object in their inventory, is wearing
/ the object or its in their current location.  var[0x4e] will be set to 0x01
/ if this is true
0x0fb5 (0x2653): (0x01) Gosub 0x1311

/ Set the base message id for object descriptions (0x226)
/ (well first is at 0x276)
0x0fb8 (0x2656): (0x08) Set var[0x40] = (constant) 0x226

/ Add the object id to the base message id to get to the object
/ description 
0x0fbc (0x265a): (0x0a) Set var[0x40] += var[0x2a]

/ Set the cyclical offset to 0x02
/ var[0x0d] is the constant 0x02
0x0fbf (0x265d): (0x09) Set var[0x41] = var[0x0d]

/ Branch if the object is NOT the "body" or "corpse" (0x5c)
0x0fc2 (0x2660): (0x19) If var[0x2a] != (constant) 0x5c then Goto 0x0fd1

/ Second word IS the "body" or "corpse" (0x5c)

/ Set the temporary variable to the object id for the "necklace" (0x57)
0x0fc6 (0x2664): (0x08) Set var[0x1b] = (constant) 0x57

/ Get the first location reference for the necklace
0x0fc9 (0x2667): (0xa2) Set var[0x1c] = list#2[var[0x1b]] (list address 0x169e)

/ Branch if the first location reference IS location id 0xbe (represents
/ the "body of a crew-member") and discover the objects by placing them in
/ player's current location
0x0fcc (0x266a): (0x18) If var[0x1c] == (constant) 0xbe then Goto 0x168e

/ Location is NOT on the "body of a crew-member"

**************************************************************************
* Process the player examining the lights / panels and display 
* either 3 lights or 6 lights (mortuary)
**************************************************************************

/ Branch if the second word is NOT "buttons" or "panels" or "lights" or 
/ "indicators" (0xa5)
0x0fd1 (0x266f): (0x19) If var[0x2a] != (constant) 0xa5 then Goto 0x1059

/ Second word IS "buttons" or "panels" or "lights"

/ Set the message id to "You can't see it"
0x0fd6 (0x2674): (0x08) Set var[0x40] = (constant) 0xbd

/ Branch if the player's location IS "winding transpex tube" (0x34) and print
/ the indicator lights
0x0fd9 (0x2677): (0x18) If var[0x58] == (constant) 0x34 then Goto 0x0fe9

/ Branch if the player's location IS "in a curving e/w corridor 
/ south of a wide entrance" (0x42) and print the indicator lights
0x0fdd (0x267b): (0x18) If var[0x58] == (constant) 0x42 then Goto 0x0fe9

/ Branch if the player's location is NOT in the mortuary loop or mortuaries
0x0fe1 (0x267f): (0x1a) If var[0x58] < (constant) 0x44 then Goto 0x100a

/ Branch if the player's location is NOT in the mortuary loop or mortuaries
0x0fe5 (0x2683): (0x1b) If var[0x58] > (constant) 0x4a then Goto 0x100a

/ Location is one of:
/ 0x42 : in a curving e/w corridor south of a wide entrance. A button protrudes from the floor and indicator lights decorate the ceiling
/ 0x44 : in a curving east-west corridor below indicator lights
/ 0x45 : in a curving e/w corridor beside a green door. Lights show above it
/ 0x46 : in a curving e/w corridor beside a blue door. Lights show above it
/ 0x47 : at the entrance to a blue mortuary beside indicator lights and a control panel
/ 0x48 : by the entrance to a green mortuary beside lights and a panel
/ 0x49 : in a blue mortuary beside a smooth ceramic slab. Lights twinkle beside a trapdoor on the ceiling
/ 0x4a : in a green mortuary beside a smooth slab. Indicators illuminate a trapdoor above
/
/ 0x42 and 0x44 to 0x46 are three lights only
/ 0x47 to 0x4a          are six lights

/ Print message  "The indicator lights are "
0x0fe9 (0x2687): (0x05) Print message (constant) 0xd1

/ Set the temporary variable to which freezer disk the player is currently in
0x0feb (0x2689): (0x09) Set var[0x78] = var[0x5a]

/ Set the temporary variable to which sector and level in the freezer disk
/ the player is currently in
0x0fee (0x268c): (0x09) Set var[0x79] = var[0x5c]

/ Print the THREE light colours for freezer disk, sector and level
0x0ff1 (0x268f): (0x01) Gosub 0x1329

/ Reset the message to print to "" (0x02)
0x0ff4 (0x2692): (0x08) Set var[0x40] = (constant) 0x02

/ Branch if the player's location is not either mortuary entrance 
/ or either mortuary
0x0ff7 (0x2695): (0x1a) If var[0x57] < (constant) 0x47 then Goto 0x1008

/ Branch if the player's location is not either mortuary entrance 
/ or either mortuary
0x0ffb (0x2699): (0x1b) If var[0x57] > (constant) 0x4a then Goto 0x1008

/ Player IS in a mortuary entrance or mortuary 

/ Player IS at one of the following locations (all of which have SIX lights
/ i.e. freezer disk, sector, level, first pressed button or black, second pressed 
/ button or black, third pressed button or black):
/ 0x47 : at the entrance to a blue mortuary beside indicator lights and a control panel
/ 0x48 : by the entrance to a green mortuary beside lights and a panel
/ 0x49 : in a blue mortuary beside a smooth ceramic slab. Lights twinkle beside a trapdoor on the ceiling
/ 0x4a : in a green mortuary beside a smooth slab. Indicators illuminate a trapdoor above

/ Set the temporary variable to the last 3 colours to print either 
/ black, black, black if the player has not pressed any buttons or 
/ the colours of the buttons they pressed
0x0fff (0x269d): (0x09) Set var[0x72] = var[0x46]

/ Set the temporary variable that indicates how many colours to print to three
/ (101)
0x1002 (0x26a0): (0x08) Set var[0x73] = (constant) 0x65

/ Print the three colours
0x1005 (0x26a3): (0x01) Gosub 0x165a

/ Print message  ".\n "
0x1008 (0x26a6): (0x05) Print message (constant) 0x07

**************************************************************************
* Check if the player is examining yellow and green buttons
**************************************************************************

/ Branch if the player's location IS the "blue glass elevator" (0x3f) and 
/ print the panel of coloured buttons 
0x100a (0x26a8): (0x18) If var[0x58] == (constant) 0x3f then Goto 0x101a

/ Branch if the player's location IS the "entrance to the blue mortuary" 
/ (0x47) and print the panel of coloured buttons 
0x100e (0x26ac): (0x18) If var[0x57] == (constant) 0x47 then Goto 0x101a

/ Branch if the player's location IS the "entrance to the green mortuary" 
/ (0x48) and print the panel of coloured buttons 
0x1012 (0x26b0): (0x18) If var[0x57] == (constant) 0x48 then Goto 0x101a

/ Branch if the player's location is NOT (0x6c) "in a tasteful pink and 
/ green alcove beside a security door"
0x1016 (0x26b4): (0x19) If var[0x57] != (constant) 0x6c then Goto 0x101f

/ Player IS in the "blue glass elevator" (0x3f) or entrance to one of the 
/ mortuaries (0x47 and 0x48) or next to the security door (0x6c)

/ Print message  "The panel has 10 buttons: black, brown, red, orange, yellow, green, blue, purple, grey and white "
0x101a (0x26b8): (0x05) Print message (constant) 0xaa

/ Set the default message to print to "."
0x101c (0x26ba): (0x08) Set var[0x40] = (constant) 0x07

/ Branch if location id is less than the first airlock (0x98)
0x101f (0x26bd): (0x1a) If var[0x58] < (constant) 0x98 then Goto 0x102a

/ Branch if location id is greater than the last airlock (0x9d)
0x1023 (0x26c1): (0x1b) If var[0x58] > (constant) 0x9d then Goto 0x102a

/ Location is one of the airlocks i.e. 
/ 0x98 : in a cylindrical airlock between two iris doors
/ 0x99 : in a featureless clindrical airlock between two iris doors
/ 0x9a : in a cubic airlock between two iris doors
/ 0x9b : in a vertical airlock between two iris doors
/ 0x9c : in an ice tunnel
/ 0x9d : in a tiny stratoglider. It is extensibly damaged

/ Airlocks have two buttons (two doors)

/ Set the default message to print to "The panel has yellow and green 
/ buttons" (0xab)
0x1027 (0x26c5): (0x08) Set var[0x40] = (constant) 0xab

**************************************************************************
* Check if the player is examining a button in a location where it exists
**************************************************************************

/ Branch if the player is on the "shuttle platform" (0x25)
0x102a (0x26c8): (0x18) If var[0x58] == (constant) 0x25 then Goto 0x1056

/ Branch if the player is "in a snowrail carriage" (0x2e)
0x102e (0x26cc): (0x18) If var[0x58] == (constant) 0x2e then Goto 0x1056

/ Branch if the player is "on a curving path in a 100m torus" (0x37)
0x1032 (0x26d0): (0x18) If var[0x58] == (constant) 0x37 then Goto 0x1056

/ Branch if the player is "in a curving e/w corridor south of a wide 
/ entrance" (0x42)
0x1036 (0x26d4): (0x18) If var[0x58] == (constant) 0x42 then Goto 0x1056

/ Branch if the player is "at the south end of a narrowing 
/ marblon cylinder" (0x4b)
0x103a (0x26d8): (0x18) If var[0x58] == (constant) 0x4b then Goto 0x1056

/ Branch if the player is "at the north end of a narrowing 
/ marblon cylinder" (0x4c)
0x103e (0x26dc): (0x18) If var[0x58] == (constant) 0x4c then Goto 0x1056

/ Branch if the player is "in a beige, kidney-shaped entrance hall" (0x6b)
0x1042 (0x26e0): (0x18) If var[0x58] == (constant) 0x6b then Goto 0x1056

/ Branch if the player is "on narrow, winding stairs leading down to an
/ airlock iris" (0x6e)
0x1046 (0x26e4): (0x18) If var[0x58] == (constant) 0x6e then Goto 0x1056
/ Branch if th eplayer is "in a ruined bubble farm" (0x70)
0x104a (0x26e8): (0x18) If var[0x58] == (constant) 0x70 then Goto 0x1056

/ Branch if the player is "in a vast docking bay" (0xa0)
0x104e (0x26ec): (0x18) If var[0x58] == (constant) 0xa0 then Goto 0x1056

/ Branch if the player is NOT "in the bright, tidy docking bay of the crew 
/ habidome" (0xa1)
0x1052 (0x26f0): (0x19) If var[0x58] != (constant) 0xa1 then Goto 0x1059

/ Set the messsage to display to "The button is easy to press" (0xac)
0x1056 (0x26f4): (0x08) Set var[0x40] = (constant) 0xac

**************************************************************************
* Check if the player is examining the vending machine in the diner
**************************************************************************

/ Branch if the second word is NOT "vending" or "machine" or "slot" (0x9e)
0x1059 (0x26f7): (0x19) If var[0x2a] != (constant) 0x9e then Goto 0x106b

/ Second word IS "vending" or "machine" or "slot"

/ Branch if the player is NOT "in the diner" (0x5b)
0x105d (0x26fb): (0x19) If var[0x58] != (constant) 0x5b then Goto 0x1064

/ Player IS in the diner

/ Set the message to "The machine is psionic and designed to dispense 
/ your favourite drink" (0xf8)
0x1061 (0x26ff): (0x08) Set var[0x40] = (constant) 0xf8

**************************************************************************
* Check if the player is examining the nuritmat machine
**************************************************************************

/ Branch if the player is NOT "in a padded cell" (0xb2)
0x1064 (0x2702): (0x19) If var[0x58] != (constant) 0xb2 then Goto 0x106b

/ Player IS "in a padded cell" 

/ Set the message to "The nutrimat machine is decrepit. It's also loose"
0x1068 (0x2706): (0x08) Set var[0x40] = (constant) 0xf6

**************************************************************************
* Check if the player is examining the screen
**************************************************************************

/ Branch if there is nothing (0x00) showing on the screen currently
/ var[0x14] is the constant 0x00
0x106b (0x2709): (0x10) If var[0x20] == var[0x14] then Goto 0x10ad

/ Something showing on the screen

/ Branch if the second word is NOT "in an aisle between crates in 
/ the stores." (0xa9)
0x106f (0x270d): (0x19) If var[0x2a] != (constant) 0xa9 then Goto 0x1079

/ Print message  "The screen shows "
0x1073 (0x2711): (0x05) Print message (constant) 0x176

/ Print what is on the screen
0x1076 (0x2714): (0x00) Goto 0x12ac

**************************************************************************
* Check if the player is examining a menu number on the screen
**************************************************************************

/ Branch if the second word is not a number 
0x1079 (0x2717): (0x1a) If var[0x2a] < (constant) 0xc8 then Goto 0x10ad

/ Branch if the second word is not a number 
0x107d (0x271b): (0x1b) If var[0x2a] > (constant) 0xd1 then Goto 0x10ad

/ Player is examining a number

/ Branch if the player examined "0" (0xc8)
0x1081 (0x271f): (0x18) If var[0x2a] == (constant) 0xc8 then Goto 0x18cf

/ Player did NOT examine "0" - add on the number to the code of the current
/ shown menu item e.g. if the use is on the Info Menu Item (0x2a) and examines
/ "2. Fight Logs" menu item by typing "examine 2" then it will set 
/ the second word to the code of the new menu item e.g.
/ 
/ Dictionary id of "two"  - 0xca
/ Dictionary id of "zero" - 0xc8
/ Info Menu Item          - 0x2a
/ Flight logs             - 0x31
/ 
/ Second word set to = 0xca - 0xc8 + 0x2a
/ Second word set to =     0x02    + 0x2a
/ Second word set to =            0x31 (Flight logs)

/ Set the temporary variable to "0" (0xc8)
0x1086 (0x2724): (0x08) Set var[0x72] = (constant) 0xc8

/ Add on the code for the currently shown item on the screen 
0x1089 (0x2727): (0x0a) Set var[0x2a] += var[0x20]

/ Remove the base message id for "black" i.e. 0xc8
/ so var[0x2a] now contains the new menu item code 
0x108c (0x272a): (0x0b) Set var[0x2a] -= var[0x72]

/ To understand this look at the definition of list#3 at the 
/ start of this file

/ Set another temporary variable to the code of the current menu
/ e.g. root menu (0x28), Info menu (0x2f), desk menu (0x35) etc
0x108f (0x272d): (0x09) Set var[0x1b] = var[0x20]

/ Add 1 to the menu item's number to move to the next option 
/ on that particular menu (e.g. adding 1 to the root menu (0x28)
/ makes 0x29 and is the "1, Instructions" option
/ var[0x0c] is the constant 0x01
0x1092 (0x2730): (0x0a) Set var[0x1b] += var[0x0c]

/ Branch if the var[0x1b] now holds the selected menu item 
0x1095 (0x2733): (0x10) If var[0x1b] == var[0x2a] then Goto 0x10a3

/ Get the message or indirection command for the screen 
0x1099 (0x2737): (0xa3) Set var[0x1c] = list#3[var[0x1b]] (list address 0x164e)

/ At the end of every menu and sub-menu, the last option always
/ takes the player back to the root menu (including on the root menu)
/ as there will an indirection back to 0x28, the root menu
/ Branch if this option does not take the player to the root menu (0x28)
/ and add another one to see if that menu option matches the number 
/ the player examined
0x109c (0x273a): (0x19) If var[0x1c] != (constant) 0x28 then Goto 0x1092

/ Player selected an invalid number (greater than any on the screen) -
/ as the last menu option on a menu or submenu redirects the player to the
/ root menu

/ Print "Don't be silly! "
0x10a0 (0x273e): (0x00) Goto 0x18cf

**************************************************************************

/ Menu item found that matched the number that the player selected

/ Print message  "It becomes brighter "
0x10a3 (0x2741): (0x05) Print message (constant) 0x174

/ Set the currently selected (not shown, player has to blink to show it)
/ menu to the menu the play just examined the number of
0x10a6 (0x2744): (0x09) Set var[0x21] = var[0x2a]

/ Set the second word to 0xe2 - why? setting it to a smaller value
/ doesn't break or change anything so why not back to the dictonary code
/ for the colour?  Maybe this was once to avoid any other subsequent 
/ search processing so set it to high to an object that doesn't exist
/ var[0x11] is the constant 0xe2
0x10a9 (0x2747): (0x09) Set var[0x2a] = var[0x11]

/ Done processing the screen options being examined 
0x10ac (0x274a): (0x02) Return

**************************************************************************
* Process if the player is examining the video viewer and if it 
* contains the batpak and mempak - if so give the player's coffin
* colours and the crew member's coffing colours
**************************************************************************

/ Branch if the second word is NOT the "video viewer" (0x88)
0x10ad (0x274b): (0x19) If var[0x2a] != (constant) 0x88 then Goto 0x10ea

/ Second word IS the "video viewer"

/ Set the temporary variable to the "LL9 batpak" (0x5b)
0x10b1 (0x274f): (0x08) Set var[0x1b] = (constant) 0x5b

/ Get the first location reference of the "LL9 batpak"
0x10b4 (0x2752): (0xa2) Set var[0x1c] = list#2[var[0x1b]] (list address 0x169e)

/ Branch if the "LL9 batpak" is NOT in the "video viewer"
0x10b7 (0x2755): (0x19) If var[0x1c] != (constant) 0xc5 then Goto 0x10ea

/ "LL9 batpak" IS in the "video viewer"

/ Set the temporary variable to the "mempak" (0x70)
0x10bb (0x2759): (0x08) Set var[0x1b] = (constant) 0x70

/ Get the first location reference of the "mempak"
0x10be (0x275c): (0xa2) Set var[0x1c] = list#2[var[0x1b]] (list address 0x169e)

/ Branch if the location is NOT  in the "video viewer"
0x10c1 (0x275f): (0x19) If var[0x1c] != (constant) 0xc5 then Goto 0x10ea

/ "mempak" and "LL9 batpak" ARE in the "video viewer"

/ Print message  "Your coffin code is blue mortuary "
0x10c5 (0x2763): (0x05) Print message (constant) 0x120

/ Set the first colour (freezer disk) to "red" (0x02)
0x10c8 (0x2766): (0x08) Set var[0x78] = (constant) 0x02

/ Set the second and third colours to "black" (0x00) and white (0x09)
/ Second colour is the freezer disk level, third colour is the freezer disk sector
/ Calculated at 0 x 10 + 9 x 1
0x10cb (0x2769): (0x08) Set var[0x79] = (constant) 0x09

/ Set the last three colours to starting position of the player's coffin
/ (randomly calculated at the start)
0x10ce (0x276c): (0x09) Set var[0x7a] = var[0x49]

/ Print the player's coffin colours (all six)
0x10d1 (0x276f): (0x01) Gosub 0x131a

/ Print message  "And there's a frozen crewmember in green with code "
0x10d4 (0x2772): (0x05) Print message (constant) 0x121

/ Set the first colour to the crew member's freezer disk colour
0x10d7 (0x2775): (0x09) Set var[0x78] = var[0x7f]

/ Set the second and third colours to the crew member's second and 
/ third colours 
0x10da (0x2778): (0x09) Set var[0x79] = var[0x80]

/ Set the last three colours to the crew member's last three deployment
/ colours
0x10dd (0x277b): (0x09) Set var[0x7a] = var[0x4b]

/ Set the score index into list#2 for successfully examining the video
/ viewer (0x10a)
0x10e0 (0x277e): (0x08) Set var[0x0b] = (constant) 0x10a

/ Set the flag to mark this as scored
/ var[0x0c] is the constant 0x01
0x10e4 (0x2782): (0xe2) Set list#2[var[0x0b]] = var[0x0c] (list address 0x169e)

/ Print the crew member's coffin colours 
0x10e7 (0x2785): (0x00) Goto 0x131a

**************************************************************************

/ Player has not inserted the mempak and/or has removed the batpak from
/ the viewer.  

/ Print the "The viewer has openings for a battery and a mempak" (0x2ae)
0x10ea (0x2788): (0x04) Print message var[0x40]

**************************************************************************
* Check to see if the player is examining the bracelet
**************************************************************************

/ Branch if the second word is NOT the bracelet
0x10ec (0x278a): (0x19) If var[0x2a] != (constant) 0x54 then Goto 0x10f9

/ Second word IS the "bracelet"

/ The lights on the bracelet are interesting, there are either 3, 4 or 5 lights:
/ - First 1 or 2 or 3 lights are derived from the player's current location
/    - if the location is < 10 then only 1 light will be printed
/    - if the location is > 9 and < 100 then 2 lights will be printed
/    - if the location is > 100 then 3 lights will be printed
/ - The last two lights derived from which freezer disk the player is currently in
/    - first is always black because the player's freezer disk colour can only 
/      be black (0x00) to white (0x09)
/    - second is the freezer disk the player is currently in
/
/ If the player is in location 0x01 only one colour would be printed "brown" (0x01)
/        which is 0x01 x 1 (1)
/ If the player is in location 0x09 only one colour would be printed "white" (0x09)
/        which is 0x09 x 1 (9)
/ If the player is in location 0x0a two colours would be printed "brown" (0x01) following by black (0x00)
/        which is 0x01 x 10 + 0x00 x 1 = 0x0a (10)
/ If the player is in location 0x63 two colours would be printed "white" (0x09) following by white (0x09)
/        which is 0x09 x 10 + 0x09 x 1 = 0x63 (99)
/ If the player is in location 0x64 three colours would be printed "brown" (0x01) following by black (0x00) and black (0x00)
/        which is 0x01 x 100 + 0x00 x 10 + 0x00 x 1 = 0x64 (100)
/ If the player is in location 0x64 three colours would be printed "brown" (0x01) following by black (0x00) and black (0x00)
/        which is 0x01 x 100 + 0x00 x 10 + 0x00 x 1 = 0x64 (100)
/ If the player is in location 0xb3 three colours would be printed "brown" (0x01) following by purple (0x07) and white (0x09)
/        which is 0x01 x 100 + 0x07 x 10 + 0x09 x 1 = 0x64 (100)
/
/ These are always followed by black and then the freezer disk the player is in

/ Set the temporary variable to the player's current location
0x10f0 (0x278e): (0x09) Set var[0x78] = var[0x57]

/ Set another temporary variable to freezer disk in which the player is in
0x10f3 (0x2791): (0x09) Set var[0x79] = var[0x59]

/ Print the colours on the bracelet, 1, 2 or 3 lights
0x10f6 (0x2794): (0x00) Goto 0x1329

**************************************************************************
* Check to see if the player is examining a coffin
**************************************************************************

/ Branch if the second word is NOT the "coffin" (0x5f)
0x10f9 (0x2797): (0x19) If var[0x2a] != (constant) 0x5f then Goto 0x1122

/ Second word IS the "coffin" 

/ Set the temporary variable to the to the first colour of the 
/ coffin's deployment location
0x10fd (0x279b): (0x09) Set var[0x78] = var[0x5e]

/ Set the temporary variable to the second and third colours of the 
/ coffin's deployment location
0x1100 (0x279e): (0x09) Set var[0x79] = var[0x5f]

/ Set the temporary variable to the last three colours of the 
/ coffin's deployment location
0x1103 (0x27a1): (0x09) Set var[0x7a] = var[0x48]

/ Print the coffin's 6 indicator lights 
0x1106 (0x27a4): (0x01) Gosub 0x131a

/ Branch if the coffins IS closed (0x00)
/ var[0x14] is the constant 0x00
0x1109 (0x27a7): (0x10) If var[0x52] == var[0x14] then Goto 0x1121

/ Coffin IS open (0x01)

/ Set the message to "It's empty" (0xa3)
0x110d (0x27ab): (0x08) Set var[0x40] = (constant) 0xa3

/ Branch if the coffin contents indicator is "empty" (0x00) and 
/ print the "It's empty" message
/ var[0x14] is the constant 0x00
0x1110 (0x27ae): (0x10) If var[0x36] == var[0x14] then Goto 0x111f

/ Set the message to "There's a woman in the coffin" (0xa4)
0x1114 (0x27b2): (0x08) Set var[0x40] = (constant) 0xa4

/ Branch if the coffin contents indicator is "woman" (0x01) and 
/ print the "There's a woman in the coffin" message
/ var[0x0c] is the constant 0x01
0x1117 (0x27b5): (0x10) If var[0x36] == var[0x0c] then Goto 0x111f

/ Set the message to "A crewmember is inside" (0x123)
0x111b (0x27b9): (0x08) Set var[0x40] = (constant) 0x123

/ Print the appropriate message
0x111f (0x27bd): (0x04) Print message var[0x40]

/ All done
0x1121 (0x27bf): (0x02) Return

**************************************************************************
* Process if the player is examining a container object 
**************************************************************************

/ Set the target destination to the location that represents the contents
/ of the tray.  Used when calling the subroutine to print the items in it.
0x1122 (0x27c0): (0x08) Set var[0x58] = (constant) 0xc1

/ Branch if the second word IS the "tray" (0x89) and print its contents
0x1125 (0x27c3): (0x18) If var[0x2a] == (constant) 0x89 then Goto 0x1153

**************************************************************************

/ Second word is NOT the "tray"

/ Set the target destination to the location that represents the contents
/ of the floating table.  Used when calling the subroutine to print the items in it.
0x1129 (0x27c7): (0x08) Set var[0x58] = (constant) 0xc3

/ Branch if the second word IS the "floating table" (0x8a) and print its contents
0x112c (0x27ca): (0x18) If var[0x2a] == (constant) 0x8a then Goto 0x1153

**************************************************************************

/ Set the target destination to the location that represents the contents
/ of the toolbox.  Used when calling the subroutine to print the items in it.
0x1130 (0x27ce): (0x08) Set var[0x58] = (constant) 0xc4

/ Branch if the second word is NOT the "toolbox" (0x8n)
0x1133 (0x27d1): (0x19) If var[0x2a] != (constant) 0x8b then Goto 0x113e

/ Second word IS the "toolbox" (0x8b) 

/ Branch if the toolbox is open (0x01)
/ var[0x14] is the constant 0x00
0x1137 (0x27d5): (0x13) If var[0x53] > var[0x14] then Goto 0x1153

/ Toolbox is closed (0x00)

/ Print message  "(tight shut) "
0x113b (0x27d9): (0x05) Print message (constant) 0x124

**************************************************************************

/ Set the target destination to the location that represents the contents
/ of the video viewer.  Used when calling the subroutine to print the items in it.
0x113e (0x27dc): (0x08) Set var[0x58] = (constant) 0xc5

/ Branch if the second word IS the video viewer and print its contents
0x1141 (0x27df): (0x18) If var[0x2a] == (constant) 0x88 then Goto 0x1153

/ Second word is NOT the video viewer

**************************************************************************

/ Set the target destination to the location that represents the contents
/ of the lamp.  Used when calling the subroutine to print the items in it.
0x1145 (0x27e3): (0x08) Set var[0x58] = (constant) 0xc6

/ Branch if the second word IS the lamp and print its contents
0x1148 (0x27e6): (0x18) If var[0x2a] == (constant) 0x87 then Goto 0x1153

**************************************************************************

/ Set the target destination to the location that represents the contents
/ of the stacker lift.  Used when calling the subroutine to print the items in it.
0x114c (0x27ea): (0x08) Set var[0x58] = (constant) 0xc7

/ Branch if the second word is NOT the stacker lift
0x114f (0x27ed): (0x19) If var[0x2a] != (constant) 0x81 then Goto 0x1159

**************************************************************************

/ Second word is either the tray, floating table, toolbox, video viewer
/ lamp or stacker lift

/ Set the message to print to ". It holds" (0x49)
0x1153 (0x27f1): (0x08) Set var[0x40] = (constant) 0x49

/ Print the contents of the container object
0x1156 (0x27f4): (0x01) Gosub 0x1767

/ Reset the player's target destination back to their current location
0x1159 (0x27f7): (0x09) Set var[0x58] = var[0x57]

/ All done printing the contents of the container object
0x115c (0x27fa): (0x02) Return

**************************************************************************
* Process if the player is examining a location i.e. just "exam" or "search"
**************************************************************************

/ Set the message id to "You find nothing of interest" (0x45)
0x115d (0x27fb): (0x08) Set var[0x40] = (constant) 0x45

/ This section will print one or two messages about things in where the 
/ player has searched or examined 

/ Set the second message to print to the empty string
/ var[0x0d] is the constant 0x02
0x1160 (0x27fe): (0x09) Set var[0x41] = var[0x0d]

/ Branch if the player's current location is NOT "in a solid black room 
/ filled with a glaring white light" (0x8e)
0x1163 (0x2801): (0x19) If var[0x58] != (constant) 0x8e then Goto 0x116a

/ Player IS "in a solid black room filled with a glaring white light" (0x8e)

/ Set the message id to "You can feel a pit in the floor"
0x1167 (0x2805): (0x08) Set var[0x40] = (constant) 0xb4

**************************************************************************

/ Branch if the player's current location is NOT the "blue glass elevator (0x3f)
0x116a (0x2808): (0x19) If var[0x58] != (constant) 0x3f then Goto 0x1174

/ Player IS in the "blue glass elevator" (0x3f)

/ Set the message id to "There's a trapdoor in the floor"
0x116e (0x280c): (0x08) Set var[0x40] = (constant) 0xb5

/ Set the second message id to "There's a trapdoor in the ceiling" (0xb6)
0x1171 (0x280f): (0x08) Set var[0x41] = (constant) 0xb6

**************************************************************************

/ Branch if the player is NOT in the "winch room" (0x3c)
0x1174 (0x2812): (0x19) If var[0x58] != (constant) 0x3c then Goto 0x117b

/ Player IS in the "winch room" (0x3c)

/ Set the message id to "There's a trapdoor in the ceiling"
0x1178 (0x2816): (0x08) Set var[0x40] = (constant) 0xb6

**************************************************************************

/ Branch if the player is NOT either at the "flexible transpex tube" (0x34)
/ or "winding transpex tube" (0x35)
0x117b (0x2819): (0x1a) If var[0x58] < (constant) 0x34 then Goto 0x1186

/ Branch if the player is NOT either at the "flexible transpex tube" (0x34)
/ or "winding transpex tube" (0x35)
0x117f (0x281d): (0x1b) If var[0x58] > (constant) 0x35 then Goto 0x1186

/ Player IS at the "flexible transpex tube" (0x34)
/ or "winding transpex tube" (0x35)

/ Set the message id to "The tube walls are very thin" (0xb7)
0x1183 (0x2821): (0x08) Set var[0x40] = (constant) 0xb7

**************************************************************************

/ Branch if the player is NOT "in a coffin" (0xae)
0x1186 (0x2824): (0x19) If var[0x58] != (constant) 0xae then Goto 0x118d

/ Set the message id to "You notice a lever beside you" (0xb8)
0x118a (0x2828): (0x08) Set var[0x40] = (constant) 0xb8

**************************************************************************

/ Branch if the player is NOT "in the condo: a small, comfortable rest area." (0x59)
0x118d (0x282b): (0x19) If var[0x58] != (constant) 0x59 then Goto 0x11a1

/ Player IS "in the condo: a small, comfortable rest area." (0x59)

/ Set the second word to the "leds" (0x64)
0x1191 (0x282f): (0x08) Set var[0x2a] = (constant) 0x64

/ Get the location of the "leds" 
0x1194 (0x2832): (0xa2) Set var[0x1c] = list#2[var[0x2a]] (list address 0x169e)

/ Branch if the "leds" are NOT undiscovered (0xfe)
0x1197 (0x2835): (0x19) If var[0x1c] != (constant) 0xfe then Goto 0x11a1

/ "leds" are undiscovered

/ Set the message id to "There are LEDs under the bed" (0xb9)
0x119b (0x2839): (0x08) Set var[0x40] = (constant) 0xb9

/ Put the leds in the same location as the player
0x119e (0x283c): (0x01) Gosub 0x143e

**************************************************************************

/ Note - there is NO LONGER a location 0xba
/ Branch if the player is NOT in location 0xba 
0x11a1 (0x283f): (0x19) If var[0x58] != (constant) 0xba then Goto 0x11a8

/ Player IS in location 0xba (can never get here)

/ Set the message to "The machine is a bit loose" (0xba)
0x11a5 (0x2843): (0x08) Set var[0x40] = (constant) 0xba

**************************************************************************

/ Branch if the player IS NOT "on churned and rutted snow below a tall pylon" (0x1c)
0x11a8 (0x2846): (0x19) If var[0x58] != (constant) 0x1c then Goto 0x11af

/ Player IS in location "on churned and rutted snow below a tall pylon"

/ Set the message id to "You notice signs of digging"
0x11ac (0x284a): (0x08) Set var[0x40] = (constant) 0xbb

**************************************************************************

/ Branch if the player is NOT "at a small counter staffed by a 
/ faceless android" (0x66)
0x11af (0x284d): (0x19) If var[0x58] != (constant) 0x66 then Goto 0x11b6

/ Player IS "at a wide counter staffed by a faceless android" (0x66)

/ Set the message id to "A notice reads "ADMIN"" (0xf4)
0x11b3 (0x2851): (0x08) Set var[0x40] = (constant) 0xf4

**************************************************************************

/ Branch if the player is NOT "at a wide counter staffed by a 
/ faceless android" (0x67)
0x11b6 (0x2854): (0x19) If var[0x58] != (constant) 0x67 then Goto 0x11bd

/ Set the message id to "A notice reads "STORES"" (0xf5)
0x11ba (0x2858): (0x08) Set var[0x40] = (constant) 0xf5

/ Branch if the message id to display is NOT "You find nothing of interest" (0x45)
0x11bd (0x285b): (0x19) If var[0x40] != (constant) 0x45 then Goto 0x11ca

/ Message id is still "You find nothing of interest" (0x45)

/ Branch if the location is before the "solid black room" (0x8e) and print
/ the message
0x11c1 (0x285f): (0x1a) If var[0x57] < (constant) 0x8e then Goto 0x11ca

/ Branch if the location is any one of the following and print the message as below:
/ 
/ Will never get here for this as it has a message assigned above:
/
/    0x8e : in a solid black room filled with a glaring white light. Despite the intensity of the illumination, you know it does not show everything clearly. Yet increasing the brightness would only dazzle: concealing more certainly
/
/ Print "You can't see it":
/ 
/    0x8f : on a wide sunlit beach of yellow sand. Several large rocky outcrops rise up all around. Gulls call as they soar overhead
/    0x90 : on a desert island in the middle of a sweeping coral atoll. Palm trees rise overhead: their fallen fronds forming a soft heap
/    0x91 : in a superb recreation lounge, surrounded by a great variety of ways of passing the time: dream-games, exercisers, learndromats, fundroids etc. All are irrepairably smashed
/    0x92 : in a sumptious bathroom with sunken bath, jacuzzi etc.
/    0x93 : in a bright meadow, full of flowers and sweet grasses
/    0x94 : under the shade of an old apple tree. The ground is covered with thick, soft moss
/    0x95 : in a forest glade (yes, really). Warm sunlight filters through the branches overhead, and cute little furry animals peer out from the undergrowth. Narrow leaf-strewn pathways lead in all directions through fragrant vegetation
/    0x96 : in a snake-pit. Venemous reptiles are slithering towards you
/    0x97 : in an open-plan control room. As the ship flies itself there are few controls, just an assortment of computers and displays of no interest to anyone. They're decades out of date - only kept in case the modern stuff fails
/
/ Print "The panel has yellow and green buttons" for the airlocks:
/    0x98 : in a cylindrical airlock between two iris doors
/    0x99 : in a featureless clindrical airlock between two iris doors
/    0x9a : in a cubic airlock between two iris doors
/    0x9b : in a vertical airlock between two iris doors
0x11c5 (0x2863): (0x1a) If var[0x57] < (constant) 0x9c then Goto 0x0fd6

/ Print the appropriate first message for the location
0x11ca (0x2868): (0x04) Print message var[0x40]

/ Print message  "\n "
0x11cc (0x286a): (0x05) Print message (constant) 0x05

/ Print the second message (if any)
0x11ce (0x286c): (0x04) Print message var[0x41]

/ Print message  "\n "
0x11d0 (0x286e): (0x05) Print message (constant) 0x05

/ Room searched / examined
0x11d2 (0x2870): (0x02) Return

**************************************************************************
* Process the player trying to insert an object into a container
/ If it's allowed,     var[0x4e] will be set to 0x00 on return
/ If it's NOT allowed, var[0x4e] will be set to 0x01 on return
**************************************************************************

/ For all calls to this subroutine this will always be set to 0x01 because 
/ it's set by the A-code just before "What now?" is printed (0x0459) and 
/ also at the end of this routine

/ Note - this will never branch hete... 
/ var[0x14] is the constant 0x00
0x11d3 (0x2871): (0x10) If var[0x4e] == var[0x14] then Goto 0x1261

/ Branch if the second word is an container object (0x81 to 0x8b in the 
/ dictionary) or NPC / fixed object (0x8c+) or colour or number.  Can't 
/ insert a container object into another container object and also cannot
/ insert an NPC / fixed object or colour or number
0x11d8 (0x2876): (0x1b) If var[0x2a] > (constant) 0x80 then Goto 0x1261

/ Temporarily cache the second word
0x11dd (0x287b): (0x09) Set var[0x31] = var[0x2a]

/ Set the second word to the third word
0x11e0 (0x287e): (0x09) Set var[0x2a] = var[0x2b]

/ Set the cached second word for the again command to the 
/ the third word (now in the second word)
0x11e3 (0x2881): (0x09) Set var[0x2e] = var[0x2b]

/ Check to see if the player has the object in the second word either
/ in the inventory or wearing it (will never be wearing it)
/ var[0x1c] contains the location of the object in question after the subroutine
/ var[0x4e] is set to 0x01 if it is but 0x00 if it is not
0x11e6 (0x2884): (0x01) Gosub 0x15e1

/ Revert the second word from the temporarily cached value 
0x11e9 (0x2887): (0x09) Set var[0x2a] = var[0x31]

/ Revert the cached second word for the again command to the 
/ the temporarily cached value 
0x11ec (0x288a): (0x09) Set var[0x2e] = var[0x31]

/ Branch if the player is wearing the object or it's in their inventory
0x11ef (0x288d): (0x13) If var[0x4e] > var[0x14] then Goto 0x11f7

/ Player doesn't have the object that is being inserted into

/ Set the object is being worn or in inventory indicator back to 0x01
/ var[0x0c] is the constant 0x01
0x11f3 (0x2891): (0x09) Set var[0x4e] = var[0x0c]

0x11f6 (0x2894): (0x02) Return
**************************************************************************

/ Branch if the second word is the "mempak" (0x70)
0x11f7 (0x2895): (0x18) If var[0x2a] == (constant) 0x70 then Goto 0x1206

/ Branch if the second word is NOT the "battery pack" (0x5b)
0x11fb (0x2899): (0x19) If var[0x2a] != (constant) 0x5b then Goto 0x120d

/ Second word IS the battery pack i.e. "insert batpak"

/ Set the target location to the hidden location "on a great pile of 
/ garbage" (0xc6).  This is the location that represents inside the lamp.
0x11ff (0x289d): (0x08) Set var[0x58] = (constant) 0xc6

/ Branch if the third word is the lamp ("insert batpak lamp") and insert it
0x1202 (0x28a0): (0x18) If var[0x2b] == (constant) 0x87 then Goto 0x125b

/ Set the target location to the special location where the mempak goes
/ when inserted into the viewer. This is the location that represents inside
/ the video viewer
0x1206 (0x28a4): (0x08) Set var[0x58] = (constant) 0xc5

/ Branch if the third word is the video viewer (0x88) and insert it
/ i.e. player typed "insert mempak viewer"
0x1209 (0x28a7): (0x18) If var[0x2b] == (constant) 0x88 then Goto 0x125b

/ NO TOOLBOX ALLOWED

/ Any object with an id less than 0x52 can be only be added to the tray
/ or floating table - this includes:
/ 0x50 - armor
/ 0x51 - visor

/ Branch if it's the armor or visor and skip allowing to be added to the 
/ toolbox
0x120d (0x28ab): (0x1a) If var[0x2a] < (constant) 0x52 then Goto 0x123c

/ TOOLBOX ALLOWED

/ Any object with an id between 0x52 and 0x54 inclusive can be added to the 
/ toolbox, tray or floating table so jump to that point. This includes:
/ 0x52 - dark spectacles
/ 0x53 - hospital gown
/ 0x54 - bracelet

/ Branch if it's the dark spectacles, hospital gown or bracelet and
/ add to the intended container
0x1211 (0x28af): (0x1a) If var[0x2a] < (constant) 0x55 then Goto 0x1235

/ NO TOOLBOX ALLOWED

/ Any object with an id between 0x55 and 0x59 inclusive can be only be 
/ added to the tray or floating table - this includes:
/ 0x55 - helmet
/ 0x56 - leotard
/ 0x57 - necklace

/ Branch if it's the helmet, leotard or necklace and skip allowing to be 
/ added to the toolbox
0x1215 (0x28b3): (0x1a) If var[0x2a] < (constant) 0x5a then Goto 0x123c

/ NO TOOLBOX ALLOWED

/ The crewmember's body cannot be added to the toolbox
/ 0x5c - crewmember's body

/ Branch if it's the crewmember's body and skipp allowing to be added to the 
/ toolbox
0x1219 (0x28b7): (0x18) If var[0x2a] == (constant) 0x5c then Goto 0x123c

/ TOOLBOX ALLOWED

/ Any object with an id between 0x5a and 0x5d excluding 0x5c can be added to the 
/ toolbox, tray or floating table so jump to that point. This includes:
/ 0x5a - paint can
/ 0x5b - batpak
/ 0x5d - debt card

/ Branch if it's the paint can, batpak or debt card and add to the 
/ intended container
0x121d (0x28bb): (0x1a) If var[0x2a] < (constant) 0x5e then Goto 0x1235

/ NO TOOLBOX ALLOWED

/ Any object with an id between 0x5e and 0x65 can be added ONLY 
/ be added to the tray or floating table so jump to that point. This includes:
/ 0x5e - pussy cat
/ 0x5f - coffin
/ 0x60 - cup
/ 0x61 - cylinders
/ 0x62 - electro flute
/ 0x63 - fire extinguisher
/ 0x64 - fault probe
/ 0x65 - flask

/ Branch if it's the pussy cat, coffin, cup, cylinders, electro flute, 
/ fire extinguisher, fault probe or flask and skip allowing to be added to the 
/ toolbox
0x1221 (0x28bf): (0x1a) If var[0x2a] < (constant) 0x66 then Goto 0x123c

/ TOOLBOX ALLOWED

/ Any object with an id between 0x5a and 0x5d excluding 0x5c can be added to the 
/ toolbox, tray or floating table so jump to that point. This includes:
/ 0x6a - gun
/ 0x6b - holo-wand
/ 0x6c - bunch of keys

/ Branch if it's the gun, holowand or bunch of keys and add to the 
/ intended container
0x1225 (0x28c3): (0x1a) If var[0x2a] < (constant) 0x6e then Goto 0x1235

/ NO TOOLBOX ALLOWED

/ Any object with an id between 0x6e and 0x74 can be added ONLY be added to the 
/ tray or floating table so jump to that point. This includes:
/ 0x6e - lance
/ 0x6f - laser
/ 0x70 - mempak

/ Branch if it's the lance, laser, mempak or scalpel and skip allowing
/ to be added to the toolbox
0x1229 (0x28c7): (0x1a) If var[0x2a] < (constant) 0x75 then Goto 0x123c

/ NO TOOLBOX ALLOWED

0x122d (0x28cb): (0x18) If var[0x2a] == (constant) 0x77 then Goto 0x123c

/ NO TOOLBOX ALLOWED

/ Any object with an id greater than 0x7a can be added ONLY be added to the 
/ tray or floating table so jump to that point. 
0x1231 (0x28cf): (0x1b) If var[0x2a] > (constant) 0x7a then Goto 0x123c


/ TOOLBOX ALLOWED

/ Will reach here if the item is one of the following:
/ 0x52 - dark spectacles
/ 0x53 - hospital gown
/ 0x54 - bracelet
/ 0x5a - paint can
/ 0x5b - batpak
/ 0x5d - debt card
/ 0x6a - gun
/ 0x6b - holo-wand
/ 0x6c - bunch of keys
/ 0x75 - scalpel / knife
/ 0x76 - screwdriver 
/ 0x78 - spanner
/ 0x79 - ticket

/ Set the target destination to the inside of the toolbox (0xc4)
0x1235 (0x28d3): (0x08) Set var[0x58] = (constant) 0xc4

/ Branch if the third word is the "toolbox" (0x8b) and add the item to it
0x1238 (0x28d6): (0x18) If var[0x2b] == (constant) 0x8b then Goto 0x125b

/ Set the target destination to the inside of the tray (0xc1)
0x123c (0x28da): (0x08) Set var[0x58] = (constant) 0xc1

/ Branch if the third word is the "tray" (0x89) and add the item to it
0x123f (0x28dd): (0x18) If var[0x2b] == (constant) 0x89 then Goto 0x125b

/ Branch if the second word is the "body" or "corpse" (0x5c) 
0x1243 (0x28e1): (0x18) If var[0x2a] == (constant) 0x5c then Goto 0x1261

/ Branch if the second word is the "coffin" (0x5f)
0x1247 (0x28e5): (0x18) If var[0x2a] == (constant) 0x5f then Goto 0x1261

/ Branch if the second word is the "laser" (0x6e)
0x124b (0x28e9): (0x18) If var[0x2a] == (constant) 0x6f then Goto 0x1261

/ Branch if the second word is the "bomb" (0x7c)
0x124f (0x28ed): (0x18) If var[0x2a] == (constant) 0x7c then Goto 0x1261

/ Set the target destination to the inside of the floating table (0xc3)
0x1253 (0x28f1): (0x08) Set var[0x58] = (constant) 0xc3
 
/ Branch if the second word is the "floating table" (0x8a) and add the item to it
0x1256 (0x28f4): (0x18) If var[0x2b] == (constant) 0x8a then Goto 0x125b

/ Was not allowed to be added
0x125a (0x28f8): (0x02) Return

**************************************************************************

/ Move the object into the location in var[0x58] (put it in the container)
0x125b (0x28f9): (0x01) Gosub 0x143e

/ Set the flag to show it was added (0x00)
/ var[0x14] is the constant 0x00
0x125e (0x28fc): (0x09) Set var[0x4e] = var[0x14]

/ Reset the target location to be the same as the player's current location
0x1261 (0x28ff): (0x09) Set var[0x58] = var[0x57]

/ All done
0x1264 (0x2902): (0x02) Return

**************************************************************************
* Process giving the debt card to either of the faceless androids
**************************************************************************

/ Print message  ""That'll do nicely!!" "
0x1265 (0x2903): (0x05) Print message (constant) 0xe4

/ Set the "next form" status / dictionary id to 0xff.  Player can
/ pick up any form that is less than or equal to this value.  They can pick up
/ the lance when it is set to 0xff
/ var[0x13] is the constant 0xff
0x1267 (0x2905): (0x09) Set var[0x22] = var[0x13]

/ Set the number of red tickets in flight to 0xff. It's a 16-bit value so giving
/ another ticket will set it to 0x100 and so on
/ var[0x13] is the constant 0xff
0x126a (0x2908): (0x09) Set var[0x69] = var[0x13]

/ Note duplicate line - does nothing!!!
/ var[0x13] is the constant 0xff
0x126d (0x290b): (0x09) Set var[0x69] = var[0x13]

/ Remove the debt card from the game
0x1270 (0x290e): (0x00) Goto 0x180e

**************************************************************************
* Process the player giving the android anything but a form, ticket or debt card
**************************************************************************

/ Print message  "The android crushes "
0x1273 (0x2911): (0x05) Print message (constant) 0xe1

/ Print the description of the object
0x1275 (0x2913): (0x04) Print message var[0x2a]

/ Print message  "to pulp! "
0x1277 (0x2915): (0x05) Print message (constant) 0xe2

/ Remove the object from the game by setting its location to 0xff
0x1279 (0x2917): (0x00) Goto 0x180e

**************************************************************************
* Command: "blink" or "wink"
**************************************************************************

/ Branch if nothing is currently shown on the screen (0x00) when seated 
/ at the console in the control chair wearing the translucent visor and
/ and print the "Nothing happens" cyclic message
/ var[0x14] is the constant 0x00
0x127c (0x291a): (0x10) If var[0x20] == var[0x14] then Goto 0x1911

/ Branch if the player has NOT selected a menu item to move to next 
/ when seated at the console in the control chair wearing the 
/ translucent visor and print the "Nothing happens" cyclic message
/ var[0x014] is the constant 0x00
0x1281 (0x291f): (0x10) If var[0x21] == var[0x14] then Goto 0x1911

/ Set the score index into list#2 for the first time the player looks wears 
/ the visor, examines a number and blinks (0x109)
0x1286 (0x2924): (0x08) Set var[0x0b] = (constant) 0x109

/ Set the flag to mark this as scored
0x128a (0x2928): (0xe2) Set list#2[var[0x0b]] = var[0x0c] (list address 0x169e)

/ Print message  "The screen changes to show "
0x128d (0x292b): (0x05) Print message (constant) 0x175

/ Get the screen message code from list#3 using the index in var[0x21]
0x1290 (0x292e): (0xa3) Set var[0x1c] = list#3[var[0x21]] (list address 0x164e)

/ If the message code is < 0x28 it's a message id - if it's not then 
/ it's an index back into list#3

/ Branch if it's a valid message id and print the message before returning
/ to the selection menu
0x1293 (0x2931): (0x1a) If var[0x1c] < (constant) 0x28 then Goto 0x129f

/ It's an index back into the table

/ Set the current shown item to the index 
0x1297 (0x2935): (0x09) Set var[0x20] = var[0x1c]

/ Set the currently selected item to null (0x00)
/ var[0x14] is the constant 0x00
0x129a (0x2938): (0x09) Set var[0x21] = var[0x14]

/ Look up the indirection held in var[0x20], get the message code,
/ add it to 0x15e to get the message id and print it
0x129d (0x293b): (0x00) Goto 0x12ac

**************************************************************************

/ This part shows a content page and returns to the menu above
/ to allow another selection to be made. var[0x1c] will contain a value
/ that is less than 0x28 which, when added to 0x15e, gives a message id to print

/ Set the temporary variable to the base message id for the screen messages
0x129f (0x293d): (0x08) Set var[0x72] = (constant) 0x15e

/ Add the offset held in list#3 for what the player just selected i.e.
/ they examined onscreen and then blinked at
0x12a3 (0x2941): (0x0a) Set var[0x72] += var[0x1c]

/ Print new the screen contents
0x12a6 (0x2944): (0x04) Print message var[0x72]

/ Print message  ". Then you return to the menu "
0x12a8 (0x2946): (0x05) Print message (constant) 0x178

/ Content page displayed
0x12ab (0x2949): (0x02) Return

**************************************************************************

/ Set the temporary variable to the base message id for the screen messages
0x12ac (0x294a): (0x08) Set var[0x72] = (constant) 0x15e

/ Look up the value in list#3 to get the message code 
0x12b0 (0x294e): (0xa3) Set var[0x1c] = list#3[var[0x20]] (list address 0x164e)

/ Add 0x15e to the message code to get the message id
0x12b3 (0x2951): (0x0a) Set var[0x72] += var[0x1c]

/ Print the message based on the message id
0x12b6 (0x2954): (0x04) Print message var[0x72]

/ Content page displayed 
0x12b8 (0x2956): (0x02) Return

**************************************************************************
* Process the player pressing the fire extinguisher
**************************************************************************

/ Print message  "Nitrogen blasts out "
0x12b9 (0x2957): (0x05) Print message (constant) 0x186

/ Branch if the player's current lcoation is NOT " in an open-plan 
/ control room." (0x97)
0x12bc (0x295a): (0x19) If var[0x57] != (constant) 0x97 then Goto 0x12cb

/ Branch if the room is NOT yet on fire - when it is there will be a 
/ supplemental description for the room from one of the following:
/ 0x17b  /  0x4bed  : The room is on fire!
/ 0x17c  /  0x4bf7  : The blaze intensifies
/ 0x17d  /  0x4c05  : The fire blazes fiercely
/ 0x17e  /  0x4c15  : Flames are melting the walls
0x12c0 (0x295e): (0x1a) If var[0x60] < (constant) 0x17b then Goto 0x12cb

/ Room is ablaze

/ Print message  "and kills the fire "
0x12c5 (0x2963): (0x05) Print message (constant) 0x187

/ Set the fire to extinguished (0xff)
/ var[0x13] is the constant 0xff
0x12c8 (0x2966): (0x09) Set var[0x56] = var[0x13]

/ Extinguishment processed 
0x12cb (0x2969): (0x02) Return

**************************************************************************
* Command: "weld" or "mend"
**************************************************************************

/ Branch if the supplementary description message is "A massive snowdozer 
/ stands beside a pile of fuel blocks..." (0x148). Surprised it doesn't 
/ do a location id check instead... 
0x12cc (0x296a): (0x18) If var[0x60] == (constant) 0x148 then Goto 0x12d5

/ Print message  "No, you CAN'T weld anything here "
0x12d1 (0x296f): (0x05) Print message (constant) 0x14a

/ No welding allowed 
0x12d4 (0x2972): (0x02) Return

**************************************************************************

/ Set the temporary variable to the translucent visor (0x50)
0x12d5 (0x2973): (0x08) Set var[0x2a] = (constant) 0x50

/ Get the current location of the translucent visor
0x12d8 (0x2976): (0xa2) Set var[0x1c] = list#2[var[0x2a]] (list address 0x169e)

/ Branch if the player is NOT wearing the translucent visor (have to be
/ wearing the visor to weld) by checking the location id is 0xe2
/ var[0x11] is the constant 0xe2
0x12db (0x2979): (0x11) If var[0x1c] != var[0x11] then Goto 0x130b

/ Player is wearing the translucent visor

/ Set the temporary variable to the dark glasses (0x52)
0x12df (0x297d): (0x08) Set var[0x2a] = (constant) 0x52

/ Get the current location of the dark glasses
0x12e2 (0x2980): (0xa2) Set var[0x1c] = list#2[var[0x2a]] (list address 0x169e)

/ Branch if the player is NOT wearing the dark glasses (have to be
/ wearing the visor to weld) by checking the location id is 0xe2
/ var[0x11] is the constant 0xe2
0x12e5 (0x2983): (0x11) If var[0x1c] != var[0x11] then Goto 0x130b

/ Player is wearing the translucent visor and dark glasses

/ Set the temporary variable to the pair of linked cylinders (0x61)
0x12e9 (0x2987): (0x08) Set var[0x2a] = (constant) 0x61

/ Get the current location of the linked cylinders 
0x12ec (0x298a): (0xa2) Set var[0x1c] = list#2[var[0x2a]] (list address 0x169e)

/ Branch if the player does not have the pair of linked cyclinders
/ in their inventory  by checking the location id is 0xe1
/ var[0x10] is the constant 0xe1
0x12ef (0x298d): (0x11) If var[0x1c] != var[0x10] then Goto 0x130b

/ Player is wearing the translucent visor and dark glasses
/ Player has the pair of linked cylinders

/ Set the temporary variable to the pair of the lance (0x6e)
0x12f3 (0x2991): (0x08) Set var[0x2a] = (constant) 0x6e

/ Get the current location of the lance
0x12f6 (0x2994): (0xa2) Set var[0x1c] = list#2[var[0x2a]] (list address 0x169e)

/ Branch if the player does not have the lance 
/ in their inventory  by checking the location id is 0xe1
/ var[0x10] is the constant 0xe1
0x12f9 (0x2997): (0x11) If var[0x1c] != var[0x10] then Goto 0x130b

/ Player is wearing the translucent visor and dark glasses
/ Player has the pair of linked cylinders and the lance

/ Print message  "You successfully weld the snowdozer's track. It is mended! "
0x12fd (0x299b): (0x05) Print message (constant) 0x14c

/ Set the snowdozer status to "Snowdozer track welded/mended" (0x01)
/ var[0x0c] is the constant 0x01
0x1300 (0x299e): (0x09) Set var[0x1a] = var[0x0c]

/ Set the score index into list#2 for the track has been mended/welded 
0x1303 (0x29a1): (0x08) Set var[0x0b] = (constant) 0x112

/ Set the flag for the score to show the track has been mended/welded
0x1307 (0x29a5): (0xe2) Set list#2[var[0x0b]] = var[0x0c] (list address 0x169e)

/ Successfully welded 
0x130a (0x29a8): (0x02) Return

**************************************************************************

/ Print message  "You can't weld without "
0x130b (0x29a9): (0x05) Print message (constant) 0x14b

/ Print the name of the object
0x130e (0x29ac): (0x04) Print message var[0x2a]

/ No welding
0x1310 (0x29ae): (0x02) Return

**************************************************************************
* Check if the player has the object or is wearing it or in the same
* location
**************************************************************************

/ Check to see if the player has the second word object in 
/ their inventory or wearing it or its in the same location as them
/ (sets flag var[0x4e] only if they are wearing it or it's in their inventory)
0x1311 (0x29af): (0x01) Gosub 0x15e1

/ Branch and check again for some reason if it's in their inventory
/ or wearing it (no location check)
/ var[0x14] is the constant 0x00
0x1314 (0x29b2): (0x10) If var[0x4e] == var[0x14] then Goto 0x1867

/ Player has the object in their inventory or is wearing it
0x1319 (0x29b7): (0x02) Return

**************************************************************************
* Print the colour of the player's or cremember's or general coffin lights 
* or the indicator lights in the morgue
**************************************************************************

/ Print the THREE light colours for freezer disk, sector and level
0x131a (0x29b8): (0x01) Gosub 0x1329

/ Set the variable to the last three coffin or indicator lights
0x131d (0x29bb): (0x09) Set var[0x72] = var[0x7a]

/ Set the variable to print a maximum of three colours
0x1320 (0x29be): (0x08) Set var[0x73] = (constant) 0x65

/ Print the colours
0x1323 (0x29c1): (0x01) Gosub 0x165a

/ Print message  ".\n "
0x1326 (0x29c4): (0x05) Print message (constant) 0x07

/ Printed!
0x1328 (0x29c6): (0x02) Return

**************************************************************************

/ Set the variable to the freezer disk first light
0x1329 (0x29c7): (0x09) Set var[0x72] = var[0x78]

/ Set the variable to print a maximum of one colour
0x132c (0x29ca): (0x08) Set var[0x73] = (constant) 0x02

/ Print the colour
0x132f (0x29cd): (0x01) Gosub 0x165a

/ Set the variable to the freezer disk sector and level
0x1332 (0x29d0): (0x09) Set var[0x72] = var[0x79]

/ Set the variable to print a maximum of two colours
0x1335 (0x29d3): (0x08) Set var[0x73] = (constant) 0x0b

/ Print the colours
0x1338 (0x29d6): (0x01) Gosub 0x165a

/ Freezer disk, sector and level printed
0x133b (0x29d9): (0x02) Return

**************************************************************************
* Kill the player
**************************************************************************

/ Print message  "\nSorry, you seem to be dead\n "
0x133c (0x29da): (0x05) Print message (constant) 0x155

/ Print the player's score
0x133f (0x29dd): (0x01) Gosub 0x08f4

/ Set the message to display to "Would you like to play again?" (0x36)
0x1342 (0x29e0): (0x08) Set var[0x40] = (constant) 0x36

/ Display the message and ask the player for a yes/no resposne
0x1345 (0x29e3): (0x01) Gosub 0x1737

/ Branch if the player wants to play again and reinitialise the game
/ var[0x14] is the constant 0x00
0x1348 (0x29e6): (0x13) If var[0x7b] > var[0x14] then Goto 0x0006

/ Quit the game!
0x134d (0x29eb): (0x06) Function - Quit (0x01)

**************************************************************************
* Perform the following:
* 1.  Reset door status to closed
* 2.  Reset airlock button indicator
* 3.  Reset the sector / level if outside the elevator to black <level>
* 4.  Reset the sector / level if in the elevator to nothing
* 5.  Reset the freezer disk to nothing if in the featureless clindrical airlock
* 6.  Reset the depth of the player's dug hole to nothing
* 7.  Reset the number of pressed buttons to 0
* 8.  Reset the player to not standing on a coffin
* 9.  Set their previous location to where the player is moving from
* 10. Set their current location to where the player is moving to
* 11. Reset the buttons pressed to black, black, back if the player is not
*     in either mortuary beside the slabs
* 12. Set the crew member's coffin location when the player first arrives 
*     at the "...significant cylindrical ledge..."
* 13. Randomly generate the security door code when the player first arrives 
*     at the "...significant cylindrical ledge..."
* 14. Randomly set the object that the damaged janitor droid needs 
*     when the player first arrives at the "...significant cylindrical ledge..."
* 15. Set the score for reaching the "...significant cylindrical ledge..."
* 16. If the player is in the "spotless white alcove" and has a coffin
*     make the machine grab it
* 17. Process the robot butler pusing passed the player
* 18. Print the location description
**************************************************************************

/ Reset the door open status to closed (0x00)
/ var[0x14] is the constant 0x00
0x134f (0x29ed): (0x09) Set var[0x16] = var[0x14]

/ Reset the airlock button indicator (which button the player pressed)
/ var[0x14] is the constant 0x00
0x1352 (0x29f0): (0x09) Set var[0x19] = var[0x14]

/ Reset the holowand room description offset to 0x00
/ var[0x14] is the constant 0x00
0x1355 (0x29f3): (0x09) Set var[0x27] = var[0x14]

/ Branch if the player's current location is NOT "in a curving e/w corridor 
/ south of a wide entrance. A button protrudes from the floor and indicator 
/ lights decorate the ceiling" (0x42)
0x1358 (0x29f6): (0x19) If var[0x58] != (constant) 0x42 then Goto 0x135f

/ Player's current location IS "in a curving e/w corridor south of a wide
/ entrance" (the elevator)

/ Set the player's sector to null and level to their current level
/ Sector will be black (0x00) as effectively this is doing the following:
/ var[0x5c] = 0x00 x 10 + <level in var[0x3f]> x 1
0x135c (0x29fa): (0x09) Set var[0x5c] = var[0x3f]

/ Branch if the player's current location is NOT "in a blue glass elevator" (0x3f)
0x135f (0x29fd): (0x19) If var[0x58] != (constant) 0x3f then Goto 0x1366

/ Player's current location IS "in a blue glass elevator"

/ Reset the player's sector and level to nothing (0x00)
/ var[0x14] is the constant 0x00
0x1363 (0x2a01): (0x09) Set var[0x5c] = var[0x14]

/ Branch if the player's current location is NOT "in a featureless clindrical 
/ airlock between two iris doors" (0x99)
0x1366 (0x2a04): (0x19) If var[0x58] != (constant) 0x99 then Goto 0x136d

/ Player's current location IS "in a featureless clindrical 
/ airlock between two iris doors" (0x99)

/ Player is no longer in one of the freezer disks so reset 
/ the disk to nothing
/ var[0x14] is the constant 0x00
0x136a (0x2a08): (0x09) Set var[0x5a] = var[0x14]

/ Set the previous location of the player to their current position
/ (which at this point is still where they are moving from)
0x136d (0x2a0b): (0x09) Set var[0x55] = var[0x57]

/ Set the current position to the target destination (where they are
/ moving to this turn)
0x1370 (0x2a0e): (0x09) Set var[0x57] = var[0x58]

/ Set their freezer disk to the one worked out above (could be nothing)
0x1373 (0x2a11): (0x09) Set var[0x59] = var[0x5a]

/ Set their freezer disk sector and level to the one worked out above 
/ (could be nothing)
0x1376 (0x2a14): (0x09) Set var[0x5b] = var[0x5c]

/ Reset the depth of the player's dug hole to 0x00
/ var[0x14] is the constant 0x00
0x1379 (0x2a17): (0x09) Set var[0x26] = var[0x14]

/ Reset the number of pressed buttons to 0x00
/ var[0x14] is the constant 0x00
0x137c (0x2a1a): (0x09) Set var[0x47] = var[0x14]

/ Reset the player's status to NOT standing on a coffin (0x00)
/ var[0x14] is the constant 0x00
0x137f (0x2a1d): (0x09) Set var[0x05] = var[0x14]

/ Branch if the player's new location is "in a blue mortuary beside 
/ a smooth ceramic slab." (0x49)
0x1382 (0x2a20): (0x18) If var[0x58] == (constant) 0x49 then Goto 0x138d

/ Branch if the player's new location is "in a green mortuary beside a 
/ smooth slab." (0x4a)
0x1386 (0x2a24): (0x18) If var[0x58] == (constant) 0x4a then Goto 0x138d

/ Player is NOT in the blue or green mortuary so reset the lights/buttons

/ Reset the pressed buttons to black, black, black (0x00)
/ var[0x14] is the constant 0x00
0x138a (0x2a28): (0x09) Set var[0x46] = var[0x14]

/ Branch if the player's new location is NOT " on a significant cylindrical 
/ ledge above steps to a toroidal walkway." (0x33)
0x138d (0x2a2b): (0x19) If var[0x58] != (constant) 0x33 then Goto 0x13c7

/ Player's new location IS " on a significant cylindrical ledge above 
/ steps to a toroidal walkway."

/ Branch ahead if this initialisation has already been completed (indicated
/ by var[0x7e] already being set)
/ var[0x14] is the constant 0x00
0x1391 (0x2a2f): (0x13) If var[0x7e] > var[0x14] then Goto 0x13c7

/ Set the required location for the crew member's coffin (that needs revivial) 
/ to be the green mortuary (0x4a)
0x1395 (0x2a33): (0x08) Set var[0x7e] = (constant) 0x4a

/ Set the crew member's mortuary location's first colour randomly 
0x1398 (0x2a36): (0x06) Function - Random - Set var[0x7f]=<random number>

/ Set the crew member's freezer disk location mortuary location by:
/ 
/ Randomly generate a number that's less than 9

/ Generate another number if the colour is NOT a valid colour
/ Valid colours are Black (0x00) through to White (0x09)
0x139b (0x2a39): (0x1b) If var[0x7f] > (constant) 0x09 then Goto 0x1398

/ Randomly generate a number that's less than 50 for the crewmember's 
/ sector and location
/ 1. Randomly generate a number that's less than 49
/ 2. Double it 
/ 3. Add 1

/ Set the crew member's mortuary location's second and third colours randomly 
0x139f (0x2a3d): (0x06) Function - Random - Set var[0x80]=<random number>

/ Generate another number for the second and third colours if the number
/ generated was greater than 49.
/ Value = <colour2> x 10 + <colour3> x 1
0x13a2 (0x2a40): (0x1b) If var[0x80] > (constant) 0x31 then Goto 0x139f

/ Set the temporary variable to the current value of the second/third colours
0x13a6 (0x2a44): (0x09) Set var[0x72] = var[0x80]

/ 2. Double it 
/ Add the temporary variable to the current value of the second/third colours
/ which doubles it
0x13a9 (0x2a47): (0x0a) Set var[0x80] += var[0x72]

/ 3. Add 1
0x13ac (0x2a4a): (0x0a) Set var[0x80] += var[0x0c]

/ Randomly generate the security door code for use in the "tasteful pink and 
/ green alcove...." (0x6c) and given to the player when they rescue 
/ the crew member and give them liquid.  
/ 
/ First colour is first decimal digit / 100
/ Second colour is second decimal digit / 10
/ Third colour is third decimal digit
0x13af (0x2a4d): (0x06) Function - Random - Set var[0x38]=<random number>

/ Randomly set the crew member's coffin last three deployment colours
/ First colour is first decimal digit / 100
/ Second colour is second decimal digit / 10
/ Third colour is third decimal digit
0x13b2 (0x2a50): (0x06) Function - Random - Set var[0x4b]=<random number>

/ Randomly set the object dictionary id for the part that the damaged 
/ janitor droid needs
0x13b5 (0x2a53): (0x06) Function - Random - Set var[0x6c]=<random number>

/ If the random object dictionary id is not between 0x7d and 0x80 inclusive
/ get another random number 
0x13b8 (0x2a56): (0x1a) If var[0x6c] < (constant) 0x7d then Goto 0x13b5

/ If the random object dictionary id is not between 0x7d and 0x80 inclusive
/ get another random number 
0x13bc (0x2a5a): (0x1b) If var[0x6c] > (constant) 0x80 then Goto 0x13b5

/ Set the score index for reaching " a significant cylindrical ledge" (0x33)
0x13c0 (0x2a5e): (0x08) Set var[0x0b] = (constant) 0x107

/ Set the flag to mark this as scored
/ var[0x0c] is the constant 0x01
0x13c4 (0x2a62): (0xe2) Set list#2[var[0x0b]] = var[0x0c] (list address 0x169e)

/ Branch if the player is NOT in the "spotless white alcove" (0x43)
0x13c7 (0x2a65): (0x19) If var[0x58] != (constant) 0x43 then Goto 0x13fa

/ Player IS in the "spotless white alcove" (0x43)

/ Set the second word to the "coffin" (0x5f)
0x13cb (0x2a69): (0x08) Set var[0x2a] = (constant) 0x5f

/ Get the first location reference of the coffin
0x13ce (0x2a6c): (0xa2) Set var[0x1c] = list#2[var[0x2a]] (list address 0x169e)

/ Branch if it is NOT in the player's inventory (0xe1)
0x13d1 (0x2a6f): (0x11) If var[0x1c] != var[0x10] then Goto 0x13fa

/ Coffin IS in player's inventory

/ Print message  "A machine grabs and opens the coffin!\n "
0x13d5 (0x2a73): (0x05) Print message (constant) 0x132

/ Branch if the coffin is open (0x01)
/ var[0x14] is the constant 0x00
0x13d8 (0x2a76): (0x13) If var[0x52] > var[0x14] then Goto 0x13df

/ Coffin is closed (0x00)

/ Open the coffin
0x13dc (0x2a7a): (0x01) Gosub 0x0ac1

/ Drop the object from the player's inventory
0x13df (0x2a7d): (0x01) Gosub 0x143e

/ Branch if the coffin contents is NOT a woman (0x01)
/ var[0x0c] is the constant 0x01
0x13e2 (0x2a80): (0x11) If var[0x36] != var[0x0c] then Goto 0x13ec

/ Coffin contents is a woman who will scream

/ Print message  ""EEEEEK! YEEEAH! AAAAR!" The screams attract the Nightingales.. "
0x13e6 (0x2a84): (0x05) Print message (constant) 0x136

/ Kill the player
0x13e9 (0x2a87): (0x00) Goto 0x133c

**************************************************************************

/ Branch if the coffin contents is NOT the crew member (0x02)
/ var[0x0d] is the constant 0x02
0x13ec (0x2a8a): (0x11) If var[0x36] != var[0x0d] then Goto 0x13fa

/ Change the status of the cremember to:
/ 0x01 - Revival machine HAS grabbed the crew member's frozen coffin and crew member is thirsty
/ var[0x0c] is the constant 0x01
0x13f0 (0x2a8e): (0x09) Set var[0x37] = var[0x0c]

/ Set the scoring index to "When the revivial machine grabs and opens the 
/ frozen coffin to reveal the crewmember" (0x10d)
0x13f3 (0x2a91): (0x08) Set var[0x0b] = (constant) 0x10d

/ Update the entry to scored (0x01)
/ var[0x0c] is the constant 0x01
0x13f7 (0x2a95): (0xe2) Set list#2[var[0x0b]] = var[0x0c] (list address 0x169e)

**************************************************************************
* Process Robot Butler pushing passed the player check
**************************************************************************

/ Branch if the target destination is NOT "in a superb recreation lounge..." (0x91)
0x13fa (0x2a98): (0x19) If var[0x58] != (constant) 0x91 then Goto 0x1408

/ Player is in the "superb recreation lounge"

/ Branch if the distraught butler has already pushed past the 
/ player - only does this the first time the player is in the "superb
/ recreation lounge"
/ var[0x14] is the constant 0x14
0x13fe (0x2a9c): (0x13) If var[0x0a] > var[0x14] then Goto 0x1408

/ Print message  "A distraught butler robot pushes past and rushes off "
0x1402 (0x2aa0): (0x05) Print message (constant) 0x159

/ Set the flag that indicates the butler robot has pushed passed the player (0x01)
/ var[0x0c] is the constant 0x01
0x1405 (0x2aa3): (0x09) Set var[0x0a] = var[0x0c]

/ Print the location description
0x1408 (0x2aa6): (0x00) Goto 0x01d4

**************************************************************************
* Process the player picking up an item:
* 1. First set it's location to "out of game" (0xff)
* 2. Then set the location to in the player's inventory (0xe1)
* 3. Increment the inventory count
* 4. If the player is by either of the faceless androids,
*    they just picked something up based on having given a red or green 
*    ticket, so decrement the appropriate one
**************************************************************************

/ Set the location of the object to the location id for out of the game (0xff)
/ or default back to their initial location e.g. if a form or ticket
0x140b (0x2aa9): (0x01) Gosub 0x180e

/ Set the location of the object to the inventory (0xe1)
/ var[0x10] is the constant 0xe1
0x140e (0x2aac): (0xe2) Set list#2[var[0x2a]] = var[0x10] (list address 0x169e)

/ Increment the number of items in the inventory (or being worn)
/ var[0x0c] is the constant 0x01
0x1411 (0x2aaf): (0x0a) Set var[0x4d] += var[0x0c]

/ Branch if the player is NOT "at a wide counter staffed by a faceless 
/ android" (0x67)
0x1414 (0x2ab2): (0x19) If var[0x58] != (constant) 0x67 then Goto 0x141b

/ Player IS "at a wide counter staffed by a faceless android" (0x67)
/ and is picking up something - each red ticket that has been given to 
/ the faceless android allows the player to pick up one item.  Given they just
/ picked up an item in this location, decrement that number
/ var[0x0c] is the constant 0x01
0x1418 (0x2ab6): (0x0b) Set var[0x69] -= var[0x0c]

/ Branch if the player is NOT "at a small counter staffed by a faceless 
/ android" (0x66)
0x141b (0x2ab9): (0x19) If var[0x58] != (constant) 0x66 then Goto 0x1422

/ Player IS at "a small counter staffed by a faceless android" (0x66)
/ and is picking up something - each green ticket that has been given to 
/ the faceless android allows the player to pick up one item.  Given they just
/ picked up an item in this location, decrement that number
/ var[0x0c] is the constant 0x01
0x141f (0x2abd): (0x0b) Set var[0x6a] -= var[0x0c]

/ All done!
0x1422 (0x2ac0): (0x02) Return

**************************************************************************
* Move the object's location to being worn
**************************************************************************
/ Branch if the second word is a non-wearble item and print "Don't be silly!"
0x1423 (0x2ac1): (0x1b) If var[0x2a] > (constant) 0x59 then Goto 0x18cf

/ Item is wearable 

/ Remove the object from the game (set it's location to 0xff)
0x1428 (0x2ac6): (0x01) Gosub 0x180e

/ Set the location of the object to being worn (0xe2)
/ var[0x11] is the constant 0xe2
0x142b (0x2ac9): (0xe2) Set list#2[var[0x2a]] = var[0x11] (list address 0x169e)

/ Set the temporary variable to the worn object's id
0x142e (0x2acc): (0x09) Set var[0x72] = var[0x2a]

/ Add on the total number of objects in the game (60) to get the
/ second location reference in the list 
/ var[0x6d] is the constant 0x3c
0x1431 (0x2acf): (0x0a) Set var[0x72] += var[0x6d]

/ Set the second location reference to not in a freezer disk
/ var[0x14] is the constant 0x00
0x1434 (0x2ad2): (0xe2) Set list#2[var[0x72]] = var[0x14] (list address 0x169e)

/ Add on the total number of objects in the game (60) to get the
/ third location reference in the list 
/ var[0x6d] is the constant 0x3c
0x1437 (0x2ad5): (0x0a) Set var[0x72] += var[0x6d]

/ Set the third location reference to not in a freezer disk
/ var[0x14] is the constant 0x00
0x143a (0x2ad8): (0xe2) Set list#2[var[0x72]] = var[0x14] (list address 0x169e)

/ Object is worn
0x143d (0x2adb): (0x02) Return

**************************************************************************
* Perform the drop of the object
* 1. Remove it from the game or move it to its default starting position
* 2. Set it's location to the same location as the player (all 3 location references)
* 3. Check to see if the cat was being dropped - if say print "The cat scuffles about cleaning"
* 4. If the cat is in the same location as the player and any other object
*    than the cat was dropped, the cat will suck it up and place it on the 
*    broken junk processor (0x63)
* 5. If the cat is dropped and the unislime is in this location, the cat
*    will suck it up and the player will increase their score
**************************************************************************

/ Remove an object from the game or move it to its default starting location 
/ if it's a form or a ticket.
0x143e (0x2adc): (0x01) Gosub 0x180e

/ Set the location of the object to the player's current location
0x1441 (0x2adf): (0xe2) Set list#2[var[0x2a]] = var[0x58] (list address 0x169e)

/ Set the temporary variable to the object id of the object being dropped
0x1444 (0x2ae2): (0x09) Set var[0x72] = var[0x2a]

/ Add on the total number of objects in the game (60) to get the
/ second location reference in the list 
/ var[0x6d] is the constant 0x3c
0x1447 (0x2ae5): (0x0a) Set var[0x72] += var[0x6d]

/ Set the second location reference to either the freezer disk that the player is 
/ in or which snowrail station the player is in or to nothing for the rest of
/ the locations
0x144a (0x2ae8): (0xe2) Set list#2[var[0x72]] = var[0x5a] (list address 0x169e)

/ Add on the total number of objects in the game (60) to get the
/ third location reference in the list 
/ var[0x6d] is the constant 0x3c
0x144d (0x2aeb): (0x0a) Set var[0x72] += var[0x6d]

/ Set the second location reference to either the freezer disk sector and level 
/ that the player is in or to nothing for the rest of the locations
0x1450 (0x2aee): (0xe2) Set list#2[var[0x72]] = var[0x5c] (list address 0x169e)

/ Branch if the second word is NOT the "cat" (0x5e)
0x1453 (0x2af1): (0x19) If var[0x2a] != (constant) 0x5e then Goto 0x146c

/ Second word is the cat

/ Print message  "The cat scuffles about, cleaning\n "
0x1457 (0x2af5): (0x05) Print message (constant) 0x15a

/ Branch if the ramp is not coated in unislime (0x15c)
0x145a (0x2af8): (0x19) If var[0x60] != (constant) 0x15c then Goto 0x146c

/ Print message  "It completely cleans the ramp "
0x145f (0x2afd): (0x05) Print message (constant) 0x15b

/ Set the status of the unislime to "cleaned by the cat" (0x01)
/ var[0x0c] is the constant 0x01
0x1462 (0x2b00): (0x09) Set var[0x54] = var[0x0c]

/ Set the score index into list#2 for having the unislime cleaned by the cat (0x115)
0x1465 (0x2b03): (0x08) Set var[0x0b] = (constant) 0x115

/ Set the flag to mark this as scored
/ var[0x0c] is the constant 0x01
0x1469 (0x2b07): (0xe2) Set list#2[var[0x0b]] = var[0x0c] (list address 0x169e)

/ Cache the object id of the second word
0x146c (0x2b0a): (0x09) Set var[0x34] = var[0x2a]

/ Set the object to the "cat" (0x5e) (may or may not be at this point)
0x146f (0x2b0d): (0x08) Set var[0x2a] = (constant) 0x5e

/ Branch if the cat was originally the second word (it's cached in var[0x34])
0x1472 (0x2b10): (0x10) If var[0x2a] == var[0x34] then Goto 0x148f

/ Second word was NOT originally the cat (0x5e)

/ Check to see if the cat is in the player's current location
/ var[0x4e] will be set to 0x01 if the cat is
0x1476 (0x2b14): (0x01) Gosub 0x15f0

/ Reset the second word back to the cached second word 
0x1479 (0x2b17): (0x09) Set var[0x2a] = var[0x34]

/ Branch if the cat is NOT in the player's current location 
0x147c (0x2b1a): (0x10) If var[0x4e] == var[0x14] then Goto 0x148f

/ Cat is in the player's current location and will suck up the dropped
/ object

/ Print message  "The cat sucks up "
0x1480 (0x2b1e): (0x05) Print message (constant) 0x15d

/ Print the object name
0x1483 (0x2b21): (0x04) Print message var[0x2a]

/ Remove an object from the game or move it to its default starting location 
/ if it's a form or a ticket.
0x1485 (0x2b23): (0x01) Gosub 0x180e

/ Set the temporary variable to the "in an overflowing, broken junk processor 
/ (made by GIGO industries)" location (0x63)
0x1488 (0x2b26): (0x08) Set var[0x72] = (constant) 0x63

/ Set the location of the sucked up object to the "...broken junk processor..."
0x148b (0x2b29): (0xe2) Set list#2[var[0x2a]] = var[0x72] (list address 0x169e)

/ All done 
0x148e (0x2b2c): (0x02) Return

/ Branch to from some of the above but really they should branch to the 
/ return above
0x148f (0x2b2d): (0x02) Return

**************************************************************************
* Perform location checks 
**************************************************************************
* Routine sets up the following variables (only one message actually 
* printed when seated at the console):
* 
* 1.  Reset the supplementary messages (var[0x60] and var[0x61])
* 2.  If there are any doors in the current location (var[0x15])
* 3.  Work out if the location has any light (var[0x39])
* 4.  Does the player  have (or it's in the same location) a lit lamp (var[0x3a])
* 5.  Can the player see? Either lit location or they have (or it's in the same 
*     location) a lit lamp (var[0x3b])
* 6.  Is the player wearing the battered bubble helmet and the kevlar leotard (var[0x25])
* 7.  Does the location contain oxygen? (var[0x01])
* 8.  Can the player breathe? (var[0x04]) - might be wearing a helmet that has
*     run out of oxygen but in a location that has oxygen so still can't breathe
* 9.  Check to see if the player is wearing the elite status necklace (var[0x4a])
* 10.  Check to see if the player has the screwdriver (var[0x66]) for removing the
*     battery pack
* 11.  If the player is sat at the console and wearing the visor and print
*     "The screen lights"
* 12.  If the player is sat at the console and removed the visor or are moving 
*     away from the console and print "The screen fades" and reset the menu to
*     nothing shown (var[0x20])
* 13. Check to see if the coffin has been grabbed by the revival machine
*     and if so set the supplemental message (var[0x60]) to "The coffin holding the
*     crewmember is held in place"
* 14. Check to see if the unislime is still on the ramp if so set the supplemental
*     message (var[0x60]) to "The ramp is coated in unislime"
* 15. Check to see if the waldroid is guarding the base of Jacob's ladder if so 
*     set the supplmental message to "A massive waldroid guards the ladder"
* 16. Check to see if the player is in the control room and work out which
*     fire burning message to display as a supplemental message (var[0x60])
* 17. Check to see if the player is on churned and rutted snow and work out
*     which snowdozer message to display as a supplemental message (var[0x60])
**************************************************************************

/ Set the first location supplementary message to the empty string (0x02)
/ var[0x0d] is the constant 0x02
0x1490 (0x2b2e): (0x09) Set var[0x60] = var[0x0d]

/ Set the second location supplementary message to the empty string (0x02)
/ Note - it's never set to anything else
/ var[0x0d] is the constant 0x02
0x1493 (0x2b31): (0x09) Set var[0x61] = var[0x0d]

/ Set the player status flag for wearing the helmet and kevlar leotard
/ to "not wearing" (0x00)
/ var[0x14] is the constant 0x00
0x1496 (0x2b34): (0x09) Set var[0x25] = var[0x14]

/ Check to see if there are any doors in the current location
/ var[0x15] will be set to 0x01 if there is a door but doesn't 
/ seem to be used here (used by the caller?)
0x1499 (0x2b37): (0x01) Gosub 0x16e5

/ Default the location light indicator to dark (0x00)
/ var[0x14] is the constant 0x00
0x149c (0x2b3a): (0x09) Set var[0x39] = var[0x14]

/ Branch if the player's target location is on the web, floating in space 
/ or on the snowfields
0x149f (0x2b3d): (0x1a) If var[0x58] < (constant) 0x24 then Goto 0x14ae

/ Player is beyond the snowfields

/ Branch if the coffin is open (0x01) or the player has left the coffin (0x01) 
/ to set the location light indicator to "light" (0x01)
/ var[0x14] is the constant 0x00
0x14a3 (0x2b41): (0x13) If var[0x35] > var[0x14] then Goto 0x14ab

/ Branch if the player is still "in a sponge-lined coffin" (0xae) - they
/ haven't opened it so it'll stay dark (0x00)
0x14a7 (0x2b45): (0x18) If var[0x58] == (constant) 0xae then Goto 0x14ae

/ Set the location light indicator to "light" (0x01) as the player is NOT on 
/ the web, floating in space or on the snow fields
0x14ab (0x2b49): (0x09) Set var[0x39] = var[0x0c]

/ Set the location to "not containing oxygen (0x00)
/ var[0x14] is the constant 0x00
0x14ae (0x2b4c): (0x09) Set var[0x01] = var[0x14]

/ Set the player to "not able to breath" (0x00)
/ var[0x14] is the constant 0x00
0x14b1 (0x2b4f): (0x09) Set var[0x04] = var[0x14]

/ Set the temporary variable to the dictionary id of the helmet (0x55)
0x14b4 (0x2b52): (0x08) Set var[0x1b] = (constant) 0x55

/ Get the current location of the helmet
0x14b7 (0x2b55): (0xa2) Set var[0x1c] = list#2[var[0x1b]] (list address 0x169e)

/ Branch if the helmet is NOT being worn (0xe2)
/ var[0x11] is the constant 0xe2
0x14ba (0x2b58): (0x11) If var[0x1c] != var[0x11] then Goto 0x14d5

/ Set the temporary variable to the dictionary id of the kevlar leotard (0x56)
0x14be (0x2b5c): (0x08) Set var[0x1b] = (constant) 0x56

/ Get the current location of the kevlar leotard
0x14c1 (0x2b5f): (0xa2) Set var[0x1c] = list#2[var[0x1b]] (list address 0x169e)

/ Branch if the leotard is NOT being worn (0xe2)
/ var[0x11] is the constant 0xe2
0x14c4 (0x2b62): (0x11) If var[0x1c] != var[0x11] then Goto 0x14d5

/ Set the flag that indicates the player is protected from space (0x01)
/ as they are wearing both the helmet and the kevlar leotard
/ var[0x0c] is the constant 0x01
0x14c8 (0x2b66): (0x09) Set var[0x25] = var[0x0c]

/ Branch if the player's helmet has run out of air (0x00)
/ var[0x14] is the constant 0x00
0x14cb (0x2b69): (0x10) If var[0x03] == var[0x14] then Goto 0x150f

/ Player has NOT run out of air AND is wearing the helmet and leotard

/ Set the player's status to wearing the helment and leotard (0x01)
/ var[0x0c] is the constant 0x01
0x14cf (0x2b6d): (0x09) Set var[0x04] = var[0x0c]

/ Decrement the amount of air remaining by 0x01
/ var[0x0c] is the constant 0x01
0x14d2 (0x2b70): (0x0b) Set var[0x03] -= var[0x0c]

/ Branch if the location is on the web, floating in space, on the snowfields
/ below the pylon, on the ladder on the pylon, in the snowdozer, in the shuttle
/ in the robodome, in the cave or in the large hanger as there is NO oxygen 
/ there 
0x14d5 (0x2b73): (0x1a) If var[0x58] < (constant) 0x31 then Goto 0x150f

/ Branch if the location is the toroidal walkway, significant ledge, 
/ mortuary loops, blue elevator and elevator shaft, marblon cylinder, 
/ massage table, storeroom, freezer control, rubbish tip, where the ticket
/ machines are, where the faceless androids are etc as there IS oxygen there
0x14d9 (0x2b77): (0x1a) If var[0x58] < (constant) 0x72 then Goto 0x1509

/ Branch if the location is Jacob's ladder, near the red cylinder, in the  
/ nearby corridors or sloping crawlway as there is NO oxygen there
0x14dd (0x2b7b): (0x1a) If var[0x58] < (constant) 0x88 then Goto 0x150f

/ Branch if the location is in freezer control or the control room
/ as there IS oxygen there
0x14e1 (0x2b7f): (0x1a) If var[0x58] < (constant) 0x97 then Goto 0x1509

/ Branch if the location is in an airlock, an icetunnel, the stratoglider
/ or the spidroid to check if one of the airlock doors are open 
0x14e5 (0x2b83): (0x1a) If var[0x58] < (constant) 0x9f then Goto 0x14ef

/ Branch if the location is in a docking bay as there is NO oxygen there
0x14e9 (0x2b87): (0x1a) If var[0x58] < (constant) 0xa2 then Goto 0x150f

/ Remaining locations DO have oxygen i.e. robot stores, crates, sponge 
/ lined coffin, massage couch, waldo coccoon, airbed, padded cell and 
/ sat at the console
0x14ed (0x2b8b): (0x00) Goto 0x1509

**************************************************************************
* Airlock location door checks
**************************************************************************

/ Will only reach this section if the location is between 0x97 and 0x9e
/ 0x97 : in an open-plan control room. As the ship flies itself there are few
/        controls, just an assortment of computers and displays of no interest 
/        to anyone. They're decades out of date - only kept in case the 
/        modern stuff fails
/ 0x98 : in a cylindrical airlock between two iris doors
/ 0x99 : in a featureless clindrical airlock between two iris doors
/ 0x9a : in a cubic airlock between two iris doors
/ 0x9b : in a vertical airlock between two iris doors
/ 0x9c : in an ice tunnel
/ 0x9d : in a tiny stratoglider. It is extensibly damaged
/ 0x9e : in a padded room

/ Branch if no airlock door is open (0x00) as there will be oxygen 
/ var[0x14] is the constant 0x00
0x14ef (0x2b8d): (0x10) If var[0x19] == var[0x14] then Goto 0x1509

/ Branch if the current location is the "featureless cylindrical airlock" (0x99)
/ as for some reason, whilst it's an airlock there IS oxygen in both locations
/ either side of the airlock
0x14f3 (0x2b91): (0x18) If var[0x58] == (constant) 0x99 then Goto 0x1509

/ Branch if the player is in the "padded room" (0x9e) in the stratoglider
/ as there IS oxygen there
0x14f7 (0x2b95): (0x18) If var[0x58] == (constant) 0x9e then Goto 0x1509

/ Branch if the player pressed the green button (0xcd)
/ Note - this is odd and a BUG - the green button opens the door to the location the player
/ just came from.  Why would they have oxygen if they entered from somewhere without
/ oxygen and they pressed the green button? 
0x14fb (0x2b99): (0x18) If var[0x19] == (constant) 0xcd then Goto 0x1503

/ Branch if the player's previous location is before 0x6f
0x14ff (0x2b9d): (0x1a) If var[0x55] < (constant) 0x6f then Goto 0x150f

/ Either the green button was pressed in the airlock above or the player's previous location 
/ was before (0x6f) - there IS oxygen here.  But this doesn't account for if the player was " 
/ bright, tidy docking bay of the crew habidome" (0xa1) and presses the green button in the airlock
/ (this is one example)
0x1503 (0x2ba1): (0x00) Goto 0x1509

**************************************************************************
* Unused
**************************************************************************

/ Note - this line never called / reached by any code

/ If the player's previous location was after 0x6f (which doesn't exist)
/ Doesn't make sense because e.g. the coffin is at the beginning of the game
/ with location (0xae) and also the locations the spidroid hopper jumps
/ between are high (0xa0 and 0xa1)
0x1505 (0x2ba3): (0x1b) If var[0x55] > (constant) 0x6f then Goto 0x150f

**************************************************************************

/ Note - branched to from above

/ Reset the indicator on whether a location contains air/oxygen
/ to it does (0x01)
/ var[0x0c] is the constant 0x01
0x1509 (0x2ba7): (0x09) Set var[0x01] = var[0x0c]

/ Reset the indicator that the player can breathe to 
/ "can breathe" (0x01)
/ var[0x0c] is the constant 0x01
0x150c (0x2baa): (0x09) Set var[0x04] = var[0x0c]

**************************************************************************
* Check to see if the player has (or is in the same location as) the 
* lamp and if it's lit so they can see 
**************************************************************************

/ Reset the indicator that shows if the player has the lamp
/ and it is switched on to "either lamp is in a different 
/ location or switched off" (0x00)
/ var[0x14] is the constant 0x00
0x150f (0x2bad): (0x09) Set var[0x3a] = var[0x14]

/ Set the second word to the "lamp" (0x87) before
/ checking to see if the player has it
0x1512 (0x2bb0): (0x08) Set var[0x2a] = (constant) 0x87

/ Check to see if the player is carrying the lamp
/ Result will be in var[0x4e]
0x1515 (0x2bb3): (0x01) Gosub 0x15e1

/ Branch if the player does NOT have the lamp
/ var[0x14] is the constant 0x00
0x1518 (0x2bb6): (0x10) If var[0x4e] == var[0x14] then Goto 0x1523

/ Player HAS the lamp

/ Branch if the lamp is off (0x00)
/ var[0x14] is the constant 0x00
0x151c (0x2bba): (0x10) If var[0x3c] == var[0x14] then Goto 0x1523

/ Lamp is on (0x01)

/ Set the indicator that shows that the player HAS the lamp (or it's
/ in the same location as them) AND it is switched on
0x1520 (0x2bbe): (0x09) Set var[0x3a] = var[0x0c]

**************************************************************************
* Check to see if the player is wearing the necklace and set the status
* flag that determines if the robot will open the door
**************************************************************************

/ Reset the flag the indicates the player is wearing the necklace to not worn (0x00)
/ As the code ahead rechecks if the player is wearing it
/ var[0x14] is the constant 0x00
0x1523 (0x2bc1): (0x09) Set var[0x4a] = var[0x14]

/ Set the temporary variable to the object id for the "necklace" (0x57)
0x1526 (0x2bc4): (0x08) Set var[0x1b] = (constant) 0x57

/ Get the current location of the necklace
0x1529 (0x2bc7): (0xa2) Set var[0x1c] = list#2[var[0x1b]] (list address 0x169e)

/ Branch if the player is NOT wearing (0xe2) the necklace
/ var[0x11] is the constant 0xe2, location id for wearing an item
0x152c (0x2bca): (0x11) If var[0x1c] != var[0x11] then Goto 0x1533

/ Player IS wearing the necklace

/ Set the flag the indicates the player is wearing the necklace to worn (0x01)
0x1530 (0x2bce): (0x09) Set var[0x4a] = var[0x0c]

**************************************************************************
* Check to see if the player has the screwdriver in their inventory and 
* set the status flag that determines if the player can lever out the battery
**************************************************************************

/ Set the temporary variable to the object id for the "screwdriver" (0x76)
0x1533 (0x2bd1): (0x08) Set var[0x1b] = (constant) 0x76

/ Get the current location of the screwdriver
0x1536 (0x2bd4): (0xa2) Set var[0x1c] = list#2[var[0x1b]] (list address 0x169e)

/ Reset the status flag for the screwdriver to player does have it (0x01)
/ var[0x0c] is the constant 0x01
0x1539 (0x2bd7): (0x09) Set var[0x66] = var[0x0c]

/ Branch if the player HAS the screwdriver in their inventory (0xe1)
/ var[0x10] is the constant 0xe1, location id for the inventory
0x153c (0x2bda): (0x10) If var[0x1c] == var[0x10] then Goto 0x1543

/ Player does NOT have the screwdriver in their inventory

/ Set the status flag for the screwdriver to the player doesn't have it (0x00)
/ var[0x14] is the constant 0x00
0x1540 (0x2bde): (0x09) Set var[0x66] = var[0x14]

**************************************************************************
* Check to see if the player is seated at the console and wearing the visor
* if they are show the menu or "the screen lights", if they are moving away
* or have removed the visor, "the screen fades"
**************************************************************************

/ Player has been moved at this time so target location var[0x57] is the same
/ as current location var[0x58]
/ Branch if the player's current location is NOT "seated at the console" (0xb3)
/ (they are moving away from the screen so fade it)
0x1543 (0x2be1): (0x19) If var[0x58] != (constant) 0xb3 then Goto 0x155d

/ Player IS "seated at the console"

/ Set the temporary variable to the "visor" (0x51)
0x1547 (0x2be5): (0x08) Set var[0x1b] = (constant) 0x51

/ Get the location of the visor
0x154a (0x2be8): (0xa2) Set var[0x1c] = list#2[var[0x1b]] (list address 0x169e)

/ Branch if the player is NOT wearing (0xe2) the visor and fade the screen
/ var[0x11] is the constant 0xe2, the location for wearing an item
0x154d (0x2beb): (0x11) If var[0x1c] != var[0x11] then Goto 0x155d

/ Player IS wearing the visor

/ Branch is this isn't the first turn in seated at the console and wearing 
/ the visor 
0x1551 (0x2bef): (0x13) If var[0x20] > var[0x14] then Goto 0x1567

/ First turn seated at the console and wearing the visor

/ Print message  "\nThe screen lights!\n "
0x1555 (0x2bf3): (0x05) Print message (constant) 0x11e

/ Set the display to the root menu
0x1558 (0x2bf6): (0x08) Set var[0x20] = (constant) 0x28

/ Skip over the screen fading code below
0x155b (0x2bf9): (0x00) Goto 0x1567

/ Branch if the screen is NOT showing anything (nothing to do )
0x155d (0x2bfb): (0x10) If var[0x20] == var[0x14] then Goto 0x1567

/ Print message  "\nThe screen fades\n "
0x1561 (0x2bff): (0x05) Print message (constant) 0x11f

/ Set the selected screen menu to nothing (0x00)
/ var[0x14] is the constant 0x00
0x1564 (0x2c02): (0x09) Set var[0x20] = var[0x14]

**************************************************************************
* Check to see if the coffin has been grabbed by the revival machine
**************************************************************************

/ Branch if the revivial machine has NOT grabbed the coffin
0x1567 (0x2c05): (0x11) If var[0x37] != var[0x0c] then Goto 0x1579

/ Revival mmachine HAS grabbed the coffin (0x01)

/ Set the second word to the "coffin" (0x5f)
0x156b (0x2c09): (0x08) Set var[0x2a] = (constant) 0x5f

/ Player has been moved at this time so target location var[0x57] is the same
/ as current location var[0x58].  Subroutine uses var[0x58]
/ Check to see if the coffin is in this location (0x43) 
0x156e (0x2c0c): (0x01) Gosub 0x15f0

/ Branch if the coffin is NOT present (0x00)
/ var[0x14] is the constant 0x14
0x1571 (0x2c0f): (0x10) If var[0x4e] == var[0x14] then Goto 0x1579

/ Set the supplemental message to "The coffin holding the crewmember 
/ is held in place" (0x142)
0x1575 (0x2c13): (0x08) Set var[0x60] = (constant) 0x142

**************************************************************************
* Check to see if the unislime is still on the thick ramp (0x78) or
* wide sloping ramp (0x7b)
**************************************************************************

/ Branch if the player's current location IS "on a wide ledge round the 
/ north edge of a huge red cylinder. A thick ramp winds upwards, there's 
/ a tiny opening in the cylinder wall, an insubstantial bridge is 
/ suspended over the abyss below" (0x78)
0x1579 (0x2c17): (0x18) If var[0x57] == (constant) 0x78 then Goto 0x1581

/ Branch if the player's current location is NOT "on a wide sloping ramp 
/ west of the red cylinder"
0x157d (0x2c1b): (0x19) If var[0x57] != (constant) 0x7b then Goto 0x1589

/ Branch if the unislime on the ramp has been cleaned by the cat (0x01)
/ var[0x14] is the constant 0x00
0x1581 (0x2c1f): (0x13) If var[0x54] > var[0x14] then Goto 0x1589

/ Ramp has NOT been cleaned by the cat

/ Set the supplementary message to "The ramp is coated in unislime" (0x15c)
0x1585 (0x2c23): (0x08) Set var[0x60] = (constant) 0x15c

**************************************************************************
* Check to see if the waldroid is still guarding the bottom of Jacob's ladder
**************************************************************************

/ Branch if the player's current location is NOT "at the base of Jacob's 
/ Ladder." (0x72)
0x1589 (0x2c27): (0x19) If var[0x57] != (constant) 0x72 then Goto 0x1595

/ Player is "at the base of Jacob's Ladder."

/ Branch if the waldroid has been blinded and staggered off (0x01)
/ var[0x14] is the constant 0x00
0x158d (0x2c2b): (0x13) If var[0x67] > var[0x14] then Goto 0x1595

/ Set the supplementary message to "A massive waldroid guards the ladder" (0x179)
0x1591 (0x2c2f): (0x08) Set var[0x60] = (constant) 0x179

**************************************************************************
* Check to see if the player is in the control room and work out which
* fire burning message to display
**************************************************************************

/ Branch if the player's location is NOT "in an open-plan control room." (0x97)
0x1595 (0x2c33): (0x19) If var[0x57] != (constant) 0x97 then Goto 0x15a4

/ Player IS in "in an open-plan control room."

/ Branch if the petrol bomb has been burning for more than 4 turns
/ var[0x0f] is the constant 0x04
0x1599 (0x2c37): (0x13) If var[0x56] > var[0x0f] then Goto 0x15a4

/ Set the supplementary message to the base message for the fires 
/ " A figure with a petrol bomb stands at the west of the room" (0x17a)
0x159d (0x2c3b): (0x08) Set var[0x60] = (constant) 0x17a

/ Add on the number of turns that the fire has been burning to get to one of:
/ 0x17a : A figure with a petrol bomb stands at the west of the room
/ 0x17b : The room is on fire!
/ 0x17c : The blaze intensifies
/ 0x17d : The fire blazes fiercely
/ 0x17e : Flames are melting the walls
0x15a1 (0x2c3f): (0x0a) Set var[0x60] += var[0x56]

**************************************************************************
* Check to see if the player is on churned and rutted snow and work out
* which snowdozer message to display
**************************************************************************

/ Branch if the player is NOT "on churned and rutted snow below a tall pylon" (0x1c)
0x15a4 (0x2c42): (0x19) If var[0x57] != (constant) 0x1c then Goto 0x15b3

/ Branch if the snowdozer has already driven off (0x02 or 0x03)
0x15a8 (0x2c46): (0x13) If var[0x1a] > var[0x0c] then Goto 0x15b3

/ Snowdozer has NOT driven off 

/ Set the supplementary message to the base message id of "A massive 
/ snowdozer stands beside a pile of fuel blocks, a doorway leads into it. 
/ One wide track needs welding" (0x148)
0x15ac (0x2c4a): (0x08) Set var[0x60] = (constant) 0x148

/ Add the fix status of the snowdozer to get to one of the following messages:
/ 0x148 : A massive snowdozer stands beside a pile of fuel blocks, a doorway leads into it. One wide track needs welding
/ 0x149 : A colossal snowdozer towers over you
0x15b0 (0x2c4e): (0x0a) Set var[0x60] += var[0x1a]

**************************************************************************
* Check to see if it's light or dark
**************************************************************************

/ Set "whether the player can see" indicator to the location light value 
/ - i.e. whether the location is light (0x01) or dark (0x00). If it's dark,
/ it will only be set to light later if the player has the lamp (or it's in 
/ the same location) and it is switched on (indicated by var[0x3a]). The lamp
/ maybe on (var[0x3c]) but in another location
0x15b3 (0x2c51): (0x09) Set var[0x3b] = var[0x39]

/ Branch if either the player does NOT have the lamp OR it is 
/ NOT switched on
0x15b6 (0x2c54): (0x10) If var[0x3a] == var[0x14] then Goto 0x15c1

/ Player HAS the lamp and IT is switched on

/ NOTE this line of  code is redundant as the lamp will always
/ be on at this point given the check at 0x1520 (it checked if the
/ player has the lamp or it's in the same location and also if the lamp
/ is on to set var[0x3a])

/ Branch if the lamp is off (0x00) (no need to change the status from dark to light)
/ var[0x14] is the constant 0x00
0x15ba (0x2c58): (0x10) If var[0x3c] == var[0x14] then Goto 0x15c1

/ Set the location to "light" (0x01)
/ var[0x0c] is the constant 0x01
0x15be (0x2c5c): (0x09) Set var[0x3b] = var[0x0c]

/ All done
0x15c1 (0x2c5f): (0x02) Return

**************************************************************************
* Rotate the last three colour lights and add the new colour from the button
* the player pressed
**************************************************************************

/ Player pressed a button in the blue or green mortuary entrance - 
/ this moves the last three colours from right to left and the new colour 
/ appears on the right.  So if the last three colours were black brown green
/ and the player pressed the black button, the last three colours would be
/ brown green black. Note that only three button presses are allowed 
/ before the lights reset to black, black, black.

/ First (leftmost)  number is 0, 100, 200..., 900 to represent each colour (black, brown... white)
/ Second (middle)   number is 0, 10,  20...,  90  to represent each colour (black, brown... white)
/ Third (rightmost) number is 0, 1,   2...,   9   to represent each colour (black, brown... white)
/
/ Add all these together and that's the code that's in var[0x46] on entry

/ So for black, black, black this will be set to 0  + 0+0 = 0   = 0x00
/ So for brown, brown, brown this will be set to 100+10+1 = 111 = 0x6f
/ So for red,   red,   red   this will be set to 200+20+2 = 222 = 0xde
/ ...
/ So for white, white, white this will be set to 900+90+9 = 999 = 03e7
/ 
/ And for combinations of colours 
/ e.g.   red,   brown, white this will be set to 200+10+9 = 219 = 0xdb
/ 
/ To rotate the colours left, the total is multiplied by 100 - this is NO 
/ overflow because the colours start as black black black i.e. 0x00 so when 
/ a player presses the first real colour e.g. red it will go to black black red
/ with the code doing the rotation first (0 * 100) and then adding on the 
/ code for red (0x02) to result in 0x02 as the value. 
/ 
/ If the player then pushes brown it will be (2 x 100 to rotate) + 1 to add
/ on the new colour
/ 
/ A colour other than black can never rotate off to the left because other
/ parts of the a-code reset this all to black, black, black (0x00) when 3
/ buttons have been pressed

/ This is a complex way of multiplying the numbers by 100 but then there's no
/ a-code multiplication operator... so the code below doubles the current value
/ in var[0x46].  Adds on 4 * the original value twice to effectively multiply by 10
/
/ new value = (original value * 2) + (original value) * 4 + (original value * 4)  

/ Calculate "(original value * 2)"
/ Multiply the original value by 2 and store it back

/ Set the temporary variable to the original value
0x15c2 (0x2c60): (0x09) Set var[0x79] = var[0x46]

/ Add the original value AGAIN to the temporary value (so it's multiplied by 2)
0x15c5 (0x2c63): (0x0a) Set var[0x79] += var[0x46]

/ Store it back 
0x15c8 (0x2c66): (0x09) Set var[0x46] = var[0x79]

/ Make temporary value 4 x original value as both the temporary value 
/ and stored back value are twice the original value
0x15cb (0x2c69): (0x0a) Set var[0x79] += var[0x46]

/ Adding makes the stored back value multiplied by 6
0x15ce (0x2c6c): (0x0a) Set var[0x46] += var[0x79]

/ Adding again makes it multiplied by 10
0x15d1 (0x2c6f): (0x0a) Set var[0x46] += var[0x79]

/ Add on the dictionary id for the new colour which will be in the range
/ black (0xc8), brown (0xc9)... white (0xd1)
0x15d4 (0x2c72): (0x0a) Set var[0x46] += var[0x2b]

/Set the temporary variable to the base dictionary id (0xc8)
0x15d7 (0x2c75): (0x08) Set var[0x79] = (constant) 0xc8

/ Subtract the base dictionary id to 0 base the new colour
/ i.e. black = 0x00, brown - 0x02, ... white = 0x09
0x15da (0x2c78): (0x0b) Set var[0x46] -= var[0x79]

/ Increment the number of buttons pressed by 1
/ var[0x0c] is the constant 0x01
0x15dd (0x2c7b): (0x0a) Set var[0x47] += var[0x0c]

/ Colours rotated and new colour added 
0x15e0 (0x2c7e): (0x02) Return

**************************************************************************
* Check to see if the object is in the player's inventory or is being worn
* or in the same location as the player. Subroutine will return with 
* var[0x4e] - 0x00 not present, 0x01 present
* var[0x1c] - first location reference of object
**************************************************************************

/ Check to see if the object is in the location passed in var[0x58]
/ and the second and third object references match the player's 
/ first, second and third freezer disk lights (or the defaults outside).
/ This is really only used to get the location of the object here.
/ Returns with var[0x4e] set to 0x00 (not present) or 0x01 (present)
/ Also sets var[0x1c] to the first location reference of the object
0x15e1 (0x2c7f): (0x01) Gosub 0x15f0

/ Branch if the object IS in the player's inventory (0xe1)
/ and set the flag to indicate the player has the item
/ var[0x10] is the constant 0xe1
0x15e4 (0x2c82): (0x10) If var[0x1c] == var[0x10] then Goto 0x15ec

/ Branch if the object is NOT being worn by the player (0xe2)
/ and do NOT set the flag to indicate the player has the item
/ var[0x11] is the constant 0xe2
0x15e8 (0x2c86): (0x11) If var[0x1c] != var[0x11] then Goto 0x15ef

/ Is being worn or in the inventory

/ Set the flag to indicate that the player has the object 
/ var[0x0c] is the constant 0x01
0x15ec (0x2c8a): (0x09) Set var[0x4e] = var[0x0c]

/ Return with the flag set or not
0x15ef (0x2c8d): (0x02) Return

**************************************************************************
* Check to see if the object is in the location passed in var[0x58]
* and the second and third object references match the player's 
* first, second and third freezer disk lights (or defaults outside)
*
* Returns with var[0x4e] set to 0x00 (not present) or 0x01 (present)
*   
* Also sets var[0x1c] to the first location reference of the object
**************************************************************************

/ Set the "object being worn or in the player's inventory or current location"
/  status flag to 0x00 i.e. not worn or in inventory
/ var[0x14] is the constant 0x00
0x15f0 (0x2c8e): (0x09) Set var[0x4e] = var[0x14]

/ Set the temporary variable to the dictionary id of the second word
0x15f3 (0x2c91): (0x09) Set var[0x72] = var[0x2a]

/ Each object has three location references:
/ 1. At the object id                          = the actual location id 
/ 2. At the object id + total game objects     = freezer disk colour or station or nothing
/ 3. At the object id + 2 x total game objects = freezer disk second colour x 10 + freezer disk third colour x 1 or nothing

/ Get the first location of the object in the second word
0x15f6 (0x2c94): (0xa2) Set var[0x1c] = list#2[var[0x72]] (list address 0x169e)

/ Branch if the object is NOT in the location passed in var[0x58]
0x15f9 (0x2c97): (0x11) If var[0x1c] != var[0x58] then Goto 0x1616

/ Set the location reference to the second (freezer disk first colour or station or nothing)
0x15fd (0x2c9b): (0x0a) Set var[0x72] += var[0x6d]

/ Get the second location reference 
0x1600 (0x2c9e): (0xa2) Set var[0x1c] = list#2[var[0x72]] (list address 0x169e)

/ Branch if the freezer disk first colour or station or nothing does NOT match
/ the player's current freezer disk first colour or station or nothing
0x1603 (0x2ca1): (0x11) If var[0x1c] != var[0x5a] then Goto 0x1616

/ Set the location reference to the third (freezer disk second colour x 10 
/ + freezer disk third colour x 1) or nothing 
0x1607 (0x2ca5): (0x0a) Set var[0x72] += var[0x6d]

/ Get the third location reference 
0x160a (0x2ca8): (0xa2) Set var[0x1c] = list#2[var[0x72]] (list address 0x169e)

/ Branch if the freezer disk second and third first colours or nothing for the object do NOT match
/ the player's freezer disk current second and third colours or nothing 
/ as Black (0x0) x 10 + Black (0x0) x 1 = 0x00)
0x160d (0x2cab): (0x11) If var[0x1c] != var[0x5c] then Goto 0x1616

/ First freezer disk colour matches player's first freezer disk colour location or station or nothing
/ Second and third freezer disk colours match player's second and third colour locations or nothing
/ Set "object being worn or in the player's inventory or same location"
/ flag to 0x01
/ var[0x0c] is the constant 0x01
0x1611 (0x2caf): (0x09) Set var[0x4e] = var[0x0c]

/ Set var[0x1c] to the first location reference of the object and return
0x1614 (0x2cb2): (0x00) Goto 0x1656

**************************************************************************
* Check if the object is in a container object i.e. the silver tray,
* floating table, toolbox, video viewer or lamp
*
* On entry var[0x1c] will be either the first, second or third object
* location reference depending on what failed to match in the previous
* section of code. 
**************************************************************************

/ Branch if this call is to check the location of the container object
/ in which the first item is currently residing.  var[0x3e] is used
/ to indicate this so it doesn't check if the container object is in 
/ another container object and does the player have that.
0x1616 (0x2cb4): (0x13) If var[0x3e] > var[0x14] then Goto 0x1656

/ Set the counter to checking a container object (0x01)
/ (never incremented beyond that because of the check above)
0x161a (0x2cb8): (0x0a) Set var[0x3e] += var[0x0c]

/ Temporarily cache the second word
0x161d (0x2cbb): (0x09) Set var[0x33] = var[0x2a]

/ Set the second word to the "silver tray" (0x89)
0x1620 (0x2cbe): (0x08) Set var[0x2a] = (constant) 0x89

/ If the current object is on the "silver tray" branch ahead 
/ and check the location of it
0x1623 (0x2cc1): (0x18) If var[0x1c] == (constant) 0xc1 then Goto 0x164e

/ Set the second word to the "floating table" (0x89)
0x1627 (0x2cc5): (0x08) Set var[0x2a] = (constant) 0x8a

/ If the current object is on the "floating table" branch ahead 
/ and check the location of it
0x162a (0x2cc8): (0x18) If var[0x1c] == (constant) 0xc3 then Goto 0x164e

/ Branch if the toolbox is closed (0x00) and skip checking the toolbox
/ var[0x14] is the constant 0x00
0x162e (0x2ccc): (0x10) If var[0x53] == var[0x14] then Goto 0x1639

/ Set the second word to the "toolbox" (0x89)
0x1632 (0x2cd0): (0x08) Set var[0x2a] = (constant) 0x8b

/ If the current object is in the "toolbox" branch ahead 
/ and check the location of it
0x1635 (0x2cd3): (0x18) If var[0x1c] == (constant) 0xc4 then Goto 0x164e

/ Set the second word to the "video viewer" (0x88)
0x1639 (0x2cd7): (0x08) Set var[0x2a] = (constant) 0x88

/ If the current object is in the "video viewer" branch ahead 
/ and check the location of it
0x163c (0x2cda): (0x18) If var[0x1c] == (constant) 0xc5 then Goto 0x164e

/ Set the second word to the "lamp" (0x87)
0x1640 (0x2cde): (0x08) Set var[0x2a] = (constant) 0x87

/ If the current object is in the "lamp" branch ahead 
/ and check the location of it
0x1643 (0x2ce1): (0x18) If var[0x1c] == (constant) 0xc6 then Goto 0x164e

/ Note - redundant next two lines of code - could have made the lamp
/ check negative

/ Set the second word to the "video viewer" (0x88)
0x1647 (0x2ce5): (0x08) Set var[0x2a] = (constant) 0x88

/ Branch if it's anywhere else don't check where that object is 
/ (could have done this check on the lamp line)
0x164a (0x2ce8): (0x19) If var[0x1c] != (constant) 0xc7 then Goto 0x1650

/ Check to see if the player has the container object in their inventory,
/ wearing it or in the same location as the player
0x164e (0x2cec): (0x01) Gosub 0x15e1

/ No longer checking container object location
0x1650 (0x2cee): (0x0b) Set var[0x3e] -= var[0x0c]

/ Reset the second word back to the original object from the temporary cache
0x1653 (0x2cf1): (0x09) Set var[0x2a] = var[0x33]

/ Set var[0x1c] to the first location reference of the object
0x1656 (0x2cf4): (0xa2) Set var[0x1c] = list#2[var[0x2a]] (list address 0x169e)

/ All done
0x1659 (0x2cf7): (0x02) Return

**************************************************************************
* Print the colours (up to four)
**************************************************************************

/ This subroutine can print up to four colours depending on the 
/ values passed to it.  The colours passed in are represented like this:
/
/ var[0x72] = first colour id x 1000 + second colour id x 100 + third colour id x 10 + fourth colour x 1
/
/ This is held in var[0x72] and passed to this subroutine
/
/ var[0x74] (which is set within this subroutine) is used to control which 
/ colour is being printed i.e.:
/ 
/ 1000 - print the first colour
/ 100  - print the second colour
/ 10   - print the third  colour
/ 1    - print the fourth colour
/
/ var[0x73] controls how many colours this number represents however if the number
/ in var[0x72] is larger than this, it'll be printed anyway
/
/ Example of when it's correctly used:
/ 
/ var[0x72]  var[0x73]  What's printed
/ ---------  ---------  -------------------------------------------------
/   0x01        0x2     brown
/   0x01        0xb     black brown
/   0x01        0x65    black black brown
/   0x01        0x3e9   black black black brown
/
/ Example of when their are more colours in var[0x72] than the value in var[0x73]
/
/ var[0x72]  var[0x73]  What's printed
/ ---------  ---------  -------------------------------------------------
/   0x0c        0x2     brown red
/   0x01        0xb     brown red
/   0x01        0x65    black brown red
/   0x01        0x3e9   black black brown red
/
/ Variable cheatsheet:
/ 
/ var[0x72] - the colour(s) to print
/ var[0x73] - format of the colour (how many colours it represents)
/ var[0x74] - which nth colour to print
/ var[0x75] - base description for black 

/ Set the variable to print the first colour (0x3e8 is 1000)
0x165a (0x2cf8): (0x08) Set var[0x74] = (constant) 0x3e8

/ Print the first colour
0x165e (0x2cfc): (0x01) Gosub 0x1670

/ Set the variable to print the second colour (0x64 is 100)
0x1660 (0x2cfe): (0x08) Set var[0x74] = (constant) 0x64

/ Print the second colour
0x1663 (0x2d01): (0x01) Gosub 0x1670

/ Set the variable to print the third colour (0x0a is 10)
0x1665 (0x2d03): (0x08) Set var[0x74] = (constant) 0x0a

/ Print the third colour
0x1668 (0x2d06): (0x01) Gosub 0x1670

/ Set the variable to print the fourth colour (0x01 is 1)
0x166a (0x2d08): (0x08) Set var[0x74] = (constant) 0x01

/ Print the fourth colour
0x166d (0x2d0b): (0x01) Gosub 0x1670

/ All colours printed
0x166f (0x2d0d): (0x02) Return

**************************************************************************
* General colour printing routine for any nth colour
**************************************************************************

/ Variable cheatsheet:
/ 
/ var[0x72] - the colour(s) to print
/ var[0x73] - format of the colour (how many colours it represents)
/ var[0x74] - which nth colour to print
/ var[0x75] - base description for black 

/ Set the temporary variable to the base message id for black (0xd2)
/ - the actual colour will be set up later
0x1670 (0x2d0e): (0x08) Set var[0x75] = (constant) 0xd2

/ Branch if the constant is greater than decremented colour code

/ This part loops around until the the colour message id is set 
/ in var[0x75] to then be able to print it. var[0x74] contains
/ a constant that indiciates which nth colour to print (up to four colours):
/ 
/ 0x3e8 (1000)
/ 0x64  (100)  
/ 0x0a  (10)   
/ 0x01  (1)   
/
/ When the value in var[0x72] is greater than this, it will print a light
/ colour. If it's less, it won't print. It does this by decrementing var[0x72] 
/ until it is one less than the constant in var[0x74], at the same time 
/ incrementing the colour message in var[0x75]. 
/
/ Example: 
/ At start of loop   - var[0x72]=219, var[0x73]=101, var[0x74]=100, var[0x75]=0xd2
/ First time around  - var[0x72]=119, var[0x73]=101, var[0x74]=100, var[0x75]=0xd3
/ First time around  - var[0x72]=19,  var[0x73]=101, var[0x74]=100, var[0x75]=0xd4
/ 
/ At the end the colour is set to red (0xd4)

/ Branch if the nth colour to show is greater than the remaining value
0x1673 (0x2d11): (0x13) If var[0x74] > var[0x72] then Goto 0x167f

/ Decrement the colour code by the nth colour value
0x1677 (0x2d15): (0x0b) Set var[0x72] -= var[0x74]

/ Increment the colour message id by 1  
0x167a (0x2d18): (0x0a) Set var[0x75] += var[0x0c]

/ Loop back around until the colour code is less than the nth colour value
0x167d (0x2d1b): (0x00) Goto 0x1673

**************************************************************************
/ Variable cheatsheet:
/ 
/ var[0x72] - the colour(s) to print
/ var[0x73] - format of the colour (how many colours it represents)
/ var[0x74] - which nth colour to print
/ var[0x75] - base description for black 

/ Branch if the colour to print is not black (0xd2) - this is because
/ a check needs to be made to see if black should be printed, based
/ on the "format of the colour". 
0x167f (0x2d1d): (0x1b) If var[0x75] > (constant) 0xd2 then Goto 0x1688

/ Branch if the "format of the colour" is greater than the 
/ directive on which nth colour to print now - so for example,
/ if the format is that there is only one colour to print and 
/ this is called to print "first" not the "fourth, do not print it
0x1683 (0x2d21): (0x13) If var[0x73] > var[0x74] then Goto 0x1688

/ Do not print this nth colour (black)
0x1687 (0x2d25): (0x02) Return

**************************************************************************

/ Note - this seems to make no difference to anything and is redundant
/ Add one to the format of the colour 
/ var[0x0c] is the constant 0x01
0x1688 (0x2d26): (0x0a) Set var[0x73] += var[0x0c]

/ Print the message 
0x168b (0x2d29): (0x04) Print message var[0x75]

/ Colours printed!
0x168d (0x2d2b): (0x02) Return

**************************************************************************
* Player has searched the body of the crew-member so "discover" the 
* items on the body by putting them in the player's current location
**************************************************************************

/ Cache the player's target destination
0x168e (0x2d2c): (0x09) Set var[0x1e] = var[0x58]

/ Set the target destination to 0xbe (this subroutine is only called
/ from 0x0fcc)
0x1691 (0x2d2f): (0x09) Set var[0x58] = var[0x1c]

/ Set the message to "You find "
0x1694 (0x2d32): (0x08) Set var[0x40] = (constant) 0x48

/ Perform a count and print of the objects in the location
/ specified in var[0x58] on the "body of a crew-member" (0xbe)
0x1697 (0x2d35): (0x01) Gosub 0x1767

/ Set the starter object to the first object (the armor) (0x50)
/ all objects will be looped over below
0x169a (0x2d38): (0x08) Set var[0x1b] = (constant) 0x50

/ Get the location of the object
0x169d (0x2d3b): (0xa2) Set var[0x1c] = list#2[var[0x1b]] (list address 0x169e)

/ Branch and move to the next object if this object is NOT on the 
/ body of a crew member
0x16a0 (0x2d3e): (0x11) If var[0x1c] != var[0x58] then Goto 0x16b6

/ Set the temporary variable to the location to the object id
0x16a4 (0x2d42): (0x09) Set var[0x72] = var[0x1b]

/ Set the location of the object to the player's current location
0x16a7 (0x2d45): (0xe2) Set list#2[var[0x72]] = var[0x1e] (list address 0x169e)

/ Add the number of objects in the game (60) to get the index to the second
/ location reference
0x16aa (0x2d48): (0x0a) Set var[0x72] += var[0x6d]

/ Set the second location reference to the player's current freezer disk or 
/ station or nothing (this will always be nothing)
0x16ad (0x2d4b): (0xe2) Set list#2[var[0x72]] = var[0x5a] (list address 0x169e)

/ Add the number of objects in the game (60) to get the index to the second
/ location reference
0x16b0 (0x2d4e): (0x0a) Set var[0x72] += var[0x6d]

/ Set the third location reference to the player's freezer disk sector and 
/ location (this will always be nothing)
0x16b3 (0x2d51): (0xe2) Set list#2[var[0x72]] = var[0x5c] (list address 0x169e)

/ Move to the next object id 
0x16b6 (0x2d54): (0x0a) Set var[0x1b] += var[0x0c]

/ If there are still objects to process, loop back around
0x16b9 (0x2d57): (0x1a) If var[0x1b] < (constant) 0x8c then Goto 0x169d

/ Done
0x16bd (0x2d5b): (0x02) Return

**************************************************************************
* Set the random diagonal direction to the next clockwise diagonal direction
**************************************************************************

/ Note that var[0x18] will default at the start of a game to 0x00
/ which is not a valid direction 

/ NOTE so this is a bit all a bit weird... why not just use a look up table?!?
/ This game only uses it to move diagonal directions to the next but I guess it
/ works for all directions... e.g. S -> W
/
/ This sets the value of var[0x11] based on the following
/ If current direction is not set (0x00), set it to NE (0x02)
/ If current direction is NE (0x02), set it to SE (0x05)
/ If current direction is SE (0x05), set it to SW (0x06)
/ If current direction is SW (0x06), set it to NW (0x08)
/ If current direction is NW (0x08), set it to NE (0x02)
/
/ That would be the simple logic at least however... what it actually does is:
/
/ If 0x18 == 0 (unset) then 0x18 = 0 + 2 + 1 - 1 = 2 (NE)
/ If 0x18 == 2 (NE)    then 0x18 = 2 + 2 + 1     = 5 (SE)
/ If 0x18 == 5 (SE)    then 0x18 = 5 + 2 - 1     = 6 (SW)
/ If 0x18 == 6 (SW)    then 0x18 = 6 + 2         = 8 (NW)
/ If 0x18 == 8 (NW)    then 0x18 = 8 + 2 - 8     = 2 (NE)
/
/ ... through a set of complex rules below because even though the game
/ only deals with diagonal directions, however this routine copes with all e.g.
/ If current direction is N (0x01), set it to E (0x03)
/ If current direction is E (0x03), set it to S (0x04)
/ If current direction is S (0x04), set it to W (0x07)
/ If current direction is W (0x07), set it to N (0x01)

/ Cache the INPUT random direction in the temporary variable
0x16be (0x2d5c): (0x09) Set var[0x72] = var[0x18]

/ Add 0x02 to the OUTPUT direction 
/ var[0x0d] is the constant 0x02
0x16c1 (0x2d5f): (0x0a) Set var[0x18] += var[0x0d]

/ Branch if the INPUT random direction was Northeast (0x02)
0x16c4 (0x2d62): (0x18) If var[0x72] == (constant) 0x02 then Goto 0x16cc

/ INPUT random direction can never be South in this game but
/ branch if the previous random direction is South
0x16c8 (0x2d66): (0x19) If var[0x72] != (constant) 0x04 then Goto 0x16cf

/ INPUT random direction was South (0x04)

/ Add 0x01 to the direction 
/ var[0x0c] is the constant 0x01
0x16cc (0x2d6a): (0x0a) Set var[0x18] += var[0x0c]

/ Branch if the INPUT random direction East (0x03)
0x16cf (0x2d6d): (0x18) If var[0x72] == (constant) 0x03 then Goto 0x16d7

/ Branch if the previous random direction was NOT SE (0x05)
0x16d3 (0x2d71): (0x19) If var[0x72] != (constant) 0x05 then Goto 0x16da

/ INPUT random direction was Southeast (0x05)

/ Subtract 0x01 from the new direction to make it
/ var[0x0c] is the constant 0x01
0x16d7 (0x2d75): (0x0b) Set var[0x18] -= var[0x0c]

/ Branch if the random direction is a valid compass direction and return
0x16da (0x2d78): (0x1a) If var[0x18] < (constant) 0x09 then Goto 0x16e4

/ Random direction is NOT a valid compass direction so subtract 0x08 from it
/ to make it a valid compass direction as the addition above pushed it above
/ 0x08. This cycles the directions back over the valid compass directions.
0x16de (0x2d7c): (0x08) Set var[0x72] = (constant) 0x08

/ Subtract 0x08 from the random direction 
0x16e1 (0x2d7f): (0x0b) Set var[0x18] -= var[0x72]

/ New random direction calculated
0x16e4 (0x2d82): (0x02) Return

**************************************************************************
* Check if there is a door in any direction at the current location
* On entry:
*    var[0x58] - set to the player's current location
* On exit:
*    var[0x15] - door found (0x01) or not (0x00)
**************************************************************************

/ Loop through all directions from North (0x01) to Right (0x13)
/ for the current location.  Get the exit flags and test to see if 
/ bit 2 xxxx xNxx is set as it indicates there is a door in that 
/ direction

/ Set the door indicator flag to no door (0x00)
/ var[0x14] is the constant 0x00
0x16e5 (0x2d83): (0x09) Set var[0x15] = var[0x14]

/ Set the initial direction to check to North (0x01)
/ var[0x0c] is the constant 0x01
0x16e8 (0x2d86): (0x09) Set var[0x17] = var[0x0c]

/ Get the exit flags and target location for moving in the current direction
0x16eb (0x2d89): (0x0f) Exits - check location var[0x58] can move var[0x17] - exit flags in var[0x63] and target location (or 0x00) in var[0x72]

/ Branch if the player cannot move in that direction (target location 
/ will be set to 0x00)
/ var[0x14] is the constant 0x00
0x16f0 (0x2d8e): (0x10) If var[0x72] == var[0x14] then Goto 0x16fb

/ Branch if the exit flags are less than 0x04 (there is no door)
/ var[0x0f] is the constant 0x04
0x16f4 (0x2d92): (0x12) If var[0x63] < var[0x0f] then Goto 0x16fb

/ Bit 2 is set 1xx so there is a door in this direction

/ Door found on one of the exits, set the flag to "door present" (0x01)
/ var[0x0c] is the constant 0x01
0x16f8 (0x2d96): (0x09) Set var[0x15] = var[0x0c]

/ Increment the direction to move to the next movement direction
/ var[0x0c] is the constant 0x01
0x16fb (0x2d99): (0x0a) Set var[0x17] += var[0x0c]

/ If the direction is still a valid direction, loop back around
0x16fe (0x2d9c): (0x1a) If var[0x17] < (constant) 0x14 then Goto 0x16eb

/ All directions checked
0x1702 (0x2da0): (0x02) Return

**************************************************************************
* Sort Matched Input Words
**************************************************************************
* Sorts the ids of the matched input words into ascending order (lowest
* first).  The ids represent a direction / command / object / other
*
* [0x29] - first matched input word
* [0x2a] - second matched input word
* [0x2b] - third matched input word
* [0x72] - temporary variable to use when swapping values over 
**************************************************************************

/ Check to see if the third command or object or npc in var[0x2b] is null (zero)
/ If so skip ahead to the next check
/ var[0x14] is the constant 0x00
0x1703 (0x2da1): (0x10) If var[0x2b] == var[0x14] then Goto 0x1714

/ Branch if the dictionary id of the second word is less than the third word
/ (no flipping to be down to get them in the right order)
0x1707 (0x2da5): (0x12) If var[0x2a] < var[0x2b] then Goto 0x1714

/ Cache the second word's dictionary id
0x170b (0x2da9): (0x09) Set var[0x72] = var[0x2a]

/ Set the second word to the third word dictionary id
0x170e (0x2dac): (0x09) Set var[0x2a] = var[0x2b]

/ Set the third word to the cached second word dictionary id
0x1711 (0x2daf): (0x09) Set var[0x2b] = var[0x72]

/ Branch if the second word is null (0x00)
0x1714 (0x2db2): (0x10) If var[0x2a] == var[0x14] then Goto 0x1725

/ Branch if the dictionary id of the first word is less than the second word
/ (no flipping to be down to get them in the right order)
0x1718 (0x2db6): (0x12) If var[0x29] < var[0x2a] then Goto 0x1725

/ Cache the first word's dictionary id
0x171c (0x2dba): (0x09) Set var[0x72] = var[0x29]

/ Set the first word to the second word dictionary id
0x171f (0x2dbd): (0x09) Set var[0x29] = var[0x2a]

/ Set the second word to the cached first word's dictionary id
0x1722 (0x2dc0): (0x09) Set var[0x2a] = var[0x72]

/ Branch if the third word is null (0x00) - nothing to flip
0x1725 (0x2dc3): (0x10) If var[0x2b] == var[0x14] then Goto 0x1736

/ Branch if the dictionary id of the second word is less than the third word
/ (no flipping to be done to get them in the right order)
0x1729 (0x2dc7): (0x12) If var[0x2a] < var[0x2b] then Goto 0x1736

/ Cache the second word's dictionary id
0x172d (0x2dcb): (0x09) Set var[0x72] = var[0x2a]

/ Set the second word to the third word dictionary id
0x1730 (0x2dce): (0x09) Set var[0x2a] = var[0x2b]

/ Set the third word to the cached second word dictionary id
0x1733 (0x2dd1): (0x09) Set var[0x2b] = var[0x72]

/ Finished! All dictionary ids sorted
0x1736 (0x2dd4): (0x02) Return

**************************************************************************
* Ask the player a yes/no question
* On entry:
*    var[0x40] contains the question to ask the player
* On exit:
*    var[0x7b] containst the response, yes (0x01) or no (0x00)
**************************************************************************

/ On calling this, var[0x40] contains the yes/no message to ask

/ Print message  "\n "
0x1737 (0x2dd5): (0x05) Print message (constant) 0x05

/ Print the question passed into this subroutine, can be one of:
/ 0x35 - Really stop?
/ 0x36 - Would you like to play again?
/ 0x37 - Really restore?
/ 0xc8 - There's no web that way. You Sure? (when moving around the web)
0x1739 (0x2dd7): (0x04) Print message var[0x40]

/ Get and parse the user input
0x173b (0x2dd9): (0x01) Gosub 0x1755

/ If the first word is matched as "north" (if the player types
/ "No" it gets matched as "North"), branch ahead and set the flag as "no"
0x173d (0x2ddb): (0x18) If var[0x29] == (constant) 0x01 then Goto 0x174d

/ If the first word is matched as "negative", branch ahead 
/ and set the flag as "no"
0x1741 (0x2ddf): (0x18) If var[0x29] == (constant) 0x1f then Goto 0x174d

/ If the first word is matched as "affirmative" or "yes", branch ahead
/ and set the flag as "yes"
0x1745 (0x2de3): (0x18) If var[0x29] == (constant) 0x1e then Goto 0x1751


/ Print message  "\nPlease answer AFFIRMATIVE or NEGATIVE "
0x1749 (0x2de7): (0x05) Print message (constant) 0x38

/ Loop back and get the player input again
0x174b (0x2de9): (0x00) Goto 0x1737

**************************************************************************
* When a player answers no, set var[07b] to 0x00
**************************************************************************

/ Set the response to 0x00 for "no"
/ var[0x14] is the constant 0x00
0x174d (0x2deb): (0x09) Set var[0x7b] = var[0x14]

/ Return the response
0x1750 (0x2dee): (0x02) Return

**************************************************************************
* When a player answers yes, set var[07b] to 0x01
**************************************************************************
/ Set the response to 0x00 for "no"
/ var[0x0c] is the constant 0x01
0x1751 (0x2def): (0x09) Set var[0x7b] = var[0x0c]

/ Return the response
0x1754 (0x2df2): (0x02) Return

**************************************************************************
* Get User Input
**************************************************************************
* Get up to three words which can be commands and/or objects along with 
* total word count.  The function will parse the sentence and sticks
* matched object/command values in the following places:
* [0x29] - first matched command/object
* [0x2a] - second matched command/object
* [0x2b] - third matched command/object
* [0x2c] - count of matched command/objects
**************************************************************************

/ Print message  "\n "
0x1755 (0x2df3): (0x05) Print message (constant) 0x05

/ Get the user's input
0x1757 (0x2df5): (0x07) Input - results in word1 var[0x29], word2 var[0x2a], word3 var[0x2b], count var[0x2c]

/ Generate a new random number - never used!
0x175c (0x2dfa): (0x06) Function - Random - Set var[0x81]=<random number>

/ Branch if the recognised word count is zero and ask the player
/ to enter again
/ var[0x14] is the constant 0x00
0x175f (0x2dfd): (0x10) If var[0x2c] == var[0x14] then Goto 0x1757

/ Sort the matched word ids into ascending order (lowest first)
0x1763 (0x2e01): (0x01) Gosub 0x1703

/ Finished - input gained and sorted
0x1766 (0x2e04): (0x02) Return

**************************************************************************
* Perform a count and print of the objects in the specified location
* Count the objects in the location held in var[0x58] - this is used Instead
* of e.g. var[0x57] because the value could be the current, inventory
* or wearing locations so it's set to either the current (from var[0x57]),
* the inventory (0xe1) or wearing (0xe2) locations
**************************************************************************

/ Set the working object id to the first object (0x50) in the dictionary
0x1767 (0x2e05): (0x08) Set var[0x1b] = (constant) 0x50

/ Count of objects in the passed location (use for printing "," and " and " and ".")
/ Initialise it to 0x00 as no objects yet detected in that location
/ var[0x14] contains 0x00
0x176a (0x2e08): (0x09) Set var[0x51] = var[0x14]

/ Set the working object id to the next object id
0x176d (0x2e0b): (0x09) Set var[0x72] = var[0x1b]

/ Get the object's first location reference from list#2
0x1770 (0x2e0e): (0xa2) Set var[0x1c] = list#2[var[0x72]] (list address 0x169e)

/ Branch if the object's passed location doesn't matched the passed in location 
/ as it doesn't need to be printed and move to the next object
0x1773 (0x2e11): (0x11) If var[0x1c] != var[0x58] then Goto 0x1792

/ Object IS in the passed location
 
/ Branch if the location to check is beyond the last real location (0xbd)
/ so it's the inventory (0xe1) or wearing (0xe2) locations
0x1777 (0x2e15): (0x1b) If var[0x58] > (constant) 0xbd then Goto 0x178f

/ Add on the number of objects in the game to get to the second location
/ reference index for this object
/ var[0x6d] is the constant 0x3c (60), the number of objects in the game
0x177b (0x2e19): (0x0a) Set var[0x72] += var[0x6d]

/ Get the second location reference (either the freezer disk or 
/ the station or nothing)
/ var[0x6d] is the constant 0x3c (60), the number of objects in the game
0x177e (0x2e1c): (0xa2) Set var[0x1c] = list#2[var[0x72]] (list address 0x169e)

/ Branch if this does NOT match the player's current second location reference
0x1781 (0x2e1f): (0x11) If var[0x1c] != var[0x5a] then Goto 0x1792

/ Add on the number of objects in the game to get to the third location
/ reference index for this object
/ var[0x6d] is the constant 0x3c (60), the number of objects in the game
0x1785 (0x2e23): (0x0a) Set var[0x72] += var[0x6d]

/ Get the third location reference (either the freezer disk sector and level
/ or nothing)
/ var[0x6d] is the constant 0x3c (60), the number of objects in the game
0x1788 (0x2e26): (0xa2) Set var[0x1c] = list#2[var[0x72]] (list address 0x169e)

/ Branch if this does NOT match the player's current third location reference
0x178b (0x2e29): (0x11) If var[0x1c] != var[0x5c] then Goto 0x1792

/ Object is in the same location

/ Increment the count of objects in the passed location
/ var[0x0c] is the constant 0x01
0x178f (0x2e2d): (0x0a) Set var[0x51] += var[0x0c]

/ Move to the next object id so it can be checked on the next loop
/ var[0x0c] is the constant 0x01
0x1792 (0x2e30): (0x0a) Set var[0x1b] += var[0x0c]

/ If we haven't exceeded the maximum object id 0x8c, 
/ loop back and check the next object (loop back)
0x1795 (0x2e33): (0x1a) If var[0x1b] < (constant) 0x8c then Goto 0x176d

/ All objects checked against the passed location

**************************************************************************
* Print the objects in the passed location
**************************************************************************

/ Set the object id of the first object, the armour (0x50)
0x1799 (0x2e37): (0x08) Set var[0x1b] = (constant) 0x50

/ Current count of processed objects (how many) - initialise to zero
/ as about to loop through again and print them out until the nth 
/ object in the same location is found
/ var[0x14] is the constant 0x00
0x179c (0x2e3a): (0x09) Set var[0x4f] = var[0x14]

/ Set the temporary variable to the current object id 
0x179f (0x2e3d): (0x09) Set var[0x72] = var[0x1b]

/ NOTE Doesn't appear to be used heref
0x17a2 (0x2e40): (0x08) Set  = (constant) 0x02

/ Get the object's current location
0x17a5 (0x2e43): (0xa2) Set var[0x1c] = list#2[var[0x72]] (list address 0x169e)

/ If the object is NOT in the player's current location, branch ahead
/ and don't print it
0x17a8 (0x2e46): (0x11) If var[0x1c] != var[0x58] then Goto 0x17c6

/ Branch if the location is one of the special locations e.g. inventory, 
/ wearing or out of the game.  The last location is actually 0xb3. 
/ Note - this seems redundant as the player can never be in a location that's 
/ beyond 0xb3....
0x17ac (0x2e4a): (0x1b) If var[0x1c] > (constant) 0xbd then Goto 0x17d4

/ Location of the object is a real location

/ Set the location reference to the second reference (which is the 
/ torus / disk the player is in or outside of when set to 0x00
0x17b0 (0x2e4e): (0x0a) Set var[0x72] += var[0x6d]

/ Get the second location reference 
0x17b3 (0x2e51): (0xa2) Set var[0x1c] = list#2[var[0x72]] (list address 0x169e)

/ Branch if the first colour in the torus for the object does NOT match
/ the player's current first colour in the torus (outside the many torus this will
/ be 0x00 which is equivalent to Black)
0x17b6 (0x2e54): (0x11) If var[0x1c] != var[0x5a] then Goto 0x17c6

/ Set the location reference to the third (torus second colour x 10 + third colour x 1)
0x17ba (0x2e58): (0x0a) Set var[0x72] += var[0x6d]

/ Set the location reference to the third (torus second colour x 10 + third colour x 1)
0x17bd (0x2e5b): (0xa2) Set var[0x1c] = list#2[var[0x72]] (list address 0x169e)

/ Branch if the second and third first colours in the torus for the object do NOT match
/ the player's current second and third colours in the torus (outside the many torus 
/ this will be 0x00 which is equivalent to Black Black
/ as Black (0x0) x 10 + Black (0x0) x 1 = 0x00)
0x17c0 (0x2e5e): (0x11) If var[0x1c] != var[0x5c] then Goto 0x17c6

/ Object is in the same location as the player 

/ Print the object with the right preceding "," or "and" or nothing
0x17c4 (0x2e62): (0x00) Goto 0x17d4

**************************************************************************

/ Increment the object id (move to the next object)
/ var[0x0c] is the constant 0x01
0x17c6 (0x2e64): (0x0a) Set var[0x1b] += var[0x0c]

/ Loop back around to process the object if it's not the last object
0x17c9 (0x2e67): (0x1a) If var[0x1b] < (constant) 0x8c then Goto 0x179f

/ Last object processed

/ Branch if no objects are in this location
0x17cd (0x2e6b): (0x10) If var[0x4f] == var[0x14] then Goto 0x17d3

/ At least one object in this location

/ Print message  ".\n "
0x17d1 (0x2e6f): (0x05) Print message (constant) 0x07

/ All printed
0x17d3 (0x2e71): (0x02) Return

**************************************************************************

/ Object IS in the player's location

/ Increment the number of objects in this location by one
/ var[0x0c] is the constant 0x01
0x17d4 (0x2e72): (0x0a) Set var[0x4f] += var[0x0c]

/ Branch if only one object is in this location so far (no need
/ to print a preceding comma or "and")
0x17d7 (0x2e75): (0x10) If var[0x4f] == var[0x0c] then Goto 0x17e7

/ Branch if this is the last object in the location to prefix with 
/ an "and"
0x17db (0x2e79): (0x10) If var[0x4f] == var[0x51] then Goto 0x17e3

/ Print message  ", "
0x17df (0x2e7d): (0x05) Print message (constant) 0x03

/ Print the object name
0x17e1 (0x2e7f): (0x00) Goto 0x17e9

**************************************************************************

/ More than one object and the last object in the location so prefix with an "and"

/ Print message  "and "
0x17e3 (0x2e81): (0x05) Print message (constant) 0x06

/ Print the object name
0x17e5 (0x2e83): (0x00) Goto 0x17e9

**************************************************************************

/ Printing the first object so prefix the object with "You can see " or 
/ "You own " or "And you're wearing " or ". It holds " or "You find "
0x17e7 (0x2e85): (0x04) Print message var[0x40]

**************************************************************************

/ Print the name of the object
0x17e9 (0x2e87): (0x04) Print message var[0x1b]

/ Branch if the object is NOT the "square cup" (0x60)
0x17eb (0x2e89): (0x19) If var[0x1b] != (constant) 0x60 then Goto 0x17f6

/ Object IS the square cup (0x60)

/ Branch if the cup is empty (0x00)
/ var[0x14] is the constant 0x01
0x17ef (0x2e8d): (0x10) If var[0x6e] == var[0x14] then Goto 0x17f6

/ Cup is full (0x01)

/ Print message  "full of liquid "
0x17f3 (0x2e91): (0x05) Print message (constant) 0x109

/ Branch if the object is NOT the "toolbox" (0x8b)
0x17f6 (0x2e94): (0x19) If var[0x1b] != (constant) 0x8b then Goto 0x1801

/ Branch if the toolbox is open (0x01)
/ var[0x14] is the constant 0x01
0x17fa (0x2e98): (0x13) If var[0x53] > var[0x14] then Goto 0x1801

/ Toolbox IS closed

/ Print message  "(tight shut) "
0x17fe (0x2e9c): (0x05) Print message (constant) 0x124

/ Branch if the object is NOT the "lamp"
0x1801 (0x2e9f): (0x19) If var[0x1b] != (constant) 0x87 then Goto 0x180c

/ Object IS the lamp

/ Branch if the lamp is switched off (0x00)
/ var[0x14] is the constant 0x00
0x1805 (0x2ea3): (0x10) If var[0x3c] == var[0x14] then Goto 0x180c

/ Lamp is on (0x01)

/ Print message  "shining brightly "
0x1809 (0x2ea7): (0x05) Print message (constant) 0x12d

/ Check the next object and print it if in the player's location
0x180c (0x2eaa): (0x00) Goto 0x17c6

**************************************************************************
* Remove an object from the game or move it to its default starting location 
* if it's a form or a ticket.  Removal may be temporary as the caller may then
* change the location subsequently
**************************************************************************

/ Get the current location of the object
0x180e (0x2eac): (0xa2) Set var[0x1c] = list#2[var[0x2a]] (list address 0x169e)

/ Branch if the object is NOT in the player's inventory (0xe1)
/ var[0x1c] is the constant 0xe1
0x1811 (0x2eaf): (0x11) If var[0x1c] != var[0x10] then Goto 0x1818

/ Object IS in the player's inventory

/ Reduce the number of carried items in the inventory by 1
/ var[0x0c] is the constant 0x01
0x1815 (0x2eb3): (0x0b) Set var[0x4d] -= var[0x0c]

/ Set the temporary variable to the dictionary id of the object
0x1818 (0x2eb6): (0x09) Set var[0x1b] = var[0x2a]

/ Set the temporary variable that holds the new location of the 
/ object to out of the game (0xff)
/ var[0x13] is the constant 0xff
0x181b (0x2eb9): (0x09) Set var[0x1c] = var[0x13]

/ Each object has three location references:
/ 1. At the object id                          = the actual location id 
/ 2. At the object id + total game objects     = torus first colour 
/ 3. At the object id + 2 x total game objects = torus second colour x 10 + third colour x 1

/ Set the location reference to the second (torus first colour)
0x181e (0x2ebc): (0x0a) Set var[0x1b] += var[0x6d]

/ Set the second location reference to 0x00 (equivalent to none or Black)
/ var[0x14] is the constant 0x00
0x1821 (0x2ebf): (0xe2) Set list#2[var[0x1b]] = var[0x14] (list address 0x169e)

/ Set the location reference to the third (torus second colour x 10 + third colour x 1)
0x1824 (0x2ec2): (0x0a) Set var[0x1b] += var[0x6d]

/ Set the third location reference to 0x00 (equivalent to none or Black Black 
/ as Black (0x0) x 10 + Black (0x0) x 1 = 0x00)
/ var[0x14] is the constant 0x00
0x1827 (0x2ec5): (0xe2) Set list#2[var[0x1b]] = var[0x14] (list address 0x169e)

/ Set the new first location of the object to as per the table - it's used like this
/ when an object is actually removed from the game. There are special objects that
/ return to default locations once destroyed e.g. the forms and tickets.  HOWEVER,
/ many callers of this sub-routine, will then set the location back to the player's 
/ current location e.g. the drop command. So it's only set temporarily to e.g. 0xff
/ 
/ Behaviour:
/ 
/ Red ticket      - location set to 0x68 (104)
/ Green ticket    - location set to 0x69 (105)
/ Green form      - location set to 0x66 (102)
/ Yellow form     - location set to 0x67 (103)
/ Red form        - location set to 0x67 (103)
/ Other objects   - location set to 0xff (256)

/ 0x66 : at a small counter staffed by a faceless android
/ 0x67 : at a wide counter staffed by a faceless android
/ 0x68 : in a corner, beside a red ticket machine
/ 0x69 : in a corner beside a green ticket machine

/ Branch if the second word is NOT the red ticket (0x79)
0x182a (0x2ec8): (0x19) If var[0x2a] != (constant) 0x79 then Goto 0x1831

/ Second word IS the red ticket
0x182e (0x2ecc): (0x08) Set var[0x1c] = (constant) 0x68

/ Branch if the second word is NOT the green ticket (0x79)
0x1831 (0x2ecf): (0x19) If var[0x2a] != (constant) 0x7a then Goto 0x1838

/ Second word IS the green ticket
0x1835 (0x2ed3): (0x08) Set var[0x1c] = (constant) 0x69

/ Branch if the second word IS the orange form (0x67)
0x1838 (0x2ed6): (0x18) If var[0x2a] == (constant) 0x67 then Goto 0x1840

/ Second word is NOT the orange form

/ Branch if the second word is NOT the green form (0x67)
0x183c (0x2eda): (0x19) If var[0x2a] != (constant) 0x69 then Goto 0x1843

/ Second word IS the green form
0x1840 (0x2ede): (0x08) Set var[0x1c] = (constant) 0x66

/ Branch if the second word IS the red form (0x66)
0x1843 (0x2ee1): (0x18) If var[0x2a] == (constant) 0x66 then Goto 0x184b

/ Branch if the second word is NOT the yellow form (0x68)
0x1847 (0x2ee5): (0x19) If var[0x2a] != (constant) 0x68 then Goto 0x184e

/ Second word IS the yellow form (0x68) or red form (0x66)
0x184b (0x2ee9): (0x08) Set var[0x1c] = (constant) 0x67

/ Branch if the second word is NOT the LL9 batpak (0x5b)
0x184e (0x2eec): (0x19) If var[0x2a] != (constant) 0x5b then Goto 0x1855

/ Set the status of the lamp to off 
/ var[0x14] is the constant 0x00
0x1852 (0x2ef0): (0x09) Set var[0x3c] = var[0x14]

/ Set the location of the dropped item to the value in var[0x1c]
0x1855 (0x2ef3): (0xe2) Set list#2[var[0x2a]] = var[0x1c] (list address 0x169e)

/ All done
0x1858 (0x2ef6): (0x02) Return

**************************************************************************
* UNUSED 
**************************************************************************

/ Branch if the object is NOT a pickupable object e.g. NPC, button, number
0x1859 (0x2ef7): (0x1b) If var[0x2a] > (constant) 0x8b then Goto 0x18cf

/ Pickupable object

/ Check to see if the object is being worn, in the inventory or current location
0x185e (0x2efc): (0x01) Gosub 0x15f0

/ If the object is present branch
0x1861 (0x2eff): (0x10) If var[0x4e] == var[0x14] then Goto 0x18db

/ Object not present
0x1866 (0x2f04): (0x02) Return

**************************************************************************
* END OF UNUSED 
**************************************************************************

**************************************************************************
* Check if player has the object or is wearing it
* Sets var[0x4e] to 0x01 if the object is being worn or in the inventory
**************************************************************************

/ 1. Check to see if the object has a valid object id 
/ 2. Check to see if it's either in the inventory (0xe1) or being worn (0xe2)

/ Set the flag that indicates whether it's a valid object and if the player
/ is carrying or wearing the item
/ var[0x14] is the constant 0x00
0x1867 (0x2f05): (0x09) Set var[0x4e] = var[0x14]

/ Branch if the dictionary id of the thing that the player is interacting
/ with is NOT an object and print "You can't do that"
0x186a (0x2f08): (0x1b) If var[0x2a] > (constant) 0x8b then Goto 0x18cf

/ Get the current location of the object
0x186f (0x2f0d): (0xa2) Set var[0x1c] = list#2[var[0x2a]] (list address 0x169e)

/ Branch if the location of the object is in the player's inventory (0xe1)
/ to say the object is valid and found in the inventory
/ var[0x10] is the constant 0xe1
0x1872 (0x2f10): (0x10) If var[0x1c] == var[0x10] then Goto 0x187b

/ Branch if the location of the object is NOT being worn by the player (0xe2)
/ var[0x11] is the constant 0xe2
0x1876 (0x2f14): (0x11) If var[0x1c] != var[0x11] then Goto 0x18d4

/ Object is valid and in the player's inventory or being worn

/ Set the flag to indicate the object was found in the inventory or being worn
/ var[0x0c] is the constant 0x01
0x187b (0x2f19): (0x09) Set var[0x4e] = var[0x0c]

/ Return as the object valid, being worn or in the inventory
0x187e (0x2f1c): (0x02) Return

**************************************************************************
* Print context message for why player cannot move in requested direction
**************************************************************************

/ Player cannot move in the requested direction, print a contextual
/ reason why e.g. "Deep snow blocks you"

/ Messages with ids 0xc8 to 0xcd contain contextual messages
/ 0xc8 : There's no web that way. You sure?
/ 0xc9 : Your attempts to change direction are futile
/ 0xca : Deep snow blocks you
/ 0xcb : You bump into a wall. Ouch!
/ 0xcc : A crate's in the way
/ 0xcd : Padding blocks you
/
/ Mapping of message id to locations is as follows:
/ 0xc8 - on "the web"      - locations 0x01 to 0x16
/ 0xc9 - floating in space - locations 0x17 to 0x19
/ 0xca - snowy icefields   - locations 0x1a to 0x23
/ 0xcb - everywhere else   - locations 0x24 to 0xa1
/ 0xcc - robot store       - locations 0xa2 to 0xaa
/ 0xcd - anywhere padded   - locations 0xab to 0xb3

/ Set the default message to be "There's no web that way. You sure?" (0xc8)
0x187f (0x2f1d): (0x08) Set var[0x40] = (constant) 0xc8

/ Branch if the player's location is beyond the web (locations 0x01 to 0x16)    
0x1882 (0x2f20): (0x1b) If var[0x57] > (constant) 0x16 then Goto 0x1894

/ Player is still on the web    

**************************************************************************
* Process player asking to move off the web
**************************************************************************
/ Print the message "There's no web that way. You sure?" (0xc8) and 
/ return the player's response in var[0x7b]
0x1886 (0x2f24): (0x01) Gosub 0x1737

/ Branch if the player said "no" (0x00) so Perform location checks and print "What now?"
/ var[0x14] is the constant 0x00
0x1889 (0x2f27): (0x10) If var[0x7b] == var[0x14] then Goto 0x02ed

/ Player said "yes" (0x01)

/ Set the player's current location to "floating in space" (0x17)
/ Player doesn't die, needs the gun to float down
0x188e (0x2f2c): (0x08) Set var[0x57] = (constant) 0x17 

/ Print the location description and get next input
0x1891 (0x2f2f): (0x00) Goto 0x01d4

**************************************************************************
* Process player NOT on the web and moving in a blocked direction
**************************************************************************

/ Set the default message to be "Your attempts to change direction are futile" (0xc8)
0x1894 (0x2f32): (0x08) Set var[0x40] = (constant) 0xc9

/ Branch and print the default message if the player is on of the floating in space locations
/ 0x17 : floating in space
/ 0x18 : in space near the inner surface of the hollow snowball protecting the freezers
/ 0x19 : about to hit the fast moving ice-below. You'd better match velocities..
0x1897 (0x2f35): (0x1a) If var[0x57] < (constant) 0x1a then Goto 0x18c2

/ NOT in any of those locations

**************************************************************************
* Process player trying to move in an invalid direction in the snowy icefields
**************************************************************************

/ Set the default message to be "Deep snow blocks you" (0xca)
0x189b (0x2f39): (0x08) Set var[0x40] = (constant) 0xca

/ Branch and print the message if the player is in one of the following locations:
/ 0x1a : on a flat snowfield north of an immense unclimbably smooth cliff. A pylon stands nearby
/ 0x1b : on trodden snow between a tall pylon and a hemidome calling itself the "Snowball Hilton"
/ 0x1c : on churned and rutted snow below a tall pylon
/ 0x1d : beside the northern ice-cliff which has a tiny cave at its base. A pylon stands nearby
/ 0x1e : on smooth snow beside a pylon, dwarfed by the north cliff
/ 0x1f : on trampled snow outside a major snowdesic dome. Brilliant light from an entrance split in the hemidome illuminates a nearby pylon
/ 0x20 : on smooth snow, beside one of a chain of pylons. A ladder leads up the pylon to a cabin
/ 0x21 : on soft snow outside a sagging warehouse. A dark plastic path leads from the warehouse to a nearby pylon
/ 0x22 : at the rim of a colossal hole, hundreds of meters in width. Stars are visible in its depths. The 
ice-rim is splintered and gouged as if great heavy objects have been pushed over the edge
/ 0x23 : on a smooth icefield, lightly dusted with powder snow
0x189e (0x2f3c): (0x1a) If var[0x57] < (constant) 0x24 then Goto 0x18c2

/ NOT in any of those locations

**************************************************************************
* Process player trying to move in any of the main locations
**************************************************************************

/ Set the default message to be "You bump into a wall. Ouch!" (0xcb)
0x18a2 (0x2f40): (0x08) Set var[0x40] = (constant) 0xcb

/ Branch if the location is between "in a large hanger packed with 
/ stratogliders queued for launch. The doors of the first are open 
/ ready for embarcation" (0x24) and "in the bright, tidy docking bay 
/ of the crew habidome. An airlock iris (with button) leads further into the dome"
/ (0xa1)
0x18a5 (0x2f43): (0x1a) If var[0x57] < (constant) 0xa2 then Goto 0x18b5

/ In the robot store

**************************************************************************
* Process player trying to move in the the robot store
**************************************************************************

/ Set the default message to be "A crate's in the way" (0xcc)
0x18a9 (0x2f47): (0x08) Set var[0x40] = (constant) 0xcc

/ Branch if the location is NOT between "north of a wall of crates" (0xa2) and
/ "in a gangway between stacked containers" (0xad) i.e. not in the Robot Stores area
0x18ac (0x2f4a): (0x1a) If var[0x57] < (constant) 0xae then Goto 0x18c2

**************************************************************************
* Process player trying to move is anywhere padded
**************************************************************************

/ Player is NOT in the robot stores - they are lying or sat somewhere comfortable
/ e.g.
/ 0xae : in a sponge-lined coffin
/ 0xaf : lying on a comfortable couch
/ 0xb0 : in a broken waldo coccoon
/ 0xb1 : on the airbed, floating amidst warm air currents
/ 0xb2 : in a padded cell. The walls are lined by Tuffkwilt (TM) padding, and the only door (in the ceiling) cannot be opened by you: a wide passageway is visible through its bars. A "Nutrimat" machine is the only furniture
/ 0xb3 : seated at the console

/ Set the default message to "Padding blocks you" (0xcd)
0x18b0 (0x2f4e): (0x08) Set var[0x40] = (constant) 0xcd

/ Print the message "Padding blocks you"
0x18b3 (0x2f51): (0x00) Goto 0x18c2

**************************************************************************
* Process the number of times a player has bumped into a wall in locations 
* 0x24 through to 0xa1
**************************************************************************

/ Increment the number of times the player has bumped into a wall 
/ var[0x0c] is the constant 0x01
0x18b5 (0x2f53): (0x0a) Set var[0x71] += var[0x0c]

/ Branch and print the message if this isn't the 100th (0x64) time 
/ the player has bumped into a wall
0x18b8 (0x2f56): (0x19) If var[0x71] != (constant) 0x64 then Goto 0x18c2

/ It IS the 100th time the player has bumped into a wall, print a 
/ message that it's the 100th wall
/ Print message  "\nThat's your 100th wall!\n "
0x18bc (0x2f5a): (0x05) Print message (constant) 0x126

/ It IS the 100th wall, process as per plugh, plover and xyzzy i.e. 
/ summon the psycho bot and move the player to the padded cell
0x18bf (0x2f5d): (0x00) Goto 0x08bd

**************************************************************************
* Print the direction blocked message
*************************************************************************

/ Print the message id held in the variable
0x18c2 (0x2f60): (0x04) Print message var[0x40]

/ Blocked/unavailable direction processing complete
0x18c4 (0x2f62): (0x02) Return

**************************************************************************
* Print "You can't see it"
**************************************************************************

/ Print message  "You can't see it "
0x18c5 (0x2f63): (0x05) Print message (constant) 0xbd

/ Print a newline and go back to the main loop to reset, assess any NPC 
/ actions, print any time based messages and say What now?
0x18c7 (0x2f65): (0x00) Goto 0x05a0

**************************************************************************
* Print that "You can't" do whatever the player just asked e.g. wind <object>
* or extinguish <object>
**************************************************************************

/ Print message  "You can't do that "
0x18ca (0x2f68): (0x05) Print message (constant) 0x27

/ Print a newline and go back to the main loop to reset, assess any NPC 
/ actions, print any time based messages and say What now?
0x18cc (0x2f6a): (0x00) Goto 0x05a0

**************************************************************************
* Print "Don't be silly!"
**************************************************************************

/ Print message  "Don't be silly! "
0x18cf (0x2f6d): (0x05) Print message (constant) 0x28

/ Print a newline and go back to the main loop to reset, assess any NPC 
/ actions, print any time based messages and say What now?
0x18d1 (0x2f6f): (0x00) Goto 0x05a0

**************************************************************************
* Print that the player doesn't have the object
**************************************************************************

/ Print message  "You don't have "
0x18d4 (0x2f72): (0x05) Print message (constant) 0x2a

/ Print the name of the object in the second matched input word
0x18d6 (0x2f74): (0x04) Print message var[0x2a]

/ Print a newline and go back to the main loop to reset, assess any NPC 
/ actions, print any time based messages and say What now?
0x18d8 (0x2f76): (0x00) Goto 0x05a0

**************************************************************************
* Print "You can't see" <object>
**************************************************************************

/ Print message  "You can't see "
0x18db (0x2f79): (0x05) Print message (constant) 0x29

/ Print the name of the object in the second matched input word
0x18dd (0x2f7b): (0x04) Print message var[0x2a]

/ Print a newline and go back to the main loop to reset, assess any NPC 
/ actions, print any time based messages and say What now?
0x18df (0x2f7d): (0x00) Goto 0x05a0

**************************************************************************
* Print "What do you want to do with " <object>
**************************************************************************

/ Branch if the first word is NOT the tray (0x89)
0x18e2 (0x2f80): (0x19) If var[0x29] != (constant) 0x89 then Goto 0x18ec

/ First word is tray - code is kind here in that if you just typed "tray"
/ it will process it as "wave tray" by setting the second word to tray
/ and calling the wave/shake subroutine

/ Set the second word to "tray" 
0x18e6 (0x2f84): (0x09) Set var[0x2a] = var[0x29]

/ Call the "wave" / "shake" subroutine
0x18e9 (0x2f87): (0x00) Goto 0x0dfc

/ Branch if the second word is NOT an object e.g. NPC, static object or a word like "zero"
/ and print "I don't understand"
0x18ec (0x2f8a): (0x1b) If var[0x29] > (constant) 0x8b then Goto 0x18fd

/ Print message  "What do you want to do with "
0x18f0 (0x2f8e): (0x05) Print message (constant) 0x47

/ Print the name of the object in the second matched input word
0x18f2 (0x2f90): (0x04) Print message var[0x29]

/ Cache the last words the user entered in case their next command
/ is "again"

/ Cache the second word the player entered
0x18f4 (0x2f92): (0x09) Set var[0x2e] = var[0x29]

/ Cache the third word the player entered
0x18f7 (0x2f95): (0x09) Set var[0x2f] = var[0x2a]

/ Print a newline and go back to the main loop to reset, assess any NPC 
/ actions, print any time based messages and say What now?
0x18fa (0x2f98): (0x00) Goto 0x05a0

**************************************************************************
* Print the "I don't understand" cyclic message
**************************************************************************

/ Set the base message to be "I don't understand" (0x1d)
0x18fd (0x2f9b): (0x08) Set var[0x40] = (constant) 0x1d

/ Call the routine that cycles the messages between so that 
/ any message between 0x1d - 0x1f is shown. Options are:
/ 1. I don't understand                (0x1d)
/ 2. Eh?                               (0x1e)
/ 3. Afrle barfle gloop?               (0x1f)
/ Message is chosen based on the value of var[0x41] that cycles through
/ 0-2 everytime the routine is called (not just here)
0x1900 (0x2f9e): (0x00) Goto 0x1916

**************************************************************************
* Print the "You'll need to say more than that" cyclic message
**************************************************************************

/ Set the base message to be "You'll need to say more than that" (0x20)
0x1902 (0x2fa0): (0x08) Set var[0x40] = (constant) 0x20

/ Call the routine that cycles the messages between so that 
/ any message between 0x20 - 0x22 is shown. Options are:
/ 1. You'll need to say more than that (0x20)
/ 2. Could you elaborate?              (0x21)
/ 3. Sorry I can't guess what you mean (0x22)
/ Message is chosen based on the value of var[0x41] that cycles through
/ 0-2 everytime the routine is called (not just here)
0x1905 (0x2fa3): (0x00) Goto 0x1916

**************************************************************************
* Print the "Could you rephrase that?" cyclic message
**************************************************************************

/ Set the base message to be "Could you rephrase that?" (0x23)
0x1907 (0x2fa5): (0x08) Set var[0x40] = (constant) 0x23

/ Call the routine that cycles the messages between so that 
/ any message between 0x23 - 0x25 is shown. Options are:
/ 1. Could you rephrase that? (0x23)
/ 2. Please be more specific  (0x24)
/ 3. I don't quite understand (0x25)
/ Message is chosen based on the value of var[0x41] that cycles through
/ 0-2 everytime the routine is called (not just here)
0x190a (0x2fa8): (0x00) Goto 0x1916

**************************************************************************
* Print the "What a mouthful! I'm only an ignorant micro " message 
**************************************************************************

/ Print message  "What a mouthful! I'm only an ignorant micro "
0x190c (0x2faa): (0x05) Print message (constant) 0x26

/ Clear the gosub stack and get user input / parse
0x190e (0x2fac): (0x00) Goto 0x0452

**************************************************************************
* Print the "Nothing happens" cyclic message
**************************************************************************

/ Set the base message to be "Nothing happens" (0x32)
0x1911 (0x2faf): (0x08) Set var[0x40] = (constant) 0x32

/ Call the routine that cycles the messages below so that 
/ any message between 0x23 - 0x25 is shown. 
/ Options are:
/ 1. Nothing happens      (0x32)
/ 2. Doesn't seem to work (0x33)
/ 3. There's no effect    (0x34)
0x1914 (0x2fb2): (0x00) Goto 0x1916

**************************************************************************
* Print a cyclical message - var[0x40] contains the start message id
* but any message up to var[0x40] + 2 can be printed
**************************************************************************

/ Add 0x01 the message offset 
/ var[0x0c] is the constant 0x01
0x1916 (0x2fb4): (0x0a) Set var[0x41] += var[0x0c]

/ If the offset is less than 3, skip ahead
0x1919 (0x2fb7): (0x1a) If var[0x41] < (constant) 0x03 then Goto 0x1920

/ Reset the cyclical message offset to zero (0x00)
/ var[0x14] is the constant 0x00
0x191d (0x2fbb): (0x09) Set var[0x41] = var[0x14]

/ Add the message offset to the message base message id
0x1920 (0x2fbe): (0x0a) Set var[0x40] += var[0x41]

/ Print the cyclical message
0x1923 (0x2fc1): (0x04) Print message var[0x40]

/ Message printed
0x1925 (0x2fc3): (0x02) Return

**************************************************************************
/ JUNK?  0x820a doesn't exist
0x1926 (0x2fc4): (0x00) Goto 0x820a
**************************************************************************

**************************************************************************
* Level 9 A-Code game dissassembly complete
**************************************************************************
