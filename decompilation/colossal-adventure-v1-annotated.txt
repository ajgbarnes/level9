**************************************************************************
* Level 9 A-Code game dissassembly for Colossal Adventure (v1)
**************************************************************************

/ Created by Andy Barnes @ajgbarnes on X/Twitter

/ Location descriptions
/ ---------------------
/ Location text can be found by looking in the colossal-adventure-v1-descs.txt file 
/ The code to use is 0x64 + location id

/ Dictionary codes
/ ----------------
/ Dictionary  text can be found by looking in the colossal-adventure-v1-dict.txt file 
/
/ Note that because this game doesn't sort the matched words by dictionary id, it doesn't matter 
/ so much as in the Lords of Time where assumption are made about the order.  Sorting does make it better
/ as then you are guaranteed to have direction or verb first, then object or NPC second then NPC optionally third. 
/ They hadn't decided on that at this point but it made the code simpler in later games.
/
/ 0x01 to 0x0f - direction verbs e.g. north or across or climb
/ 0x10 to 0x22 - most other verbs e.g. fight or unlock or get
/ 0x23 to 0x23 - unusually the grate is define here as a verb (objects start next) so it can be tested against a word match
/ 0x24 to 0x43 - objects (treasure and non-treasures) e.g. sceptre or gazette or cushion
/ 0x44 to 0x44 - unusually a verb, in this instance smash/break
/ 0x45 to 0x46 - dwarves / plant NPCs
/ 0x47 to 0x47 - unusually a verb, in this instance catalogue/inventory
/ 0x48 to 0x49 - dragon / snake NPCs
/ 0x4a to 0x54 - more verbs
/ 0x55 to 0x56 - static objects (well not ones the player can pick up)
/ 0x57 to 0x5a - more verbs
/ 0x5b to 0x5b - static object (well not ones the player can pick up), door
/ 0x5c to 0x5e - more verbs
/
/ Exit flags
/ ==========
/
/ When the "exits" command is called, exit flags are returned in var[0x4e]
/ 
/ In this game they have the following definition:
/
/ Bit 0 - If set, the direction can be used inversely i.e. if this is 
/         an East entry between locations A and B then the player can go 
/         West from B to A (same for all v1 games)
/ Bit 1 - If set, there is a door in this direction between the two locations
/ Bit 2 - Not used
/
/ Object reference list
/ =====================
/
/ 1. Objects with dictionary ids from 0x24 to 0x43 are all objects that a player
/    can pick up
/ 2. Any treasures in 0x24 to 0x40 are treasures that are required to start the end game
/ 3. Treasures in 0x41 to 0x43 are higher scoring treasures but not required to start the end game
/ 4. Player cannot wear objects in this game
/ 5. The dictionary id of an object is the object id + 0x23
/
/ The A-code sometimes using the object id (obj id) and sometimes uses the dictionary id 
/ (dict id) in the table below.  All list lookups use the object id however the A-code is
/ inconsitent when checking the second word that the player input - sometimes it normalises
/ it to the object id and sometimes the value that is checked is the dictionary id. 
/
/ Obj  Dict   Object
/ Id   Id     Name  
/ ---- ----   -----------
/ 0x01 0x24 - Keys           
/ 0x02 0c25 - Lamp           
/ 0x03 0x26 - Sandwiches     
/ 0x04 0x27 - Bottle         
/ 0x05 0x28 - Cage           
/ 0x06 0x29 - Rod            
/ 0x07 0x2a - Bird           
/ 0x08 0x2b - Gold nugget    
/ 0x09 0x2c - Silver bars    
/ 0x0a 0x2d - Jewelry        
/ 0x0b 0x2e - Diamonds       
/ 0x0c 0x2f - Bear           
/ 0x0d 0x30 - Platinum       
/ 0x0e 0x31 - Emerald        
/ 0x0f 0x32 - Eggs           
/ 0x10 0x33 - Pillow         
/ 0x11 0x34 - Vase           
/ 0x12 0x35 - Trident        
/ 0x13 0x36 - Pearl          
/ 0x14 0x37 - Gazette        
/ 0x15 0x38 - Coins          
/ 0x16 0x39 - Chain          
/ 0x17 0x3a - Rug            
/ 0x18 0x3b - Treasure chest 
/ 0x19 0x3c - Spices         
/ 0x1a 0x3d - Axe            
/ 0x1b 0x3e - Dynamite       
/ 0x1c 0x3f - Pentacle       
/ 0x1d 0x40 - Jade           
/ 0x1e 0x41 - Orb            
/ 0x1f 0x42 - Sceptre        
/ 0x20 0x43 - Crown          
/
/ Lists
/ =====
/ list#1 - door status in a location, open (0x01) or closed (0x00) (writeable) 
/          In the "exits" definitions for each location, one bit denotes if there is
/          a door in that location so a player cannot just move that way without there being 
/          a door check. All doors start "closed" however the a-code checks if they are open 
/          using this list. There can only be one door in a location too. This is also used
/          if an NPC is blocking an exit (it's treated like a door), the location exit will say there
/          is a door, the code check this list but in reality the a-code will set this to open once 
/          the NPC has been taken care of.  The same for e.g. if the player needs to set off the dynamite
/          to "open the door" when a new exit is revealed after the blast. 
/          All default to closed (0x00).
/ list#2 - initial location of objects (read only)
/ list#3 - current working location of objects - initialised by list#2
/ list#4 - indicates whether the object is a treasure (0x01) or not (0x00) (read only)
/ list#5 - indicates if an object has been seen/discovered, all initialised to undiscovered 0x00 (writeable)
/
/ list#2 contents
/ ===============
/
/ Note - location descriptions start at 0x64 so to get from the location id to its
/ description, add 0x64
/
/ Obj    Object        Initial  Partial 
/ Id     Name          Loc Id   Location Description
/ ----   ------------- -------  ----------------------------------------------------------------------------------
/ 0x01 - Keys           0x0E    You are in a small building with a well in the middle of the only room.
/ 0x02 - Lamp           0x0E    You are in a small building with a well in the middle of the only room.
/ 0x03 - Sandwiches     0x0D    You are at a picnic spot littered with small tables and benches carved roughly from tree-trunks
/ 0x04 - Bottle         0x0E    You are in a small building with a well in the middle of the only room.
/ 0x05 - Cage           0x1B    You are crawling painfully over cobbles in a low passage.
/ 0x06 - Rod            0x1C    You are in a room filled with debris washed from the surface.
/ 0x07 - Bird           0x1E    You are in a splendid chamber in an east-west canyon.
/ 0x08 - Gold nugget    0x33    You are in a long low room with a crude note pinned to the wall saying 'You won't get it up to the pit'
/ 0x09 - Silver bars    0x36    You are in a low north-south passage at a hole in the floor.
/ 0x0a - Jewelry        0x35    You are in the south side chamber of the Hall of the Mountain Kings
/ 0x0b - Diamonds       0x3B    You are on the west bank of a wide fissure slicing completely across the Hall of Mists. 
/ 0x0c - Bear           0x28    You are inside the bear room
/ 0x0d - Platinum       0x1A    You are in a room with matt black walls
/ 0x0e - Emerald        0x12    You are in the Plover room: a small chamber glowing with an eerie green light.
/ 0x0f - Eggs           0x5F    You are in the Giant Room filled with enormous furniture and with no ceiling
/ 0x10 - Pillow         0x54    You are in the soft room.
/ 0x11 - Vase           0x65    This is the oriental room.
/ 0x12 - Trident        0x47    You are in a magnificent cavern with a rushing stream 
/ 0x13 - Pearl          0x00    <need to open the clam then it rolls to the cul-de-sac (0x51)>
/ 0x14 - Gazette        0x4C    You are in an anteroom leading to a large passage to the east.
/ 0x15 - Coins          0x29    You are down a dry well which smells rather disgusting.
/ 0x16 - Chain          0x00    <need to open the chain and free the bear and then in the bear room (0x28)>
/ 0x17 - Rug            0x00    <appears when the dragon is killed at a junction between the south.... (0xa8)>
/ 0x18 - Treasure chest 0x00    <appears after the pirate steals the treasure at "at a dead end" (0x73)>
/ 0x19 - Spices         0x24    You are in a small chamber filled with huge boulders.
/ 0x1a - Axe            0x00    <appears wherever the player is after the first dwarf appears>
/ 0x1b - Dynamite       0x70    <this location is inaccessible and it's moved to 0xaa after the elf transports the player>
/ 0x1c - Pentacle       0xCA    You are at the bottom of the pit, in a large pentagonal room
/ 0x1d - Jade           0xCA    You are at the bottom of the pit, in a large pentagonal room
/ 0x1e - Orb            0xDA    You are north-west of a huge web
/ 0x1f - Sceptre        0xD7    You are north-east of a huge web which hangs heavily from the cavern roof 
/ 0x20 - Crown          0xD5    You are south-east of a huge web which hangs heavily from the cavern ceiling
/
/ list#4 contents
/ ===============
/
/ Id     Object Name    Treasure? 
/ -----  -------------  ---------
/ 0x01 - Keys           No
/ 0x02 - Lamp           No
/ 0x03 - Sandwiches     No
/ 0x04 - Bottle         No
/ 0x05 - Cage           No
/ 0x06 - Rod            No
/ 0x07 - Bird           No
/ 0x08 - Gold nugget    Yes
/ 0x09 - Silver bars    Yes
/ 0x0a - Jewelry        Yes
/ 0x0b - Diamonds       Yes
/ 0x0c - Bear           No
/ 0x0d - Platinum       Yes
/ 0x0e - Emerald        Yes
/ 0x0f - Eggs           Yes
/ 0x10 - Pillow         Yes
/ 0x11 - Vase           Yes
/ 0x12 - Trident        Yes
/ 0x13 - Pearl          Yes
/ 0x14 - Gazette        No
/ 0x15 - Coins          Yes
/ 0x16 - Chain          Yes
/ 0x17 - Rug            Yes
/ 0x18 - Treasure chest Yes
/ 0x19 - Spices         Yes
/ 0x1a - Axe            No
/ 0x1b - Dynamite       No
/ 0x1c - Pentacle       No
/ 0x1d - Jade           No
/ 0x1e - Orb            Yes
/ 0x1f - Sceptre        Yes
/ 0x20 - Crown          Yes
/
/
/ Use of variables var[0xNN] in the A-code
/ ========================================
/ 0x01 - (Constant) 0x01
/ 0x02 - (Constant) 0x02
/ 0x03 - (Constant) 0xff, location code of the inventory
/ 0x04 - General purpose variable
/        1. Used to loop through all the objects, set their starting location etc when the game initialised
/        2. Current location of an object when performing a GET/TAKE
/        3. Used to loop through all the objects to see if in the player's inventory when peforming a INVENTORY/CATALOGUE
/        4. Holding the random number to see if the dwarf appears and throws an axe at you
/        5. Gets the current location of the vase when being dropped
/        6. Used to hold score increments along with var[0x32]
/ 0x05 - General purpose variable
/        1. Holding message ids
/        2. Calcuating part of the score
/        3. Determining if an item is a treasure
/        4. Determining if an item has been seen/discovered
/        5. Retrieving the current location of an object
/ 0x06 - (Constant) 0x00
/ 0x07 - (Constant) Unused - initialised to 0x78 (the location description for Hell)
/ 0x08 - Status of the bear in the bear room
/        0x00 - Fed and released from the chains
/        0x01 - Fed but still in the chains
/        0x02 - (Default) Unfed and still in chains
/ 0x09 - Witt's End probability of leaving - random number has to be lower than this 
/        for the player to leave Witt's End
/        0x1e - defaults to 30
/        0xb4 - if the target location is 0xfe (doesn't exist, nothing links to it) then it's 
/        set to this
/ 0x0a - True meaning of this may be lost forever however, the only place it is used 
/        is when determining the probability of whether a dwarf's knife will hit and 
/        kill a player. If a player has been resurrected (and subsequetly hasn't attacked
/        or killed a dwarf), then the probability is smaller. See 0x0197
/
/        Note - after resurrection, as soon as the player kills or attempts to kill a dwarf,
/        this gets reset to 0x01 and the probability returns to normal.
/ 
/        0x02 - default (no resurrection or attempted or otherwise dwarf kills)
/        0x01 - at least one dwarf killed or attempted to kill a dwarf
/        0x00 - player resurrected
/ 0x0b - Flag that indicates whether the player has saved the game, you lose a point
/        defaults to unsaved (0x01) and first save sets the points value to 0x00
/ 0x0c - Status of the spider.  The initial value (0xd8) is never used for anything
/        however it is the starting location of the spider.  Guess an early version of the
/        a-code used the value for the spider's location instead of list#3.
/        0x00 - dead after following the pentacle off the tower
/        0xd8 - alive and on its web
/        0xff - following the player's pentacle see 0x0e8e
/ 0x0d - Player's current location
/ 0x0e - Previous turn/commands flooding level 
/        either "up to your waist" (0x00) or "over you head" (0x01)
/ 0x0f - Current flooding level when water at the same location as the player
/        either "up to your waist" (0x00) or "over you head" (0x01). Note that 
/        this will NOT reduce if the player moves to a location that has a location location id
/        than the previous location so moving NE from where the the player blasted the
/        dynamite, won't reset this as it has a lower location id. Going West does though!
/ 0x10 - Flag to indicate that the player has reached the "east end of the Hall of Mists"
/        they are entitled to another 30 (0x1e) points for making progress this far
/ 0x11 - The number of evil little dwarves that are present
/ 0x12 - Total number of dwarves generated during the game. Used to generate the first dwarf that, 
/        when this is zero, throws the axe, misses and runs off.  After that used to generate evil little
/        dwarves (0x0071).
/ 0x13 - matched input word code 1
/ 0x14 - matched input word code 2
/ 0x15 - matched input word code 3
/ 0x16 - matched input word count
/ 0x17 - Multipurpose variable 
/        1. Player's target location (where the exit would take them) when moving
/        2. Location to move non-treasure items to in the routine at 0x09b3
/        3. Current location of an object when determining if seen/discovered
/ 0x18 - Multipurpose variable
/        1. Location to move treasure items to in the routine at 0x09b3
/        2. Caching of the player's current location and checking for an object's location against it (0x0a30)
/        3. Caching of the player's current location when moving items to it when the player says plover
/        4. Other caching of the player's current location
/ 0x19 - Used in a sub-routine to count the treasure items 
/ 0x1a - Set to 0x00 until all treasures are collected (excluding the org, sceptre and crown)
/        Needs the pearl to be discovered and then this is incremeneted every command/turn
/        When it reaches 0x06 the "CLICK. The cave is closing....." message will be printed
/        When it reaches 0x14 the elf will appear to initiate the end game
/        Continues to increment after this, can wrap around to 0x00 after 65,526 commands
/        but will stop there
/        Plugh, xyzzy and plover do not work once the end game starts i.e. value here is > 0x00
/ 0x1b - Number of times the player has died (can be resurrected only twice)
/ 0x1c - General purpose variable
/        1. used to calculate and print the score (0x0888)
/        2. used to hold the player's response to a qustion (0x0c41) 
/           0x00 - No
/           0x01 - yes
/           0x02 - response not understood
/ 0x1d - Accomplishment message id based on the score range below
/          0  to  60  - "A puny effort!" (0x2a4)
/         61  to 120  - "Not bad.. for a novice and a bumpkin!"(0x2a5)
/        121  to 200  - "A reasonable score." (0x2a6)
/        201  to 350  - "A good score indeed!" (0x2a7)
/        350  to 750  - "You are now an Adventurer" (0x2a8)
/        750  to 1099 - "You are now a Master Adventurer..." (0x2a9)
/        1100 to 1100 - "...the elves are waiting.... raise you on high" (0x2aa)
/ 0x1e - Daylight status of the current location - light (0x01), dark (0x00)
/ 0x1f - Daylight status of the target location - light (0x01), dark (0x00)
/        Ignored if the code passed in current location both times
/ 0x20 - Cache of the target location when checking the inventory when squeezing through the 
/        extremely tight entrance / extremely narrow crack between the plover room and the alcove
/        or vice versa 
/ 0x21 - Number of objects in player's inventory
/ 0x22 - Status of the dynamite blast in the north-west cavern
/        0x00 - not yet blasted, dwarves are alive and no huge hole west from the south-east yet
/        0x01 - blasted, dwarves are killed and a huge hole west from the south-east
/ 0x23 - Status of the troll at the rickety bridge
/        0x00 - Default state, troll has not yet appeared
/        0x01 - Troll has appeared and is asking for treasure
/        0x02 - Troll has taken the treasure and left chortling (will come 
/               back next time the player crosses the bridge, gets reset to 0x00
/               when the player crosses the bridge)
/        0x03 - Bear has chased off the troll
/ 0x24 - 0x00 - game not yet completed
/        0x01 - game completed (player will get another 100 points)
/ 0x25 - Status of the heavy dungeon door, locked (0x01) or unlocked (0x00)
/ 0x26 - Status of the seedling/plant, tiny and wilting (0x00), first growth (0x01), fully grown (0x02)
/        Plant will reset to 0x00 if it is watered a third time
/ 0x27 - Multiple uses
/        Pre-end game:
/           Print the seedling/plant growth message in location 0x5c
/           Print the right bird in a cage message (see 0x1228)
/           Print the right bear message (see 0x0a56)
/           Print the right ming vase message (see 0x0a83)
/           Print the right bottle message (see 0x0a8d)
/           Print the message for an ordinary object (see 0x00a9e)
/           Status of the crystal bridge e.g. spanning (0x01) or not there (0x00) - this never works!!!
/ 0x28 - Status of the skeletons that are chained to the walls
/        0x00 - chained to the walls
/        0x01 - regenerated back into handsome elves
/ 0x29 - Status of the bird, in the cage (0x01) or free (0x00)
/ 0x2a - Battery status of the lamp (0x2e reflects on/off) - battery usage counter. 
/        It does NOT increment when the lamp is switched off or if the battery
/        has been recharged in the maze
/        0x00           - never been switched on
/        0x01           - moves here when first switched on
/        0x01  to 0xfb  - increments every turn/command by 1
/        0xfc           - when it reaches here the value leapfrogs to 0x100
/        0xfd           - not used
/        0xfe           - dead lamp (batteries can be recharged)
/        0xff           - infinite power, never runs out after the batteries are renewd
/                         at the vending machine in the maze OR after the elf teleports you after
/                         the player accepts his quest to free the elves
/        0x100 to 0x108 - continuation counter from 0xfc increments every turn/command by 1
/        0x109          - when the lamp starts to flicker and grows dim (advised to buy new batteries)
/        0x12c          - battery dies
/ 0x2b - Another general purpose variable 
/        Cache of the current location of the pyramid so it can be moved back to this location (0x099c)
/        Object to check in player's inventory (used for that quite a bit)
/ 0x2c - Indicates if the FIRST set of elves are chained to the wall (0x00) or release (0x01)
/ 0x2d - Indicates if the SECOND set of elves are chained to the wall (0x00) or release (0x01)
/ 0x2e - Lamp status - on (0x01) and off (0x00) status
/ 0x2f - Contents of the bottle, empty (0x00), water (0x01) or oil (0x02)
/ 0x30 - Is the player quitting the game (0x01) or not (0x00)
/        Used by the score calculation routine - if the player is quitting they don't
/        get 9 points
/ 0x31 - Tracks the score increment for using the dynamite
/        0x00 (0)   - Dynamite not used
/        0x14 (20)  - Dynamite detonated (+20)
/        0x64 (100) - Dynamite detonated (+20), woke up the dwarves, and roof collapses killing...dwarves (+80) but the player dies
/        0xc8 (200) - Dynamite detonated (+20) and blast collapses the celing.. killing (+180), player lives
/ 0x32 - Used to hold the score increment when calculating the player's score
/ 0x33 - contains the count of non-treasure items processed (may or may now
/        be in the player's inventory depending on value of var[0x18])
/ 0x34 - Another general purpose variable
/        Location of the lamp
/        Location of the pentacle
/ 0x35 - Used only to hold the location of the object when checking if it's in the player's inventory
/        and used to branch away if the object is not there
/ 0x36 - Next expected word in the FEE, FIE, FOE, FOO sequence
/        0x00 - player hasn't typed any of those words
/        0x01 - next expected word is FIE, player last typed any of FEE, FIE, FOE, FOO
/        0x02 - next expected word is FOE, player last typed FIE
/        0x03 - next expected word is FOO, player last typed FOE
/ 0x37 - Location of the water that seeps into the cave after the dynamite explodes 
/      - 0x00         - dynamite has not exploded yet, no explosion
/      - 0xa9         - dynamite has exploded and water is "at the north-east end of a vast cave"
/      - 0xa9 to 0xc3 - water advances every other turn trying to catch the player
/      - 0xc4         - this is a hidden location that represents the fissure, there will be 
/                       a big explosion that will kill the player if they did not lock the 
/                       heavy dungeon door. Location moves to 0xc5 on next command
/      - 0xc5         - Water does not move beyond here, when it's in this location it
/                       just stays there for the rest of the game
/ 0x38 - Water movement counter. After the dynamite explodes, this is incremented every turn starting
/        at 1.  When it reaches 3, it's reset to 1 and var[0x37] is incremented.  This means that the
/        water moves every other turn.  And it reflects the number of turns/commands water has been present
/        in its current location (max of 2)
/        
/ Notes and observations
/ ======================
/
/  1. You can say CATALOGUE instead of INVENTORY... who knew...
/  2. Player can only carry 0x04 items (0x04f5 enforces the rule)
/  3. Less likely to be hit by a dwarf's "sharp little knife" if there is only one
/     dwarf in the location
/  4. Resurrecting yourself decreases your chance of being hit by a dwarf's knife
/  5. Player can only be resurrected twice
/  6. You don't have to say "FEE" for the sequence "FEE", "FIE", "FOE", "FOO", the
/    first word can be any of those words despite the clue
/  7. If you start the sequence with any of those four words, even if you type 
/    e.g. "North" next it'll print "Get it right, dummy"
/  8. Player has a ~87.8% (31/256) chance of hitting a dwarf when throwing an axe (30/255)
/  9. The water after the dynamite explosion moves every other turn/command
/ 10. If the water is in the previous location to the player, it trickes in
/ 11. When the water reaches the fissure, it only kills the player if the heavy 
/     dungeon door is unlocked no matter where they are (it acts as a barrier
/     between the explosion at the fissure and the player). The door can only be locked
/     from the side away from the fissure.
/ 12. There's a hidden location (0xc4), the fissure, with no description
/     which is used as the fissure that's between the two locations on the east (0xc3)
/     and west banks (0xc5) - it allows the water to reach there and explode when it 
/     touches the lava. 
/ 13. Player cannot always be resurrected - any death by dynamite or the water hitting
/     the lava will I guess ruin the dungeon so they don't get the option. 
/ 14. Even though the dynamite is still in the game, you cannot blast it a second time
/ 15. Only an ~8% (21/256) chance of hearing "PLUGH" in the room with Y2 carved on the rock
/ 16. The lamp lasts 295 turns
/ 17. You can recharge the lamp after which it'll stay on indefinitely
/ 18. You won't see the lamp flicker if it's in the same location as you but not in your inventory
/ 19. The lamp starts to flicker at 260 turns/commands (turning it on counts as 1)
/ 20. Presumably at some point a single byte was used for the lamp status
/     with 0xfe / 0xff using as special values - but the lifetime of the batteries
/     was extended (maybe because colossal is bigger than adventure) and hence 
/     the code leapfrogs over the special values when the counter reaches 0xfc 
/     to continue counting at 0x100
/ 21. If you try and get the bird when you have the cage but you also have the black rod
/     the bird "flies away in total panic and flutters against the ceiling" - no idea the
/     thought process behind this
/ 22. French (non), German (nein) and Russian (niet) [modern times would anglify this as "nyet"] 
/     are accepted along with "no" (which partially matches "non" in the dictionary).  But for the 
/     positives only English words (yes/yeah/please)
/ 23. If a player types "N" to a question, it matches North (0x01) in the dictionary and has a 
/     special case to match it in the yes/no processing (0x0c4e)
/ 24. Ways to die:
/     1. Drowning by the flood (no resurrection)
/     2. Blowing yourself up with dynamite (no resurrection) by many means 
/     3. Waking the snoring dwarves with the dynamite (no resurrection)
/     4. Threatening little dwarf kills you with a a sharp little knife (resurrection possible)
/     5. Climbing a strand up the huge web when the spider is following the pentacle (resurrection not possible)
/     6. Being killed by the explosion when the water reaches the lava if the player hasn't gone beyond 
/        the heavy dungeon door and locked it (no resurrection)
/     7. Falling to the rocks below when in certain locations) (resurrection possible)
/     8. Falling into a pit in the dark ~33% chance (resurrection possible)
/     9. Crossing the rickety bridge carrying the bear (resurrection possible but the bear is removed from the game)
/    10. If the player is moving from "the passage from the east ends here..." (0x1f) to 
/        "at the east end of the Hall of Mists" (0x32) )when carrying the golden nugget (resurrection possible)
/    11. Littering in the picnic spot (0x0d) gets the player smited (resurrection possible)
/    12. Throwing the pentacle when NOT at the "top of a high stone pinnacle" (0xd1) when the 
/        spider is following the player (no resurrection)
/ 25. When you resurrect, all your items are placed in the "small brick building" apart from the 
/     lamp which is placed in the starting location " beside a small brick building" (0x01) - is 
/     that by design or a bug? Seems the latter?
/ 26. You can get from the small building to the room with the Y2 rock by saying PLUGH even
/     at the start of the game. There is no check for the gleaming pearl status. Is that a bug?
/     It's checked when going from the Y2 rock to the small building ONLY
/ 27. You can get from the small building to the room with the Y2 rock by saying XYZZY even
/     at the start of the game. There is no check for the gleaming pearl status. Is that a bug?
/     It's checked when going from the Y2 rock to the small building only
/ 28. XYZZY will only work to move between the small building and the Y2 rock until you 
/     pick up the gleaming pearl (why make it stop?)
/ 29. PLOVER will only work to move between the small building and the Y2 rock until you 
/     pick up the gleaming pearl (why make it stop?)
/ 30. Unused A-code at 0x09a6 that sets the constants
/ 31. After you kill all the snoring dwarves with the dynamite, the location description doesn't change
/     if you go back NE from the "south-west end of a vast hall...." (0xaa) to "north-east end of a vast
/     cave" (0xa9) nor does the description change in "south-west end of a vast hall...." (0xaa). Both 
/     still reference the snoring dwarves.
/ 32. If the player is in the same location as the dynamite when it explodes
/     or its in their inventory, the dwarves wake up, throw their knives and
/     kill the player.
/ 33. The bird can attack either the oriental dragon or the snake - it will kill the snake
/     but get eaten by the dragon.  The dragon can be killed with your bare hands.
/ 34. The probability of leaving Witt's End originally I think allowed a better proability if the player
/     was heading towards a specific target location.  But somewhere along the way it changed to target
/     location (0xfe) which doesn't exist and nothing links to it (see 0x03c2)
/ 35. Nice Monty Python reference if you try and feed the sandwiches to the bird "It's not hungry, just pining for the fjords "
/ 36. Player cannot try and feed the bird if it's in the player's inventory
/ 37. Waving at the shadowy figure across the canyon is a nice game feature
/ 38. It's odd that at 0x0b5f, the presence of a message on the last look is used to determine
/     if the crystal bridge is there over the wide fissure which cuts completely across the 
/     dungeon walkway".  Why not use the status in list#1 for the location?
/ 39. There are 21 locations in the "maze of twisty little passage, all different"
/ 40. Most locations in the "maze of twisty little passage, all different" do not 
/     have exits defined (only 4 locations do to take the player back to the west 
/     end of the long hall). Any direction that isn't mapped in any of this locations
/     will force a calculation of which other maze location to go to - this is derived
/     by adding the direction's dictionary id to the location id and subtracting 0x15 if it'S
/     outside of the maze to make it loop back around.
/ 41. Based on this, quickest way to the vending machine from the first location (0x92)
/     is "cross" then "southeast".  Then "north" and "up" to leave the maze.
/ 42. Part of the code is NEVER executed (0x0311 to 0x031e).  A player can be randomly 
/     taken to one of 10 locations (0x61 to 0x6a) - this seems to be a hangover from maybe 
/     an earlier design where (I guess) leaving Witt's end would randomly take you to one of these
/     locations however it's been changed to take you back to Witt's End only
/ 43. Movement NW from the "room whose walls resemble swiss cheese" to the "oriental room"    
/     is only allowed ~52% of the time (135/255)
/ 44. For scoring, treasures with an id less than 0x1d will score 5 points for being discovered/seen
/     but the high value items (sceptre/orb/crown) won't
/ 45. The player can set off the dynamite not just by typing "blast" or detonate" but also
/     "say <anything>" but this will kill the player even if the dynamite is in either the north-east end
/     or south-west end of the vast hall
/ 46. Dynamite also explodes if the player throws/hurls/lobs anything
/ 47. Dynamite also explodes if the player fights/attacks/kills/hits anything
/ 48. Dynamite also explodes if the player types plugh
/ 49. Dynamite also explodes if the player types xyzzy
/ 50. Dynamite also explodes if the player types plover
/ 51. Dynamite also explodes if the player types shazam/sesame/hocus 
/ 52. Dynamite also explodes if the player types open orb or unlock orb
/ 53. Code for processing gold/nugget (0x0e25) doesn't seem to do anything useful
/ 54. If the player has not put the treasures (with object id < 0x1c) in the "small building (0x1c)
/     when they accept the quest from the elf to free the elves, they are removed from the game
/     and will not score at the end of the game
/ 55. Endgame starts after the player picks up the glistening pearl (and they have all the minor treasures)
/     a. After the 5th turn (including the one picking up the pearl) the
/        "CLICK. The cave is closing...." message appears
/     b. After the 20th turn (including the one picking up the pearl) the
/        elf appears to force the endgame question 
/ 56. Plugh / xyzzy / plover no longer work after the end game starts (when the player picks up the
/     glistening pearl and has all the minor treasures)
/ 57. End game can only start once the player has discovered all the minor treasures (see 0x0d87)
/ 58. When saying plover in the plover room, only the pyramid and non-treasures can move with you 
/     - all other treasure items will stay behind
/ 59. The pentacle provides a source of light
/ 60. If the player is carrying both the pentacle and the lamp, it will be dark, unless the lamp
/     is switched off
/ 61. Only the first 0x6d locations have their door status initialised - no "door checks" 
/     for locations after that 
/ 62. Dwarves only appear if the player's location is between (inclusive) the "east end of the 
/     Hall of Mists" (0x31) and "the end of the "twisty passages..., all different" (0xa5) 
/ 63. There is a 1.5% (4/256) chance of a/another dwarf appearing between (inclusive) the "east end of the 
/     Hall of Mists" (0x31) and "the end of the "twisty passages..., all different" (0xa5).  
/ 64. There is a 0.7% (2/256) chance of the pirate appearing between (inclusive) the "east end of the 
/     Hall of Mists" (0x31) and "the end of the "twisty passages..., all different" (0xa5).  
/ 65. The a-code will always print "a crystal bridge spans the fissure" if the players is east 
/     or west of a wide fissure which cuts completely across the dungeon walkway (0xc3 or 0xc5).  It shouldn't 
/     but it uses a status variable (var[0x27]) that is multi-purpose mostly for displaying messages 
/     and is always positive based on the last additional description message printed.  Seems the intent
/     was maybe to have the rod waved again here? See 0x0449
/ 66. Dropping the elixir in the wrong location prints a nice message (0x05c3)
/ 67. The player needs the trident to open the clam to release the pearl
/ 68. When the clam/oyster is opened to release the pearl, the A-code "opens" the door
/     in that location "room decorated with millions of shells" (0x67) but nothing is blocking
/     the player and there is no code to process that movement.  It's only used as a flag 
/     to indicate whether the clam is open or closed - does not block any movement but maybe it did
/     in an earlier iteration, otherwise why not use a variable for the status?
/ 69. There is a redundant piece of code at 0x0551 where the if...then... can never be true
/     list#1 values can only ever be 0x00 or 0x01 and it checks against 0xff
/ 70. Quite a beautiful Easter Egg in the code - Heaven (0x13) and Hell (0x14) are defined 
/     as locations in the game. When you die, you don't know it but you are taken to "Heaven"
/     as your location (var[0x0d]) is set to 0x13. What is wonderful though is that a direction
/     is specified in the exits table to allow a player to cross from Heaven into Hell.  It's one 
/     way though! Wonder if originally the player was allowed to visit Heaven / Hell as part of
/     dying...?
/ 
/     Addr From To Dir   Inverse Door Hide MsgId
/     ---- ---- -- ----- ------- ---- ---- -----
/     04a4 013 014 Cross No      No   No   077     <--- Cross from Heaven to Hell
/     04a6 014 000   -   No      No   No   078
/ 
/     Location descriptions:
/     0x13 - You are in Heaven, sitting on a cloud and strumming a harp. It's not quite what you expected: rather boring in fact
/     0x14 - You are in Hell. The air is very hot and there is a strong stench of brimstone. It is definitely not boring, but slightly more painful than Heaven was!
/ 71. There is no door bit checking in this game in the "exits" table - all "door checking" is managed 
/     by list#1 and A-code (unlike in say Lords of Time and Snowball)
/ 72. There is no "door checking" for exits beyond locations 0x6d - all locations are assumed unblocked or handled in the A-code
/     by e.g. maze code
/ 73. The location exits blocked flag in list#1 for locations 0x20 and 0x5d seem to be set the wrong way round - when the 
/     troll leaps out they are set to 0x01 and when the troll is scared off they are set to 0x00.  This is the Inverse
/     of all other exits blocked flag usage in list#1 where 0x01 represents that the exits are unblocked.  See 0x056b, 0x63c and 
/     0x03a3.  These flags are never used / checked for this location, only the troll's status in var[0x23].
/ 74. The Colossal Cave A-code has a concept of object ids and dictionary ids.  A dictionary id for the same
/     object is the object id + 0x23.  So for Keys, the object id is 0x01 in all lists however as a word that 
/     matches in the dictionary it's referenced as 0x24.  Lords of Time and Snowball scrapped this and just used
/     the dictionary id everywhere to simplify things.


**************************************************************************
* A-code entry point
**************************************************************************

/ Call the initialisation routine
0x0000 (0x07e0): (0x00) Goto 0x0005

**************************************************************************
* NEVER USED
**************************************************************************

/ NOTE This is never executed

/ Seems to be an A code entry point to skip initialisation but it's never called
/ Probably some test harness thing back with their original tools that allowed
/ state to be loaded first and jump into the game processing
0x0002 (0x07e2): (0x00) Goto 0x0049

**************************************************************************
* New game initialisation (including after a player dies)
**************************************************************************

/ Reset all the variables to 0x00 - engine underneath on the BBC Micro
/ assumes a maximum of $6E / 110 variables
0x0005 (0x07e5): (0x06) Function - Clear Workspace (0x05)

/ Set this to the constant 0x01
0x0007 (0x07e7): (0x08) Set var[0x01] = (constant) 0x01

/ Set this to the constant 0x02
0x000a (0x07ea): (0x08) Set var[0x02] = (constant) 0x02

/ Set this to the constant 0xff
0x000d (0x07ed): (0x08) Set var[0x03] = (constant) 0xff

/ Set the initial object id to the first proper object the keys (0x01)
0x0010 (0x07f0): (0x09) Set var[0x04] = var[0x01]

/ Loop here through all the objects / first 0x21 locations...

/ Get the initial location of the object from list#2
0x0013 (0x07f3): (0xa2) Set var[0x05] = list#2[var[0x04]] (list address 0x0795)

/ Set the current location for the object to the initial location from list#3
0x0016 (0x07f6): (0xe3) Set list#3[var[0x04]] = var[0x05] (list address 0x0860)

/ Set the object as undiscovered/unseen (0x00)
/ var[0x06] is the constant 0x00
0x0019 (0x07f9): (0xe5) Set list#5[var[0x04]] = var[0x06] (list address 0x08b0)

/ Set the "door status" for the location id to shut (0x00) 
/ Note - var[0x04] is used here as a reference to the nth object and also nth location
/ var[0x06] is the constant 0x00
0x001c (0x07fc): (0xe1) Set list#1[var[0x04]] = var[0x06] (list address 0x07e0)

/ Move to the next object / location id
0x001f (0x07ff): (0x0a) Set var[0x04] += var[0x01]

/ There are 33 objects (0x21) in the game, loop until they have all been
/ initialised (from the grate to the crown)
0x0022 (0x0802): (0x1a) If var[0x04] < (constant) 0x22 then Goto 0x0013

/ All objects processed (there are only 0x21 / 33 objects in the game)
/ but only first 0x21 locations so now do the rest of the locations 
/ There are 227 locations although some are not used or visible

/ Start with location 0x22

/ Set the "door status" for the location id to shut (0x00) - doors
/ are virtual i.e. it could be a door or represent a troll blocking the 
/ way or a cave to be blown up and revealed
/ Note - var[0x04] is used here only as a reference to the nth location
/ var[0x06] is the constant 0x00
0x0026 (0x0806): (0xe1) Set list#1[var[0x04]] = var[0x06] (list address 0x07e0)

/ Move to the next location id
0x0029 (0x0809): (0x0a) Set var[0x04] += var[0x01]

/ Loop around until locations up to 0x6d are processed
/ NOTE is this a bug? There are 0xe3 locations....
0x002c (0x080c): (0x1a) If var[0x04] < (constant) 0x6e then Goto 0x0026

/ NOTE Unused variable but set to the description / message id for Hell...
0x0030 (0x0810): (0x08) Set var[0x07] = (constant) 0x78

/ Initialise the state of the bear to unfed and in chains (0x02)
/ var[0x02] is the constant 0x02
0x0033 (0x0813): (0x09) Set var[0x08] = var[0x02]

/ Default the Witt's end getting lost probability to 30 (0x1e)
/ (never changes despite the code at 0x03c2).  Random number
/ has to be less than this for them to leave Witt's End. So only 11.7%
/ chance of leaving
0x0036 (0x0816): (0x08) Set var[0x09] = (constant) 0x1e

/ Default the probability of a dwarf's knife hitting the player to "normal" (0x02)
0x0039 (0x0819): (0x09) Set var[0x0a] = var[0x02]

/ Set the number of points to add for NO saves to 0x01 - this gets reset to 0x00
/ when the players performs any save 
/ var[0x01] is the constant 0x01
0x003c (0x081c): (0x09) Set var[0x0b] = var[0x01]

/ Default the status of the spider to "alive and on its web" (0xd8)
/ This value is actually the spider's starting location (but it's never 
/ used for that) which is " amongst the strands of a huge web that 
/ rises to the roof" (0xd8)
0x003f (0x081f): (0x08) Set var[0x0c] = (constant) 0xd8

/ Print message "\n\nWelcome to Colossal Adventure, the original classic mainframe adventure, from Level 9 Computing\n\n"
0x0042 (0x0822): (0x04) Print message var[0x01]

/ Print message  "\n "
0x0044 (0x0824): (0x05) Print message (constant) 0x0c

/ Set the initial location to room 0x01
/ var[0x01] is the constant 0x01
0x0046 (0x0826): (0x09) Set var[0x0d] = var[0x01]

/ Perform a "LOOK" of the first location
/ Check to see if it's light / dark in the location and print a 
/ description or "it's dark"
0x0049 (0x0829): (0x00) Goto 0x03ed

**************************************************************************
* End of new game initialisation 
**************************************************************************

/ Perform a flood level check
0x004c (0x082c): (0x01) Gosub 0x0da7

/ Cache the flooding level from the previous turn/command 
/ This is used to check if the flooding level has been above the player's head
/ for two turns and if so the player will drown (0x0d3e)
0x004f (0x082f): (0x09) Set var[0x0e] = var[0x0f]

/ Branch if the player's current location is NOT "...at the east end of the Hall of Mists,"
0x0052 (0x0832): (0x19) If var[0x0d] != (constant) 0x32 then Goto 0x0059

/ Location is "...at the east end of the Hall of Mists,"

/ Set the flag that indicates they have progressed to the "east end of the Hall of Mists"
/ to true (0x01) - this scores them more points
/ var[0x01] is the constant 0x01
0x0056 (0x0836): (0x09) Set var[0x10] = var[0x01]

/ Branch if the player's location is beyond the "maze of twisty little passages, all different"...
0x0059 (0x0839): (0x1b) If var[0x0d] > (constant) 0xa5 then Goto 0x0061

/ Branch if the player's location is after " at the east end of the Hall of Mists"
0x005d (0x083d): (0x1b) If var[0x0d] > (constant) 0x31 then Goto 0x0066

/ Player is either beyond the end of the "twisty passages..., all different" (0xa5) 
/ or before the "east end of the Hall of Mists" (0x31) so reset the dwarves to zero

/ Reset the number of angry little dwarves that are present to zero
0x0061 (0x0841): (0x09) Set var[0x11] = var[0x06]

/ Check status of the lamp and if a hollow voice says "Plugh"
/ and get the next user input
0x0064 (0x0844): (0x00) Goto 0x0084

**************************************************************************
* Check to see if a/another dwarf appears or if the pirate appears and
* and steals the player's treasure - player's location has to be 
* between (inclusive) the "east end of the Hall of Mists" (0x31) and 
* "the end of the "twisty passages..., all different" (0xa5) 
**************************************************************************

/ Player's location is after " at the east end of the Hall of Mists" and
/ not beyond the end of "the maze of twisty little passages... all different"

/ Generate a random number to see if a dwarf appears
0x0066 (0x0846): (0x06) Function - Random - Set var[0x04]=<random number>

/ Branch if the random number is greater than 0x05
/ Low probability of generating a dwarf or the pirate appears and steals the
/ player's treasure, random number would have to be greater than 0x01 and less than
/ or equal to 0x05 for a dwarf to appear or between 0x00 and 0x01 inclusive for the 
/ pirate to appear. Branching will take the code back to the main loop to check 
/ for lamp, check if a voice says plugh and get user input
0x0069 (0x0849): (0x1b) If var[0x04] > (constant) 0x05 then Goto 0x0084

/ Branch if the random number is less than 0x02 to see if the 
/ pirate appears and steals the player's treasure
/ var[0x02] is the constant 0x02
0x006d (0x084d): (0x12) If var[0x04] < var[0x02] then Goto 0x009e

/ Branch if at least one dwarf has been generated so far in this game
/ (the axe appears on the first dwarf in the game only)
0x0071 (0x0851): (0x13) If var[0x12] > var[0x06] then Goto 0x007c

/ No dwarves generated so far

/ Print message  "\nA dwarf appears and throws an axe which misses you. The dwarf curses and runs off round a corner "
0x0075 (0x0855): (0x05) Print message (constant) 0x5b

/ Set the current location of the axe (0x1a) to the player's current location
0x0077 (0x0857): (0x83) Set list#3[0x1a] = var[0x0d]

/ Increment the number of dwarves generated by one
0x007a (0x085a): (0x00) Goto 0x0081

/ At least one dwarf has been generated before this turn - generate a new one

/ Print message  "\nAn evil little dwarf appears!"
0x007c (0x085c): (0x05) Print message (constant) 0x5c

/ Increment the number dwarves that are in the location
0x007e (0x085e): (0x0a) Set var[0x11] += var[0x01]

/ Increment the total number of dwarves that have spawned in the game
0x0081 (0x0861): (0x0a) Set var[0x12] += var[0x01]

**************************************************************************
* Check status of the lamp and if a hollow voice says "Plugh"
**************************************************************************

/ Check the status of the lamp
0x0084 (0x0864): (0x01) Gosub 0x0f33

/ Check to see if a hollow voice says "plugh"
0x0087 (0x0867): (0x01) Gosub 0x0f25

*************************************************************************
* Get User Input
**************************************************************************
* Get up to three words which can be commands and/or objects along with 
* total word count.  The function will parse the sentence and sticks
* matched object/command values in the following places:
* [0x13] - first matched command/object
* [0x14] - second matched command/object
* [0x15] - third matched command/object
* [0x16] - count of matched command/objects
**************************************************************************

/ Print message  "\nWhat now?\n "
0x008a (0x086a): (0x05) Print message (constant) 0x0d

/ Get user input and store results after parsing against dictionary
0x008c (0x086c): (0x07) Input - results in word1 var[0x13], word2 var[0x14], word3 var[0x15], count var[0x16]

/ Clear the gosub stack as this turn is over - for instances where
/ there has been a gosub and there was no return because e.g. there was 
/ a goto back to another part of the game
0x0091 (0x0871): (0x06) Function - Clear Stack (0x06)

/ Process FEE FIE FOE FOO in order
0x0093 (0x0873): (0x01) Gosub 0x0f0b

/ Branch if either no words were entered (var[0x016] is the word count)
/ OR if the FEE, FIE, FOE, FOO reset it to zero because the word
/ entered was out of order. Branching prints "What now?" and asks for the next
/ input to be entered
/ var[0x06] is the constant 0x00
0x0096 (0x0876): (0x10) If var[0x16] == var[0x06] then Goto 0x008c

/ Call the jump table to call the right routine for the command - there is an entry
/ for every dictionary item (0x01 to 0x58). var[0x13] will contain the first matched
/ dictionary word or be set to zero if nothing was matched (that will never happen
/ here as the previous test loops back to get more input if no words were matched)
0x009a (0x087a): (0x0e) Jump table at 0x00bf (0x089f) - nth entry in var[0x13]

/ End of main loop...

**************************************************************************
* Process the pirate stealing the player's treasure
**************************************************************************

/ Set the temporary variable to the status of the pirate's treasure chest
0x009e (0x087e): (0xc5) Set var[0x04] = list#5[0x18]

/ Branch if the pirate's treasure chest is already "discovered" i.e. the pirate
/ has already stolen treasure from the player (he only does this once)
/ var[0x01] is the constant 0x01
0x00a1 (0x0881): (0x10) If var[0x04] == var[0x01] then Goto 0x0071

/ Set the location to move the non-treasure items to to the inventory (0xff)
0x00a5 (0x0885): (0x09) Set var[0x17] = var[0x03]

/ Set the location to move the treasure items to to the inventory (0xff)
0x00a8 (0x0888): (0x09) Set var[0x18] = var[0x03]

/ Count the treasure, non-treasure and total number of items in the player's inventory
/ and move the items to the locations specified above
0x00ab (0x088b): (0x01) Gosub 0x09b3

/ Branch if the player does NOT have any treasure - nothing for the pirate to steal
0x00ae (0x088e): (0x10) If var[0x19] == var[0x06] then Goto 0x0071

/ Set the location for treasures to be "at a dead end" (0x73)where the pirate hides all the 
/ player's treasures
0x00b2 (0x0892): (0x08) Set var[0x18] = (constant) 0x73

/ Set the location of the pirate's treasure chest (0x18) to "at a dead end" (0x73)
0x00b5 (0x0895): (0x83) Set list#3[0x18] = var[0x18]

/ Move the treasures to "at a dead end" (0x73) and keep the non-treasures in the 
/ inventory (0xff)
0x00b8 (0x0898): (0x01) Gosub 0x09b3

/ Print message  "\nOut from the shadows behind you pounces a bearded pirate! "HAR, HAR", he chortles, "I'll just take all this booty and hide it with me chest deep in the maze!". He snatches all of your treasure and vanishes into the gloom\n "
0x00bb (0x089b): (0x05) Print message (constant) 0x5d

/ Check status of the lamp and if a hollow voice says "Plugh"
/ and get the next user input
0x00bd (0x089d): (0x00) Goto 0x0084

**************************************************************************
* Jump tables are actually just a lookup by index of the dictionary id
* of the first word the player entered. That returns an offset into the
* a-code on where to start executing.  For ease of understanding,
* the disassembly produced if... in... goto statements, a little more 
* readable and useful than just a list of indexed addresses
**************************************************************************
Jump Table       (Idx) 
**************************************************************************

0x00bf (0x089f): (0x00) If player cmd in n/a Goto 0x01b5
0x00c1 (0x08a1): (0x01) If player cmd in {'NORTH'} Goto 0x0237
0x00c3 (0x08a3): (0x02) If player cmd in {'NORTHEAST', 'NEAST'} Goto 0x0237
0x00c5 (0x08a5): (0x03) If player cmd in {'EAST'} Goto 0x0237
0x00c7 (0x08a7): (0x04) If player cmd in {'SOUTH'} Goto 0x0237
0x00c9 (0x08a9): (0x05) If player cmd in {'SEAST', 'SOUTHEAST'} Goto 0x0237
0x00cb (0x08ab): (0x06) If player cmd in {'SWEST', 'SOUTHWEST'} Goto 0x0237
0x00cd (0x08ad): (0x07) If player cmd in {'WEST'} Goto 0x0237
0x00cf (0x08af): (0x08) If player cmd in {'NWEST', 'NORTHWEST'} Goto 0x0237
0x00d1 (0x08b1): (0x09) If player cmd in {'UPWARDS', 'ABOVE'} Goto 0x0237
0x00d3 (0x08b3): (0x0a) If player cmd in {'DOWN'} Goto 0x0237
0x00d5 (0x08b5): (0x0b) If player cmd in {'INSIDE', 'INTO', 'ENTER'} Goto 0x0237
0x00d7 (0x08b7): (0x0c) If player cmd in {'EXIT', 'LEAVE', 'OUTSIDE'} Goto 0x0237
0x00d9 (0x08b9): (0x0d) If player cmd in {'LEAP', 'JUMP'} Goto 0x0237
0x00db (0x08bb): (0x0e) If player cmd in {'CLIMB'} Goto 0x0237
0x00dd (0x08bd): (0x0f) If player cmd in {'CROSS', 'OVER', 'ACROSS'} Goto 0x0237
0x00df (0x08bf): (0x10) If player cmd in {'CARRY', 'GET', 'KEEP', 'TAKE', 'CATCH'} Goto 0x04a5
0x00e1 (0x08c1): (0x11) If player cmd in {'DROP', 'RELEASE', 'DISCARD', 'FREE'} Goto 0x051b
0x00e3 (0x08c3): (0x12) If player cmd in {'LOB', 'THROW', 'CHUCK'} Goto 0x05d3
0x00e5 (0x08c5): (0x13) If player cmd in {'UNLOCK', 'OPEN'} Goto 0x065c
0x00e7 (0x08c7): (0x14) If player cmd in {'LOCK', 'SHUT', 'CLOSE'} Goto 0x0db6
0x00e9 (0x08c9): (0x15) If player cmd in {'ON', 'LIGHT'} Goto 0x0707
0x00eb (0x08cb): (0x16) If player cmd in {'OFF'} Goto 0x071a
0x00ed (0x08cd): (0x17) If player cmd in {'FILL'} Goto 0x0728
0x00ef (0x08cf): (0x18) If player cmd in {'EMPTY'} Goto 0x075b
0x00f1 (0x08d1): (0x19) If player cmd in {'POUR'} Goto 0x07c7
0x00f3 (0x08d3): (0x1a) If player cmd in {'FIGHT', 'ATTACK', 'KILL', 'HIT'} Goto 0x07e8
0x00f5 (0x08d5): (0x1b) If player cmd in {'READ'} Goto 0x086b
0x00f7 (0x08d7): (0x1c) If player cmd in {'OIL'} Goto 0x07a9
0x00f9 (0x08d9): (0x1d) If player cmd in {'WATER'} Goto 0x0776
0x00fb (0x08db): (0x1e) If player cmd in {'SCORE'} Goto 0x087d
0x00fd (0x08dd): (0x1f) If player cmd in {'QUIT', 'STOP'} Goto 0x092e
0x00ff (0x08df): (0x20) If player cmd in {'PLUGH'} Goto 0x0947
0x0101 (0x08e1): (0x21) If player cmd in {'XYZZY'} Goto 0x0966
0x0103 (0x08e3): (0x22) If player cmd in {'PLOVER'} Goto 0x097f
0x0105 (0x08e5): (0x23) If player cmd in {'GRATE'} Goto 0x01bd
0x0107 (0x08e7): (0x24) If player cmd in {'KEYS', 'BUNCH'} Goto 0x01bd
0x0109 (0x08e9): (0x25) If player cmd in {'LAMP', 'LANTERN'} Goto 0x01bd
0x010b (0x08eb): (0x26) If player cmd in {'SANDWICHES', 'FOOD'} Goto 0x01bd
0x010d (0x08ed): (0x27) If player cmd in {'BOTTLE'} Goto 0x01bd
0x010f (0x08ef): (0x28) If player cmd in {'CAGE'} Goto 0x01bd
0x0111 (0x08f1): (0x29) If player cmd in {'ROD'} Goto 0x01bd
0x0113 (0x08f3): (0x2a) If player cmd in {'BIRD'} Goto 0x01bd
0x0115 (0x08f5): (0x2b) If player cmd in {'GOLD', 'NUGGET'} Goto 0x0e25
0x0117 (0x08f7): (0x2c) If player cmd in {'BARS', 'SILVER'} Goto 0x01bd
0x0119 (0x08f9): (0x2d) If player cmd in {'JEWELRY'} Goto 0x01bd
0x011b (0x08fb): (0x2e) If player cmd in {'DIAMONDS'} Goto 0x01bd
0x011d (0x08fd): (0x2f) If player cmd in {'BEAR'} Goto 0x01bd
0x011f (0x08ff): (0x30) If player cmd in {'PLATINUM', 'PYRAMID'} Goto 0x01bd
0x0121 (0x0901): (0x31) If player cmd in {'EMERALD'} Goto 0x01bd
0x0123 (0x0903): (0x32) If player cmd in {'EGGS'} Goto 0x01bd
0x0125 (0x0905): (0x33) If player cmd in {'PILLOW', 'CUSHION'} Goto 0x01bd
0x0127 (0x0907): (0x34) If player cmd in {'VASE'} Goto 0x01bd
0x0129 (0x0909): (0x35) If player cmd in {'TRIDENT', 'FORK'} Goto 0x01bd
0x012b (0x090b): (0x36) If player cmd in {'PEARL'} Goto 0x01bd
0x012d (0x090d): (0x37) If player cmd in {'GAZETTE', 'MAGAZINE', 'SPELUNKERS'} Goto 0x01bd
0x012f (0x090f): (0x38) If player cmd in {'COINS', 'MONEY'} Goto 0x01bd
0x0131 (0x0911): (0x39) If player cmd in {'CHAIN'} Goto 0x01bd
0x0133 (0x0913): (0x3a) If player cmd in {'RUG', 'CARPET'} Goto 0x01bd
0x0135 (0x0915): (0x3b) If player cmd in {'CHEST', 'TREASURE'} Goto 0x01bd
0x0137 (0x0917): (0x3c) If player cmd in {'SPICES'} Goto 0x01bd
0x0139 (0x0919): (0x3d) If player cmd in {'AXE', 'HATCHET'} Goto 0x01bd
0x013b (0x091b): (0x3e) If player cmd in {'DYNAMITE'} Goto 0x01bd
0x013d (0x091d): (0x3f) If player cmd in {'JADE', 'PENTACLE'} Goto 0x01bd
0x013f (0x091f): (0x40) If player cmd in {'ELIXIR'} Goto 0x01bd
0x0141 (0x0921): (0x41) If player cmd in {'ORB'} Goto 0x01bd
0x0143 (0x0923): (0x42) If player cmd in {'SCEPTRE'} Goto 0x01bd
0x0145 (0x0925): (0x43) If player cmd in {'CROWN'} Goto 0x01bd
0x0147 (0x0927): (0x44) If player cmd in {'BREAK', 'SMASH'} Goto 0x0b80
0x0149 (0x0929): (0x45) If player cmd in {'DWARVES', 'DWARF'} Goto 0x01bd
0x014b (0x092b): (0x46) If player cmd in {'PLANT', 'BEANSTALK'} Goto 0x01bd
0x014d (0x092d): (0x47) If player cmd in {'CATALOGUE', 'INVENTORY'} Goto 0x048f
0x014f (0x092f): (0x48) If player cmd in {'DRAGON'} Goto 0x01bd
0x0151 (0x0931): (0x49) If player cmd in {'SNAKE'} Goto 0x01bd
0x0153 (0x0933): (0x4a) If player cmd in {'EAT'} Goto 0x0b8d
0x0155 (0x0935): (0x4b) If player cmd in {'OK', 'PLEASE', 'YEAH', 'YES'} Goto 0x01bd
0x0157 (0x0937): (0x4c) If player cmd in {'NON', 'NEIN', 'NIET'} Goto 0x01bd
0x0159 (0x0939): (0x4d) If player cmd in {'GIVE'} Goto 0x0bf0
0x015b (0x093b): (0x4e) If player cmd in {'DESCRIBE', 'LOOK'} Goto 0x03ed
0x015d (0x093d): (0x4f) If player cmd in {'FEE'} Goto 0x0bc7
0x015f (0x093f): (0x50) If player cmd in {'FIE'} Goto 0x0bc7
0x0161 (0x0941): (0x51) If player cmd in {'FOE'} Goto 0x0bc7
0x0163 (0x0943): (0x52) If player cmd in {'FOO'} Goto 0x0bc7
0x0165 (0x0945): (0x53) If player cmd in {'RUB'} Goto 0x0c5c
0x0167 (0x0947): (0x54) If player cmd in {'DETONATE', 'BLAST'} Goto 0x0c6c
0x0169 (0x0949): (0x55) If player cmd in {'CLAM', 'OYSTER'} Goto 0x01bd
0x016b (0x094b): (0x56) If player cmd in {'MIRROR'} Goto 0x01bd
0x016d (0x094d): (0x57) If player cmd in {'FEED'} Goto 0x0abb
0x016f (0x094f): (0x58) If player cmd in {'WAVE', 'SHAKE'} Goto 0x0b18
0x0171 (0x0951): (0x59) If player cmd in {'SHAZAM', 'SESAME', 'HOCUS'} Goto 0x0b78
0x0173 (0x0953): (0x5a) If player cmd in {'DRINK'} Goto 0x0ba1
0x0175 (0x0955): (0x5b) If player cmd in {'DOOR'} Goto 0x01b5
0x0177 (0x0957): (0x5c) If player cmd in {'SAVE'} Goto 0x0ead
0x0179 (0x0959): (0x5d) If player cmd in {'RESTORE'} Goto 0x0eb5
0x017b (0x095b): (0x5e) If player cmd in {'SAY'} Goto 0x0e31

**************************************************************************

/ If the player has started the FEE, FIE, FOE, FOO sequence then
/ check if the next word is correct
0x017d (0x095d): (0x01) Gosub 0x0cbb

/ Branch if the player's location is before "...the east end of the Hall of Mists" (0x32)
/ (no dwarves before then)
0x0180 (0x0960): (0x1a) If var[0x0d] < (constant) 0x32 then Goto 0x004c

/ Branch if there are NO dwarves here 
0x0185 (0x0965): (0x10) If var[0x11] == var[0x06] then Goto 0x004c

/ At least one dwarf here

/ Get a random number
0x018a (0x096a): (0x06) Function - Random - Set var[0x04]=<random number>

/ Branch if the random number is great than 80 (0x50)
0x018d (0x096d): (0x1b) If var[0x04] > (constant) 0x50 then Goto 0x004c

/ A knife is thrown roughly 1/3 of the time (assuming the random number generator
/ has a uniform distribution

/ Print message  "\nA sharp little knife is thrown at you\n "
0x0192 (0x0972): (0x05) Print message (constant) 0x5e

/ Check to see if the knife hits the player by generating a random
/ number (0-255) and comparing it against one of the following (if the random
/ number is bigger then the knife misses):

/ 1. If one dwarf, and if a player has been resurrected    - use 0x14 (20)
/ 2. If many dwarves, and if a player has been resurrected - use 0x28 (40)
/ 3. If one dwarf, and player has NOT been resurrected     - use 0x32 (50)
/ 4. If many dwarves, and player has NOT been resurrected  - use 0x64 (100)

/ Set the comparison number of 0x14 to begin with
0x0194 (0x0974): (0x08) Set var[0x04] = (constant) 0x14

/ Branch if the player has been resurrected (this variable is 
/ set to 0x00 when the player is resurrected).  Allows a lower chance
/ of the player being killed as the comparison number here is just 0x14
/ var[0x06] is the constant 0x00
0x0197 (0x0977): (0x10) If var[0x0a] == var[0x06] then Goto 0x019e

/ Player hasn't been resurrected, so set the comparison number to 0x32
/ to increase the likelihood of the knife hitting the player
0x019b (0x097b): (0x08) Set var[0x04] = (constant) 0x32

/ Branch if there is only one dwarf here (lower chance of its knife hitting you)
/ var[0x01] is the constant 0x01
0x019e (0x097e): (0x10) If var[0x11] == var[0x01] then Goto 0x01a5

/ There is more than one dwarf here

/ Double the value of the comparison number (increase the chances of the knife hitting you)
0x01a2 (0x0982): (0x0a) Set var[0x04] += var[0x04]

/ Get another random number
0x01a5 (0x0985): (0x06) Function - Random - Set var[0x05]=<random number>

/ If the new random number in var[0x05] is bigger than the comparison number
/ then the knife misses 
0x01a8 (0x0988): (0x13) If var[0x05] > var[0x04] then Goto 0x01b0

/ Print message  "It gets you! "
0x01ac (0x098c): (0x05) Print message (constant) 0x5f

/ Kill the player and see if they want to be resurrected
0x01ae (0x098e): (0x00) Goto 0x01cd

/ Print message  "It misses! "
0x01b0 (0x0990): (0x05) Print message (constant) 0x60


0x01b2 (0x0992): (0x00) Goto 0x004c

**************************************************************************
* Message: I don't understand
**************************************************************************

/ Print message  "I don't understand\n "
0x01b5 (0x0995): (0x05) Print message (constant) 0x05

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x01b7 (0x0997): (0x00) Goto 0x017d

**************************************************************************
* Message: Please be more specic 
**************************************************************************

/ Print message  "Please be more specific "
0x01b9 (0x0999): (0x05) Print message (constant) 0x06

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x01bb (0x099b): (0x00) Goto 0x017d

**************************************************************************
* Message: Eh?
**************************************************************************

/ Print message  "Eh? "
0x01bd (0x099d): (0x05) Print message (constant) 0x07

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x01bf (0x099f): (0x00) Goto 0x017d

**************************************************************************
* Message: You can't see it
**************************************************************************

/ Print message  "You can't see it "
0x01c1 (0x09a1): (0x05) Print message (constant) 0x08

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x01c3 (0x09a3): (0x00) Goto 0x017d

**************************************************************************
* Message: You don't have it
**************************************************************************

/ Print message  "You don't have it "
0x01c5 (0x09a5): (0x05) Print message (constant) 0x09

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x01c7 (0x09a7): (0x00) Goto 0x017d

**************************************************************************
* Message: Are you mad? You should only attack enemies 
**************************************************************************

/ Print message  "Are you mad? You should only attack enemies "
0x01c9 (0x09a9): (0x05) Print message (constant) 0x4d

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x01cb (0x09ab): (0x00) Goto 0x017d

**************************************************************************

/ Cache the player's current location 
0x01cd (0x09ad): (0x09) Set var[0x17] = var[0x0d]

/ Set their current location to " You are in Heaven, sitting on a cloud and strumming a harp. 
/ It's not quite what you expected: rather boring in fact" (0x13)
0x01d0 (0x09b0): (0x08) Set var[0x0d] = (constant) 0x13

/ Branch if the end game has started (player has picked up the glistening pearl)
/ they will be killed with no chance of resurrection
0x01d3 (0x09b3): (0x13) If var[0x1a] > var[0x06] then Goto 0x0213

/ Increment the number of times the player has been killed
0x01d7 (0x09b7): (0x0a) Set var[0x1b] += var[0x01]

/ Set the temporary variable to the message id for the first player died message (0x34)
0x01da (0x09ba): (0x08) Set var[0x04] = (constant) 0x34

/ Add the number of times the player has died to the base message id (will always be one or greater
/ as (0x01d7) increments the number of times the player has died before reaching here)
0x01dd (0x09bd): (0x0a) Set var[0x04] += var[0x1b]

/ Print one of three messages depending on how many times the player has died
/ 0x35 - You seem to have got yourself killed
/ 0x36 - Clumsy oaf! You are making quite a habit of this aren't you. Please try to be more careful in future!
/ 0x37 - Good grief, you've done it again! You are supposed to at least try to stay alive you know!
0x01e0 (0x09c0): (0x04) Print message var[0x04]

/ Print message  "\nI'm not very good at this ... but do you want me to try and resurrect you?\n "
0x01e2 (0x09c2): (0x05) Print message (constant) 0x298

/ Get the player's response to the question
0x01e5 (0x09c5): (0x07) Input - results in word1 var[0x13], word2 var[0x14], word3 var[0x15], count var[0x16]

/ Parse the response and put the outcome into var[0x1c]
0x01ea (0x09ca): (0x01) Gosub 0x0c41

/ Branch if the reponse was not understood (0x02)
/ var[0x02] is the constant 0x02
0x01ed (0x09cd): (0x10) If var[0x1c] == var[0x02] then Goto 0x01e2

/ Branch if the reponse was no (0x00)
/ var[0x06] is the constant 0x00
0x01f1 (0x09d1): (0x10) If var[0x1c] == var[0x06] then Goto 0x0213

/ Branch if the player has died less than 3 times 
0x01f5 (0x09d5): (0x1a) If var[0x1b] < (constant) 0x03 then Goto 0x01fe

/ Third death for the player

/ Print message  "Curses, the green smoke is used up! "
0x01f9 (0x09d9): (0x05) Print message (constant) 0x29a

/ Print the score and ask the player if they want another name
0x01fc (0x09dc): (0x00) Goto 0x0213

**************************************************************************

/ Player can be resurrected - they have only be resurrected a maximum of 2 
/ times

/ Print message  "There is a puff of choking green smoke. It gradually clears and...\n "
0x01fe (0x09de): (0x05) Print message (constant) 0x299

/ Set the location to move the non-treasure items to the target location that the 
/ player is moving too. var[0x17] is the location the treasure items will be moved to here.
/ var[0x03] is the constant 0xff
0x0201 (0x09e1): (0x09) Set var[0x18] = var[0x17]

/ Count the treasure, non-treasure and total number of items in the player's inventory
/ and move the items to the locations specified above
0x0204 (0x09e4): (0x01) Gosub 0x09b3

/ Set the current location of the lamp to the starting location " beside 
/ a small brick building" (0x02)
/ var[0x01] is the constant 0x01
0x0207 (0x09e7): (0x83) Set list#3[0x02] = var[0x01]

/ Set the flag that indicates the player has been resurrected (0x00)
/ var[0x06] is the constant 0x00
0x020a (0x09ea): (0x09) Set var[0x0a] = var[0x06]

/ Set the player's current location to the "in a small building with a well..." (0x0e)
0x020d (0x09ed): (0x08) Set var[0x0d] = (constant) 0x0e

/ Perform location checks
0x0210 (0x09f0): (0x00) Goto 0x0049

**************************************************************************

/ Player cannot be resurrected, print the score and ask if they want another game

/ Print message  "\nYou scored "
0x0213 (0x09f3): (0x05) Print message (constant) 0x52

/ Calculate the player's score in var[0x1c] and accomplishment message in var[0x1d]
0x0215 (0x09f5): (0x01) Gosub 0x0888

/ Print the score
0x0218 (0x09f8): (0x03) Print Number var[0x1c]

/ Print message  "out of 1100\n "
0x021a (0x09fa): (0x05) Print message (constant) 0x51

/ Print the accomplishment message e.g. "A puny effort!"
0x021c (0x09fc): (0x04) Print message var[0x1d]

/ Set their current location to " You are in Heaven, sitting on a cloud and strumming a harp. 
/ It's not quite what you expected: rather boring in fact" (0x13)
0x021e (0x09fe): (0x08) Set var[0x0d] = (constant) 0x13

/ Print message  "\nWould you like another game?\n "
0x0221 (0x0a01): (0x05) Print message (constant) 0x29e

/ Get the player's response to the question
0x0224 (0x0a04): (0x07) Input - results in word1 var[0x13], word2 var[0x14], word3 var[0x15], count var[0x16]

/ Parse the response and put the outcome into var[0x1c]
0x0229 (0x0a09): (0x01) Gosub 0x0c41

/ Branch if the reponse was not understood (0x02)
/ var[0x02] is the constant 0x02
0x022c (0x0a0c): (0x10) If var[0x1c] == var[0x02] then Goto 0x0224

/ Branch if the reponse was yes (0x01)
0x0230 (0x0a10): (0x10) If var[0x1c] == var[0x01] then Goto 0x0000

/ Response was no (0x00) so quit the game
0x0235 (0x0a15): (0x06) Function - Quit (0x01)

**************************************************************************
* Command: north/northeast/neast/east/south/seast/southeast/swest/
*          west/nwest/northwest/upwards/above/down/inside/into/enter/
*          exit/leave/outside/leap/jump/climb
**************************************************************************

/ Check to see if the player can move in the required direction from this location
0x0237 (0x0a17): (0x0f) Exits - check location var[0x0d] can move var[0x13] - exit flags returned in var[0x04] and target location (or 0x00) in var[0x17]

/ REMINDER
/ var[0x04] contains the exit flags for the direction that player is trying to move
/ var[0x17] contains the target location that it would take it to if the a-code allows it

/ Branch if the player's current location is "...at Witt's End..." (0x4d)
0x023c (0x0a1c): (0x18) If var[0x0d] == (constant) 0x4d then Goto 0x03b9

/ Branch if the player is after the "...maze of twisty little passages, all different"
/ e.g. "on a steep hillside rising up through the wood" (0xa6) or later
0x0241 (0x0a21): (0x1b) If var[0x0d] > (constant) 0xa5 then Goto 0x025f

/ Branch if the player is before the "...maze of twisty little passages, all different"
/ where the vending machine with the batteries  is located
0x0245 (0x0a25): (0x1a) If var[0x0d] < (constant) 0x91 then Goto 0x025f

/ In location 0x91 to 0xa5 one of the "maze of twisty little passages, all different"

/ Branch if the target location is NOT 0x00 - here most of the
/ "maze of twisty little passages, all different" locations have a 0x00 target location
/ and no workable exits defined.  This is because the next location is calculated based
/ on the location id + direction dictionary id.
/
/ Only locations 0x92, 0x96, 0x97, 0x98 have predefined directions that take the player
/ out of the maze - all others have a null direction and target location of 0x00. Even in 
/ those locations, going a different direction will set var[0x17] to 0x00 and trigger this 
/ code to calculate the new location
/
/ Player enters in location 0x92 - quickest way to the vending machine from the first location (0x92)
/ is "cross" then "southeast".  Then "north" and "up" to leave the maze.
/
/ From To  Dir   Inverse Door Hide MsgId
/ ---- --- ----  ------- ---- ---- -----
/ 091  000   -   No      No   No   0f5
/ 092  03e Up    No      No   No   0f6
/ 093  000   -   No      No   No   0f7
/ 094  000   -   No      No   No   0f8
/ 095  000   -   No      No   No   0f9
/ 096  03e Down  No      No   No   0fa
/ 097  03e West  No      No   No   0fb
/ 098  03e East  No      No   No   0fc
/ 099  000   -   No      No   No   0fd
/ 09a  000   -   No      No   No   0fe
/ 09b  000   -   No      No   No   0ff
/ 09c  000   -   No      No   No   100
/ 09d  000   -   No      No   No   101
/ 09e  000   -   No      No   No   102
/ 09f  000   -   No      No   No   103
/ 0a0  000   -   No      No   No   104
/ 0a1  000   -   No      No   No   105
/ 0a2  000   -   No      No   No   106
/ 0a3  000   -   No      No   No   107
/ 0a4  000   -   No      No   No   108
/ 0a5  000   -   No      No   No   109

/ var[0x06] is the constant 0x00
0x0249 (0x0a29): (0x11) If var[0x17] != var[0x06] then Goto 0x025f

/ Target location is 0x00 so calculate which location in the maze 
/ the player will appear in

/ Wow... nasty haha... In the "maze of twisty little passages, all different", 
/ the a-code takes the location id, adds the direction's dictionary id  to it.  
/ If this is greater than the last location with a "maze of twisty 
/ little passages, all different" then subracted 0x15 (21) to loop back over the same list.  

/ Get the player's current location in the maze
0x024d (0x0a2d): (0x09) Set var[0x17] = var[0x0d]

/ Add the direction dictionary id to it (North is  0x01... Cross is 0x0f)
0x0250 (0x0a30): (0x0a) Set var[0x17] += var[0x13]

/ Make the move if the location id is still in the maze
0x0253 (0x0a33): (0x1a) If var[0x17] < (constant) 0xa6 then Goto 0x025f

/ Set the temporary variable to 0x15 (21) - there are 21 locations in the
/ "maze... all different"
0x0257 (0x0a37): (0x08) Set var[0x04] = (constant) 0x15

/ Subtract 0x15 (21) from the location id to loop back around 
0x025a (0x0a3a): (0x0b) Set var[0x17] -= var[0x04]

/ Make the move 
0x025d (0x0a3d): (0x00) Goto 0x0253

**************************************************************************

/ Check rules for blocking player movement across the fissure and 
/ also from the spiral staircase to the dungeon walkway. For some locations
/ the target location will be 0x00 in the table unless certain conditions are met
/ at which point the a-code will add a real target location
0x025f (0x0a3f): (0x01) Gosub 0x0df3

/ Branch if the target location is 0x00 and print that the player
/ cannot move in that direction
0x0262 (0x0a42): (0x10) If var[0x17] == var[0x06] then Goto 0x027a

/ Branch if there is NOT a door between the two locations - indicated by
/ Bit 1 being set in the exit flags
0x0266 (0x0a46): (0x12) If var[0x04] < var[0x02] then Goto 0x027f

/ If the player's current location is after "a large room knee-deep in dust"
/ (0x6e) then see if the player falls to the rocks
0x026a (0x0a4a): (0x1b) If var[0x0d] > (constant) 0x6e then Goto 0x027f

/ Get the status of the "door" at the player's current location
0x026e (0x0a4e): (0xa1) Set var[0x05] = list#1[var[0x0d]] (list address 0x07e0)

/ Branch if the door is "open" (0x01)
0x0271 (0x0a51): (0x10) If var[0x05] == var[0x01] then Goto 0x027f

/ Door is closed

/ Check to see if the player is moving through the grate, moving across the 
/ rickety bridge, moving past the snake or climbing up the beanstalk
/ All of these actions are disallowed at this point because the "door" is
/ closed 
0x0275 (0x0a55): (0x01) Gosub 0x02a7

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0277 (0x0a57): (0x00) Goto 0x017d

/ Print message  "You can't move in that direction "
0x027a (0x0a5a): (0x05) Print message (constant) 0x04

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x027c (0x0a5c): (0x00) Goto 0x017d

**************************************************************************

/ The following locations and directions make the player fall to rocks below:
/ "South" from "You are at the top of a dried-up waterfall..." (0x06)
/ "Cross" from "You are at the top of a dried-up waterfall..." (0x06)
/ "Cross" from "You are at a cliff edge." (0x10)
/ "Cross" from "You are at the edge of a volcano with a fantastic view over the crater" (0x25)
/ "Cross" from "You are at a window overlooking a huge canyon." (0x38)

/ Branch if the target location is NOT 0xff
/ var[0x03] is the constant 0xff
0x027f (0x0a5f): (0x11) If var[0x17] != var[0x03] then Goto 0x0288

/ Target destination WAS set to 0xff

/ Print message  "You fall to the rocks below "
0x0283 (0x0a63): (0x05) Print message (constant) 0x1c

/ Kill the player and see if they want to be resurrected
0x0285 (0x0a65): (0x00) Goto 0x01cd

**************************************************************************
* Check the light/dark status of the current and target location
* If neither is light, get a random number and see if they are killed
**************************************************************************

/ Check to see if the current and target location where the player wishes
/ to move are in the light or dark
0x0288 (0x0a68): (0x01) Gosub 0x09ea

/ Branch if the current location is light (0x01)
/ var[0x01] is the constant 0x01
0x028b (0x0a6b): (0x10) If var[0x1e] == var[0x01] then Goto 0x029f

/ Branch if the target location is light (0x01)
/ var[0x01] is the constant 0x01
0x028f (0x0a6f): (0x10) If var[0x1f] == var[0x01] then Goto 0x029f

/ One of the locations is dark... 

/ Get a random number
0x0293 (0x0a73): (0x06) Function - Random - Set var[0x04]=<random number>

/ Branch if it's greater than 80 (0x55) so a 33% chance of being killed
0x0296 (0x0a76): (0x1b) If var[0x04] > (constant) 0x55 then Goto 0x029f

/ Number was less than or equal to  80 / 0x55

/ Print message  "You fell into a pit in the dark: dangerous places these caves "
0x029a (0x0a7a): (0x05) Print message (constant) 0x34

/ Kill the player and see if they want to be resurrected
0x029c (0x0a7c): (0x00) Goto 0x01cd

**************************************************************************

/ Perform a set of checks to see if the player can move in that direction
/ e.g. is the spider blocking, are they carrying the golden nugget and not
/ allowed to transition etc
0x029f (0x0a7f): (0x01) Gosub 0x02e9

/ Player is allowed to move (would not return here if not)

/ Player's current location is now the target location
0x02a1 (0x0a81): (0x09) Set var[0x0d] = var[0x17]

/ Check to see if it's light / dark in the new location and print a 
/ description or "it's dark"
0x02a4 (0x0a84): (0x00) Goto 0x03ed

**************************************************************************
* Subroutine entry point - called from 0x0275
**************************************************************************
* Closed/locked "door checks" when "door" known to be closed
**************************************************************************

**************************************************************************
* Check to see if the player is moving through the grate from the 20-foot 
* depression to the tiny rocky cave - at this point
* the "door" (grate) is known to be locked/closed
**************************************************************************

/ Branch if the player's current location is NOT "in a 20-foot depression 
/ in a deep, narrow valley sloping down to the south." (0x04)
0x02a7 (0x0a87): (0x19) If var[0x0d] != (constant) 0x04 then Goto 0x02b4

/ Branch if the playyer's target location is NOT "in a tiny rocky cave below 
/ a grate to the surface." (0x11)
0x02ab (0x0a8b): (0x19) If var[0x17] != (constant) 0x11 then Goto 0x02b4

/ Player is moving to "in a tiny rocky cave below a grate to the surface." (0x11)

/ Print message  "The grate is locked "
0x02af (0x0a8f): (0x05) Print message (constant) 0x10

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x02b1 (0x0a91): (0x00) Goto 0x017d

**************************************************************************
* Check to see if the player is moving through the grate from
* the tiny rocky cave to the 20-foot depression at this point
* the "door" (grate) is known to be locked/closed
**************************************************************************

/ Branch if the player's current location is NOT "in a tiny rocky cave 
/ below a grate to the surface." (0x11)
0x02b4 (0x0a94): (0x19) If var[0x0d] != (constant) 0x11 then Goto 0x02bc

/ Location is " in a tiny rocky cave below a grate to the surface." (0x11)

/ Branch if the target location IS "in a 20-foot depression in a deep, 
/ narrow valley sloping down to the south" (0x04) and state the grate is locked
0x02b8 (0x0a98): (0x18) If var[0x17] == (constant) 0x04 then Goto 0x02af

**************************************************************************
* Check to see if the player is moving from the hall of the mountain Kings
* in any valid direction, the snake is still alive so don't let them
**************************************************************************

/ Branch if the player's current location is NOT "in the Hall of 
/ the Mountain Kings" (0x34)

0x02bc (0x0a9c): (0x19) If var[0x0d] != (constant) 0x34 then Goto 0x02c2

/ Player's current location IS in the Hall of the Mountain Kings" (0x34)

/ Print message  "The snake rears up above you, blocking the way out. 
/ Venom drips from its fangs, burning smoking holes in the rocky floor "
0x02c0 (0x0aa0): (0x05) Print message (constant) 0x20

**************************************************************************
* Check to see if the player is moving across the wide fissure, crystal
* bridge is known not to be there right now
**************************************************************************

/ Branch if the player's current location is NOT "on the east bank of a 
/ wide fissure slicing completely across the Hall of Mists" (0x3a)
0x02c2 (0x0aa2): (0x19) If var[0x0d] != (constant) 0x3a then Goto 0x02cc

/ Branch if the player's target location is NOT "on the west bank of a 
/ wide fissure slicing completely across the Hall of Mists" (0x3b)
0x02c6 (0x0aa6): (0x19) If var[0x17] != (constant) 0x3b then Goto 0x02cc

/ Tell the player they can't move in that direction
0x02ca (0x0aaa): (0x00) Goto 0x027a

/ Branch if the player's current location is NOT "on the west bank of a 
/ wide fissure slicing completely across the Hall of Mists" (0x3b)
0x02cc (0x0aac): (0x19) If var[0x0d] != (constant) 0x3b then Goto 0x02d4

/ Branch if the player's current location IS "on the west bank of a 
/ wide fissure slicing completely across the Hall of Mists" (0x3a)
0x02d0 (0x0ab0): (0x18) If var[0x17] == (constant) 0x3a then Goto 0x02ca

**************************************************************************
* Check to see if the player is trying to climb up from the bottom of the 
* west pit - the beanstalk is known not to be in the right state so disallow
**************************************************************************

/ Branch if the player's current location is NOT "You are at the 
/ bottom of the west pit" (0x5c)
0x02d4 (0x0ab4): (0x19) If var[0x0d] != (constant) 0x5c then Goto 0x02de

/ Branch if the player's current location is NOT  in a long narrow 
/ corridor, stretching out of sight to the west" (0x5e)
0x02d8 (0x0ab8): (0x19) If var[0x17] != (constant) 0x5e then Goto 0x02de

/ Print message  "There is nothing here to climb "
0x02dc (0x0abc): (0x05) Print message (constant) 0x39

**************************************************************************
* Check to see if the player is trying to go through the gate north of 
* "in a gigantic north-south passage", it's know to be blocking at this 
* point so disallow the player
**************************************************************************

/ Branch if the player's current location is NOT "in a gigantic 
/ north-south passage" (0x6b)
0x02de (0x0abe): (0x19) If var[0x0d] != (constant) 0x6b then Goto 0x02e8

/ Branch if the player's current location is NOT "in a magnificent cavern" (0x47)
0x02e2 (0x0ac2): (0x19) If var[0x17] != (constant) 0x47 then Goto 0x02e8

/ Print message  "The gate squeaks but does not budge. It seems to be rusted solid "
0x02e6 (0x0ac6): (0x05) Print message (constant) 0x3a

/ Movement checks complete
0x02e8 (0x0ac8): (0x02) Return

**************************************************************************
* Subroutine entry point - called from 0x029f
**************************************************************************
* Perform a set of movement checks
**************************************************************************

/ Check the spider's actions, if any
0x02e9 (0x0ac9): (0x01) Gosub 0x0e48

**************************************************************************
* Process if the player is moving from the east end of the hall of mists
* and moving to the passage from the east - stop the player if they have
* the golden nugget
**************************************************************************

/ Get the location of the gold nugget
0x02ec (0x0acc): (0xc3) Set var[0x04] = list#3[0x08]

/ Branch if the gold nugget is NOT in the player's inventory (0xff)
0x02ef (0x0acf): (0x11) If var[0x04] != var[0x03] then Goto 0x030d

/ Branch if the player's current location is NOT "at the east end of the Hall of Mists" (0x32)
0x02f3 (0x0ad3): (0x19) If var[0x0d] != (constant) 0x32 then Goto 0x0300

/ Branch if the player's target location is NOT "The passage from the east ends here.
/ At your feet is a pit from which mist coils upwards"
0x02f7 (0x0ad7): (0x19) If var[0x17] != (constant) 0x1f then Goto 0x0300

/ Print message  "You can't climb back up to the pit from the Hall of Mists "
0x02fb (0x0adb): (0x05) Print message (constant) 0x38

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x02fd (0x0add): (0x00) Goto 0x017d

**************************************************************************
* Process if the player is moving from the passage from the east moving to
* the east end of the hall of mists - kill the player if they have
* the golden nugget (check happened above for this object)
**************************************************************************

/ Branch if the player's current location is NOT "The passage from the east ends here.
/ At your feet is a pit from which mist coils upwards" (0x1f)
0x0300 (0x0ae0): (0x19) If var[0x0d] != (constant) 0x1f then Goto 0x030d

/ Branch if the player's target location is NOT "at the east end of the Hall of Mists" (0x32)
0x0304 (0x0ae4): (0x19) If var[0x17] != (constant) 0x32 then Goto 0x030d

/ Print message  "You fall to the rocks below "
0x0308 (0x0ae8): (0x05) Print message (constant) 0x1c

/ Kill the player with  chance of resurrection
0x030a (0x0aea): (0x00) Goto 0x01cd

**************************************************************************

/ Branch if the target location is 0xf4 - this location does NOT exist
/ and var[x017] is never set to this by any other means. 
/ So ALWAYS branch
0x030d (0x0aed): (0x19) If var[0x17] != (constant) 0xf4 then Goto 0x031f

********************************************* *****************************
* This section is never executed - teleports you randomly to 
* one of 10 locations if the target location in the exits list is 0xf4
* NONE have this
**************************************************************************

/ Generate a random number
0x0311 (0x0af1): (0x06) Function - Random - Set var[0x04]=<random number>

/ Keep generating random numbers until the number is between 0x01 to 0x09
0x0314 (0x0af4): (0x1b) If var[0x04] > (constant) 0x09 then Goto 0x0311

/ Set the target destination to "in a secret north-south canyon 
/ above a sizable passage" (0x61)
0x0318 (0x0af8): (0x08) Set var[0x17] = (constant) 0x61

/ Add the random number to the location id above 
0x031b (0x0afb): (0x0a) Set var[0x17] += var[0x04]

/ Location player will be moved to one of:

/ 0x61 - You are in a secret north-south canyon above a sizable passage
/ 0x62 - You are in a dirty broken passage. To the east is a low crawl and to the west is a large passage. There is a hole in the ceiling above
/ 0x63 - You are in a large room knee-deep in dust. There are cracks everywhere and a passage leading east. You could wriggle down a hole to a junction below
/ 0x64 - You are in a large low room with exits to north, south-east and south-west
/ 0x65 - This is the oriental room. Oriental tapestries and drawings cover the walls, and chimes make quiet music high above. Gently sloping passages lead north, west and south-east
/ 0x66 - You are at a complex junction. A low hands and knees passage from the north joins a higher crawl from the east to make a 5 foot passage going west. You could also climb up through a hole in the ceiling. A salty smell blows from the north and you can hear a quiet murmuring
/ 0x67 - You are in a room decorated with millions of shells embedded in the walls. A shallow passage leads down and a steeper one leads up. A low passage leaves to the south. You can hear the sound of the sea far away and seem to feel salt spray on your face
/ 0x68 - You are in a room whose walls resemble swiss cheese. It smells a bit cheesy too. Obvious passages lead west, east and north-east, but there could well be others
/ 0x69 - You are at the eastern end of a long room with two pits in the floor. You are near the east pit, and the many thin stone slabs littering the room would make descending it simple. A path bypasses the pits to connect passages from east and west. There are holes all around, but the only large one is high above the west pit, out of easy reach
/ 0x6a - You are in a large, low, circular room almost filled by a huge slab of rock fallen from the ceiling. To east and west are large passages, completely filled by boulders. Low, small passages lead north and south: the south one bends east round some boulders

0x031e (0x0afe): (0x02) Return

**************************************************************************
* Check if the player can move from the swiss cheese room to the oriental room
**************************************************************************

/ Branch if the player's current location is NOT "in a room whose 
/ walls resemble swiss cheese." (0x68)
0x031f (0x0aff): (0x19) If var[0x0d] != (constant) 0x68 then Goto 0x0334

/ Branch if the player's target (moving to) location is NOT in "the 
/ oriental room" (0x65)
0x0323 (0x0b03): (0x19) If var[0x17] != (constant) 0x65 then Goto 0x0330

/ Player is "in a room whose walls resemble swiss cheese." (0x68) and
/ trying to move to the "the oriental room" (0x65)

/ Get a random number
0x0327 (0x0b07): (0x06) Function - Random - Set var[0x05]=<random number>

/ If the random number is less than 0x78 (120), do NOT allow the move
0x032a (0x0b0a): (0x1a) If var[0x05] < (constant) 0x78 then Goto 0x027a

/ Move allowed (52% of the time)
0x032f (0x0b0f): (0x02) Return

**************************************************************************
* Check if the player is moving between the Plover room (0x12) and 
* the "alcove at the end of a winding path" (0x48) or vice versa. If so,
* perform an inventory check because of the "extremely narrow crack"
* 1. Player is allowed to move if their inventory count is zero
* 2. Player is allowed to move if their inventory count is one and 
*    they are carrying the emerald
* 3. Player is NOT allowed to move in all other cases
**************************************************************************

/ Branch if the player IS moving to "a tall east-west canyon with a narrow 
/ chink to the north" (0x55) - only allow the move randomly
0x0330 (0x0b10): (0x18) If var[0x17] == (constant) 0x55 then Goto 0x0327

/ Branch over the next check if the player's current location IS "in an 
/ alcove at the end of a winding path from the north-west" (0x4e)
0x0334 (0x0b14): (0x18) If var[0x0d] == (constant) 0x4e then Goto 0x033c

/ Player is NOT "in an alcove at the end of a winding path from 
/ the north-west" (0x4e)

/ Branch if the player's current location is NOT "in the Plover room" (0x12)
0x0338 (0x0b18): (0x19) If var[0x0d] != (constant) 0x12 then Goto 0x036a

/ Player IS "in the Plover room"(0x12)" OR  "in an 
/ alcove at the end of a winding path from the north-west" (0x4e)
/
/ Branch if the player's target location IS "in the Plover room" (0x12)
0x033c (0x0b1c): (0x18) If var[0x17] == (constant) 0x12 then Goto 0x0344

/ Branch if the player's target location is NOT "in an alcove at the end 
/ of a winding path from the north-west." (0x4e)
0x0340 (0x0b20): (0x19) If var[0x17] != (constant) 0x4e then Goto 0x036a

/ Cache the target location
0x0344 (0x0b24): (0x09) Set var[0x20] = var[0x17]

/ Set the location of where the non-treasure objects will be moved to
/ the inventory (0xff) - so they don't move from the inventory when counted
/ var[0x03] is the constant 0xff
0x0347 (0x0b27): (0x09) Set var[0x17] = var[0x03]

/ Set the location of where the treasure objects will be moved to
/ the inventory (0xff) - so they don't move from the inventory when counted
/ var[0x03] is the constant 0xff
0x034a (0x0b2a): (0x09) Set var[0x18] = var[0x03]

/ Count the treasures, non-treasures and total objects in the inventory
/ (and move both to the inventory so no change...)
0x034d (0x0b2d): (0x01) Gosub 0x09b3

/ Branch if the player is carrying zero objects (treasures and non-treasures)
/ var[0x06] is the constant 0xff
0x0350 (0x0b30): (0x10) If var[0x21] == var[0x06] then Goto 0x035f

/ Branch if the count of objects in the inventory is greater than one
/ as more than one item is NOT allowed through the crack
/ var[0x01] is the constant 0x01
0x0354 (0x0b34): (0x13) If var[0x21] > var[0x01] then Goto 0x0363

/ Get the location of the emerald (0x0e)
0x0358 (0x0b38): (0xc3) Set var[0x04] = list#3[0x0e]

/ Branch if the emerald is NOT in the player's inventory (0xff)
/ var[0x03] is the constant 0xff
0x035b (0x0b3b): (0x11) If var[0x04] != var[0x03] then Goto 0x0363

/ Reset the target location from the cached value earlier
0x035f (0x0b3f): (0x09) Set var[0x17] = var[0x20]

/ Return and move the player to the target location
0x0362 (0x0b42): (0x02) Return

**************************************************************************

/ Print message  "Something that you're carrying is too big to fit through the gap\n "
0x0363 (0x0b43): (0x05) Print message (constant) 0x289

/ Set the target location to the player's current location so they will 
/ remain in the same location
0x0366 (0x0b46): (0x09) Set var[0x17] = var[0x0d]

/ Return and keep the player in the same location
0x0369 (0x0b49): (0x02) Return

**************************************************************************
* Process the player trying to move West from "at the south-west end of 
* a vast hall filled with a loud snoring emerging from a 
* large heap at the other side." (0xaa). In the exits table, moving 
* West defaults to location 0xfc which doesn't exist. And this code
* handles that by checking to see if the dynamite has exploded, killed the 
* dwarves and opened the huge hole west. 
**************************************************************************

/ Branch to the next movement check if the target location is not 0xfc 
0x036a (0x0b4a): (0x19) If var[0x17] != (constant) 0xfc then Goto 0x0377

/ Branch if the dynamite has not exploded (0x01) and opened the huge hole west
/ and print "you can't move in that direction"
0x036e (0x0b4e): (0x11) If var[0x22] != var[0x01] then Goto 0x027a

/ Dynamite has exploded

/ Set the target location to "in a narrow east-west corridor, 
/ carved crudely out of the rock." (0xab)
0x0373 (0x0b53): (0x08) Set var[0x17] = (constant) 0xab

/ Return and move the player to the target location
0x0376 (0x0b56): (0x02) Return

**************************************************************************
* Process the player trying to cross the rickety bridge
* 1. Allow it if the bear has chased off the troll
* 2. Allow it if the troll has been given treasure and the player hasn't 
*    crossed since doing so
* 3. Collapse the bridge if the player is carrying the bear
**************************************************************************

/ Branch if the player's current location IS "on the south west side of a 
/ chasm crossed by a rickety bridge." (0x5d)
0x0377 (0x0b57): (0x18) If var[0x0d] == (constant) 0x5d then Goto 0x037f

/ Branch if the player's current location is NOT "on the north-east side
/ of a deep chasm crossed by a rickety bridge." (0x20)
0x037b (0x0b5b): (0x19) If var[0x0d] != (constant) 0x20 then Goto 0x03d8

/ Player is either south-west or north-east of the rickety bridge

/ Branch if the player's target location IS "on the north-east side
/ of a deep chasm crossed by a rickety bridge." (0x20)
0x037f (0x0b5f): (0x18) If var[0x17] == (constant) 0x20 then Goto 0x0387

/ Branch if the player's target location is NOT "on the south west side of a 
/ chasm crossed by a rickety bridge." (0x5d)
0x0383 (0x0b63): (0x19) If var[0x17] != (constant) 0x5d then Goto 0x03d8

/ Player is either south-west or north-east of the rickety bridge 
/ and moving to the opposite side

/ Branch if the status of the troll is default i.e. has not yet appeared (0x00)
/ var[0x06] is the constant 0x01
0x0387 (0x0b67): (0x10) If var[0x23] == var[0x06] then Goto 0x039e

/ Branch if the status of the troll is appeared and asking for treasure (0x01)
/ Player will be blocked by the troll
0x038b (0x0b6b): (0x10) If var[0x23] == var[0x01] then Goto 0x03ac

/ Player has given treasure to the troll but not yet crossed the bridge
/ since doing so (troll state gets reset to 0x00 when crossing the bridge)
/ OR the bear has chased off the troll and the troll state does NOT get reset

/ Get the current location of the bear
0x038f (0x0b6f): (0xc3) Set var[0x04] = list#3[0x0c]

/ Branch if the bear is in the player's inventory (0xff) - the bridge will
/ collapse under the weight
/ var[0x03] is the constant 0xff
0x0392 (0x0b72): (0x10) If var[0x04] == var[0x03] then Goto 0x03b1

/ Branch if the bear has chased off the troll - state wil be set to 0x03
/ in this circumstance there is no need to reset the troll state
/ when the player crosses the bridge
/ var[0x02] is the constant 0x02
0x0396 (0x0b76): (0x11) If var[0x23] != var[0x02] then Goto 0x039d

/ Player has paid the troll (0x02)

/ Reset the troll's state to ask for more treasure next time the player
/ crosses the bridge 
0x039a (0x0b7a): (0x09) Set var[0x23] = var[0x06]

/ Allow the player to cross the bridge if they gave treasure or the 
/ bear has chased off the troll
0x039d (0x0b7d): (0x02) Return

**************************************************************************

/ Print message  "A huge troll jumps out and blocks your way, snarling 
/ 'Gotcha! Thought you could evade paying the toll did you? 
/ Well I was much too quick for you.. you had no chance of outwitting me.. 
/ an expert bridge-keeper for a thousand years.. never missed a day..'
/ etc. etc. Eventually the troll shuts up and stands blocking the bridge, 
/ one hand outstretched for payment of a treasure "
0x039e (0x0b7e): (0x05) Print message (constant) 0x3e

/ Set the troll's state to appeared and is asking for treasure (0x01)
0x03a0 (0x0b80): (0x09) Set var[0x23] = var[0x01]

/ Note - this should be changing the status to 0x00 not 0x01 as the troll
/ has just appeared but it's never checked... inconsistent with the rest of the A-code
/ Change the door status of location "south west side of a chasm" (0x5d) to unblocked (0x01)
/ as the troll has appeared 
0x03a3 (0x0b83): (0x81) Set list#1[0x5d] = var[0x01]

/ Note - this should be changing the status to 0x00 not 0x01 as the troll
/ has just appeared but it's never checked... inconsistent with the rest of the A-code
/ Change the door status of location "north east side of a chasm" (0x20) to unblocked (0x01)
/ as the troll has appeared 
0x03a6 (0x0b86): (0x81) Set list#1[0x20] = var[0x01]

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x03a9 (0x0b89): (0x00) Goto 0x017d

**************************************************************************

/ Print message  "The troll blocks your way, holding out a fist for payment "
0x03ac (0x0b8c): (0x05) Print message (constant) 0x3f

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x03ae (0x0b8e): (0x00) Goto 0x017d

**************************************************************************

/ Print message  "When you reach the middle of the bridge it collapses 
/ under the bear's weight, throwing you into the chasm. "
0x03b1 (0x0b91): (0x05) Print message (constant) 0x5a

/ Set the location of the bear (0x0c) to out of the game (0x00)
/ var[0x06] is the constant 0x00
0x03b3 (0x0b93): (0x83) Set list#3[0x0c] = var[0x06]

/ Kill the player and ask if they want resurrection
0x03b6 (0x0b96): (0x00) Goto 0x01cd

**************************************************************************
* Process the player moving from "...Witts End..." to any location or 
* the anteroom
* 1. If the player is moving any direction than South, they end up back at 
*    "...Witt's End..."
* 2. If the player is moving South to the anteroom then they are randomly
*    allowed to move otherwise they end up back at "...Witt's End..."
**************************************************************************

/ Branch if the player's location is NOT at "...Witt's End..." (0x4d)
0x03b9 (0x0b99): (0x19) If var[0x0d] != (constant) 0x4d then Goto 0x0288

/ Branch if the target location is NOT 0xfe 
/ NOTE - this location does NOT exist for this game so it will always branch
/ i.e. no location has an exit that leads here
0x03be (0x0b9e): (0x19) If var[0x17] != (constant) 0xfe then Goto 0x03ca

/ Change the Witt's end probability (never happens)
0x03c2 (0x0ba2): (0x08) Set var[0x09] = (constant) 0xb4

/ Called from further ahead only
/ Print message  "You crawl through a network of twisty passages, get totally
/ disorientated and end up back at Witt's End. The Witt Construction company 
/ have been practicing for years with one way schemes above ground so you will not get away easily! "
0x03c5 (0x0ba5): (0x05) Print message (constant) 0x2b

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x03c7 (0x0ba7): (0x00) Goto 0x017d

**************************************************************************

/ Branch if the player's target location is NOT "an anteroom leading to a 
/ large passage to the east" (0x4c)
0x03ca (0x0baa): (0x19) If var[0x17] != (constant) 0x4c then Goto 0x03c5

/ Player is trying to reach the anteroom

/ Get a random number
0x03ce (0x0bae): (0x06) Function - Random - Set var[0x04]=<random number>

/ Branch if the random number is greater than the getting lost probability
/ and keep the player at Witt's End - player will be lost and back at Witt's End
0x03d1 (0x0bb1): (0x13) If var[0x04] > var[0x09] then Goto 0x03c5

/ Player succeeded in moving without getting lost
0x03d5 (0x0bb5): (0x00) Goto 0x02a1

**************************************************************************

/ Branch if the dynamite blast hasn't blasted (0x00)
/ var[0x06] is the constant 0x00
0x03d8 (0x0bb8): (0x10) If var[0x22] == var[0x06] then Goto 0x039d

/ Dynamite has blasted so must be in the end game

/ Branch if the player's current location is NOT "in a tiny rocky cave 
/ below a grate to the surface" (0x11)
0x03dc (0x0bbc): (0x19) If var[0x0d] != (constant) 0x11 then Goto 0x039d

/ Branch if the player's target location is NOT "in a 20-foot depression
/ in a deep, narrow valley sloping down to the south" (0x04)
0x03e0 (0x0bc0): (0x19) If var[0x17] != (constant) 0x04 then Goto 0x039d

/ Set the status of the game to completed
0x03e4 (0x0bc4): (0x09) Set var[0x24] = var[0x01]

/ Print message  "The elves are waiting for you in a golden host surrounding their king. They cheer wildly as you emerge into the sunlight.\n "
0x03e7 (0x0bc7): (0x05) Print message (constant) 0x2af

/ Print the score and ask if the player wants a new game
0x03ea (0x0bca): (0x00) Goto 0x0213

**************************************************************************

/ Check to see if it's light or dark in the current location
/ (target location is ignored here as it's set to the same as the
/ current location)
0x03ed (0x0bcd): (0x01) Gosub 0x09ea

/ Branch if there is light (0x01) in the current location
/ var[0x06] is the constant 0x00
0x03f0 (0x0bd0): (0x11) If var[0x1e] != var[0x06] then Goto 0x03f9

/ No light so say it's dark

/ Print message  "It is dark, you cannot see "
0x03f4 (0x0bd4): (0x05) Print message (constant) 0x3b

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x03f6 (0x0bd6): (0x00) Goto 0x017d

**************************************************************************

/ There is light so a location description can be printed

/ Set var[0x04] to the base location message description id (0x64)
/ All messages descriptions for locations are this id + the location id
0x03f9 (0x0bd9): (0x08) Set var[0x04] = (constant) 0x64

/ Add on the location id to the base location message description id (0x64)
0x03fc (0x0bdc): (0x0a) Set var[0x04] += var[0x0d]

/ Print the location description (0x64 + location id)
0x03ff (0x0bdf): (0x04) Print message var[0x04]

/ Print message  "\n "
0x0401 (0x0be1): (0x05) Print message (constant) 0x0c

/ Branch away if the location isn't the first "...on a spiral staircase"
/ and print the right virual door closed or open message for the location
0x0403 (0x0be3): (0x19) If var[0x0d] != (constant) 0xc7 then Goto 0x0413

/ Branch if the heavy dungeon door is locked (0x01)
/ var[0x01] is the constant 0x01
0x0407 (0x0be7): (0x10) If var[0x25] == var[0x01] then Goto 0x0410

/ Heavy dungeon door is unlocked and player is in the first "...on a spiral staircase"

/ Print message  "A heavy dungeon door opens onto the stairway "
0x040b (0x0beb): (0x05) Print message (constant) 0x2a0

/ Print the right virual door closed or open message for the location
0x040e (0x0bee): (0x00) Goto 0x0413

/ Print message  "The dungeon door is locked "
0x0410 (0x0bf0): (0x05) Print message (constant) 0x2a1

**************************************************************************
* Print the right virtual door closed or open message for the location
**************************************************************************

/ Branch if the player's current location is beyond " at the southern end 
/ of a secret north-south canyon" (0x6e)
0x0413 (0x0bf3): (0x1b) If var[0x0d] > (constant) 0x6e then Goto 0x0441

/ Get the "door" status for the player's current location
0x0417 (0x0bf7): (0xa1) Set var[0x04] = list#1[var[0x0d]] (list address 0x07e0)

/ Set the "blocked" starting message id for when the "door" is closed
/ For the first 110 (0x06e) locations, there is a message (where required)
/ defined between message ids 0x14b and 0x226
0x041a (0x0bfa): (0x08) Set var[0x05] = (constant) 0x14a

/ Branch if the "door" is closed (value is 0x00)
/ var[0x01] is the constant 0x01
0x041e (0x0bfe): (0x11) If var[0x04] != var[0x01] then Goto 0x0426

/ Set the "not blocked" starting message id for when the "door" is open
/ For the first 110 (0x06e) locations, there is a message (where required)
/ defined between message ids 0x1ba and 0x1b8
0x0422 (0x0c02): (0x08) Set var[0x05] = (constant) 0x1b8

/ Add the player's current location to the base "closed" or "open"
/ message id
0x0426 (0x0c06): (0x0a) Set var[0x05] += var[0x0d]

/ Print the location id message for "closed" or "open" e.g. 
/ "There is a large padlocked grate set into the ground"
/ or "the grate is open"
0x0429 (0x0c09): (0x04) Print message var[0x05]

**************************************************************************
* Print the plant growth message
**************************************************************************

/ Branch if the player's current location " at the bottom of the 
/ west pit" (0x5c)
0x042b (0x0c0b): (0x19) If var[0x0d] != (constant) 0x5c then Goto 0x0441

/ Set the base message id to "A tiny wilting seedling whispers 
/ 'water, water'" (0x282)
0x042f (0x0c0f): (0x08) Set var[0x27] = (constant) 0x282

/ Branch if the status of the seedling is in it's default (0x00)
/ as the message id is correct already (0x0282)
0x0433 (0x0c13): (0x10) If var[0x26] == var[0x06] then Goto 0x043f

/ Set the base message id to "A fair-sized beanstalk sways about, 
/ waving its leaves and shouting 'WATER! WATER!'" (0x283)
0x0437 (0x0c17): (0x08) Set var[0x27] = (constant) 0x283
 
/ Branch if the status of the seedling is NOT "first growth" (0x01)
/ and not "default" (0x00) as above
0x043b (0x0c1b): (0x11) If var[0x26] != var[0x01] then Goto 0x0441

/ Print the default or first growth message
0x043f (0x0c1f): (0x04) Print message var[0x27]

**************************************************************************
* Always print "a crystal bridge spans the fissure" if the player is 
* east or west of a wide fissure which cuts completely across the 
* dungeon walkway. Actually probably a bug to always print it...?
**************************************************************************

/ Branch if the player's current location IS "east bank of a wide fissure which
/ cuts completely across the dungeon walkway" 
/ (0xc3)
0x0441 (0x0c21): (0x18) If var[0x0d] == (constant) 0xc3 then Goto 0x0449

/ Branch if the player's current location is NOT "west bank of a wide fissure
/ which cuts right across the dungeon walkway" (0xc5)
0x0445 (0x0c25): (0x19) If var[0x0d] != (constant) 0xc5 then Goto 0x0450

/ Player IS on the east or west bank of a wide fissure

/ Branch if the status of the crystal bridge across the "fissure... across 
/ the dungeon walkway" is there (0x01)
/ NOTE - this is a bug. The bridge in the Hall of Mists is based on the 
/ "door" status in list#1. After waving a rod it's set to 0x01 however
/ this bridge checks the variable var[0x27] which is a multipurpose 
/ variable and will ALWAYS be set to the message id of a description 
/ so the crystal bridge will ALWAYS be here. 
0x0449 (0x0c29): (0x10) If var[0x27] == var[0x06] then Goto 0x0450

/ Note - ALWAYS EXECUTED

/ Print message  "A crystal bridge spans the fissure "
0x044d (0x0c2d): (0x05) Print message (constant) 0x1f2

/ Branch if the player's current location is NOT "at a dead end" (0xbf)
0x0450 (0x0c30): (0x19) If var[0x0d] != (constant) 0xbf then Goto 0x045b

/ Player is "at a dead end"

/ Branch if the skeletons have already regenerated (0x01)
/ var[0x01] is the constant 0x01
0x0454 (0x0c34): (0x10) If var[0x28] == var[0x01] then Goto 0x045b

/ Skeletons have NOT regenerated

/ Print message  "Lots of skeletons are chained to the walls "
0x0458 (0x0c38): (0x05) Print message (constant) 0x297

/ Check to see if the SECOND set of elves are chained to the wall 
/ Note - why now, they aren't in this location (at a dead end)??!?!
0x045b (0x0c3b): (0x01) Gosub 0x0e95

/ Print message  "\n "
0x045e (0x0c3e): (0x05) Print message (constant) 0x0c

**************************************************************************
* Mark objects as seen if in current location
**************************************************************************

/ Next part loops through all the objects to see if they are in the player's 
/ current location - if they are, they are marked as discovered/seen
/ in list#5

/ Set the temporary variable to the player's current location
0x0460 (0x0c40): (0x09) Set var[0x18] = var[0x0d]

/ Set the object id to the first object's id
0x0463 (0x0c43): (0x09) Set var[0x04] = var[0x01]

/ Check to see if the object is in the same location as the player
/ and mark it as seen (0x01) in list#5 if it is
0x0466 (0x0c46): (0x01) Gosub 0x0a30

/ Move to the next object
0x0469 (0x0c49): (0x0a) Set var[0x04] += var[0x01]

/ Loop through all the objects from 0x01 (keys) to 0x021 (crown)
0x046c (0x0c4c): (0x1a) If var[0x04] < (constant) 0x21 then Goto 0x0466

/ All objects checked

/ Check the spider's status
0x0470 (0x0c50): (0x01) Gosub 0x0e7a

/ Branch if the player hasn't reached the "east end of the Hall of Mists" (0x32) yet
/ to check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0473 (0x0c53): (0x1a) If var[0x0d] < (constant) 0x32 then Goto 0x017d

/ Branch if there are no dwarves here
/ to check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0478 (0x0c58): (0x10) If var[0x11] == var[0x06] then Goto 0x017d

/ Branch if there is more than one dwarf here
0x047d (0x0c5d): (0x13) If var[0x11] > var[0x01] then Goto 0x0486

/ Single dwarf

/ Print message  "There is one threatening little dwarf here "
0x0481 (0x0c61): (0x05) Print message (constant) 0x61

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0483 (0x0c63): (0x00) Goto 0x017d

/ Multiple dwarves

/ Print message  "There are "
0x0486 (0x0c66): (0x05) Print message (constant) 0x62

/ Print the number of dwarves
0x0488 (0x0c68): (0x03) Print Number var[0x11]

/ Print message  "threatening little dwarves here "
0x048a (0x0c6a): (0x05) Print message (constant) 0x63

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x048c (0x0c6c): (0x00) Goto 0x017d

**************************************************************************
* Command: catalogue/inventory
**************************************************************************

/ Print message  "You have: "
0x048f (0x0c6f): (0x05) Print message (constant) 0x0a

/ Print message  "\n "
0x0491 (0x0c71): (0x05) Print message (constant) 0x0c

/ Set the location to move the non-treasure items to to the inventory (0xff)
/ var[0x03] is the constant 0xff
0x0493 (0x0c73): (0x09) Set var[0x17] = var[0x03]

/ Set the location to move the treasure items to to the inventory (0xff)
/ var[0x03] is the constant 0xff
0x0496 (0x0c76): (0x09) Set var[0x18] = var[0x03]

/ Count the treasure, non-treasure and total number of items in the player's inventory
/ and move the items to the locations specified above
0x0499 (0x0c79): (0x01) Gosub 0x09b3

/ Branch if a player has more than one object in their inventory
0x049c (0x0c7c): (0x13) If var[0x21] > var[0x06] then Goto 0x0463

/ Player has no objects in their inventory

/ Print message  "Nothing "
0x04a0 (0x0c80): (0x05) Print message (constant) 0x0b

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x04a2 (0x0c82): (0x00) Goto 0x017d

**************************************************************************
* Command: carry/get/keep/take/catch
**************************************************************************

/ Branch if the player DID specify an object as the second word
/ var[0x06] is the constant 0x00
0x04a5 (0x0c85): (0x11) If var[0x14] != var[0x06] then Goto 0x04b7

/ No object specified

/ Branch if the word count is 0x02 
/ var[0x02] is the constant 0x02
0x04a9 (0x0c89): (0x10) If var[0x16] == var[0x02] then Goto 0x04b2

/ User entered less than two words that matched dictionary entries

/ Print message  "I don't understand\n "
0x04ad (0x0c8d): (0x05) Print message (constant) 0x05

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x04af (0x0c8f): (0x00) Goto 0x017d

/ Print message  "Please be more specific "
0x04b2 (0x0c92): (0x05) Print message (constant) 0x3c

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x04b4 (0x0c94): (0x00) Goto 0x017d

/ Player did specify a second word (see 0x04a5)

/ Check the second word is a valid object and calculate the real object id
/ from the object's dictionary id.  Return it in the second word var[0x14]
0x04b7 (0x0c97): (0x01) Gosub 0x050a

/ Branch if the player is NOT "...inside the bear room"
0x04ba (0x0c9a): (0x19) If var[0x0d] != (constant) 0x28 then Goto 0x04c7

/ Branch if the bear is unfed and still in chains (0x02)
/ var[0x02] is the constant 0x02
0x04be (0x0c9e): (0x11) If var[0x08] != var[0x02] then Goto 0x04c7

/ Print message  "The bear snaps dangerously, forcing you to back away to the far side of the room "
0x04c2 (0x0ca2): (0x05) Print message (constant) 0x2f

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x04c4 (0x0ca4): (0x00) Goto 0x017d

/ Get the current location of the object
0x04c7 (0x0ca7): (0xa3) Set var[0x04] = list#3[var[0x14]] (list address 0x0860)

/ Branch ahead if the object is in the player's current location
0x04ca (0x0caa): (0x10) If var[0x04] == var[0x0d] then Goto 0x04dc

/ Branch if the object's current location is NOT in the player's inventory (0xff)
/ var[0x03] is the constant 0xff
0x04ce (0x0cae): (0x11) If var[0x04] != var[0x03] then Goto 0x04d7

/ Object is in the player's inventory

/ Print message  "You are already carrying it "
0x04d2 (0x0cb2): (0x05) Print message (constant) 0x3d

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x04d4 (0x0cb4): (0x00) Goto 0x017d

/ Object is not in the current location or inventory
/ Print message  "You can't see it "
0x04d7 (0x0cb7): (0x05) Print message (constant) 0x08

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x04d9 (0x0cb9): (0x00) Goto 0x017d

/ Branch if the object is NOT the bird (0x07)
0x04dc (0x0cbc): (0x19) If var[0x14] != (constant) 0x07 then Goto 0x04e6

/ Object is the bird (and it's not in the player's inventory)

/ Branch if the bird is free (0x00) and NOT in the cage 
/ var[0x06] is the constant 0x00
0x04e0 (0x0cc0): (0x10) If var[0x29] == var[0x06] then Goto 0x04e6

/ Bird is not free, say you can't see it as it's in the cage
0x04e4 (0x0cc4): (0x00) Goto 0x04d7

**************************************************************************
* Set object to discovered/seen and check if end game should start
**************************************************************************

/ Set the object discovered status of the the object id in var[0x14] to
/ seen/discovered (0x01)
/ var[0x01] is the constant 0x01
0x04e6 (0x0cc6): (0xe5) Set list#5[var[0x14]] = var[0x01] (list address 0x08b0)

/ Check to see if the end game should start (requires all treasures including
/ the pearl to be seen/discovered)
0x04e9 (0x0cc9): (0x01) Gosub 0x0d87

**************************************************************************
* Check that the player has space in their inventory
**************************************************************************

/ Set the location of where the non-treasure objects will be moved to
/ the inventory (0xff)
/ var[0x03] is the constant 0xff
0x04ec (0x0ccc): (0x09) Set var[0x17] = var[0x03]

/ Set the location of where the treasure objects will be moved to
/ the inventory (0xff)
/ var[0x03] is the constant 0xff
0x04ef (0x0ccf): (0x09) Set var[0x18] = var[0x03]

/ Count the treasures, non-treasures and total objects in the inventory
/ (and move both to the inventory so no change...)
0x04f2 (0x0cd2): (0x01) Gosub 0x09b3

/ Branch if the player is carrying less than 0x04 objects (treasures and non-treasures)
0x04f5 (0x0cd5): (0x1a) If var[0x21] < (constant) 0x04 then Goto 0x04fe

/ Player is carrying too much

/ Print message  "Your hands are full, you can't carry anything else unless you drop something first "
0x04f9 (0x0cd9): (0x05) Print message (constant) 0x2e

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x04fb (0x0cdb): (0x00) Goto 0x017d

**************************************************************************

0x04fe (0x0cde): (0x01) Gosub 0x0bff

/ Set the current location of the object to the player's inventory (0xff)
/ var[0x03] is the constant 0xff
0x0501 (0x0ce1): (0xe3) Set list#3[var[0x14]] = var[0x03] (list address 0x0860)

/ Print message  "I have it now "
0x0504 (0x0ce4): (0x05) Print message (constant) 0x288

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0507 (0x0ce7): (0x00) Goto 0x017d

**************************************************************************
* Check second word is an object and calculate real object id for use in 
* lists from the object's dictionary id. Used by many commands
**************************************************************************

/ All the game objects that a player can interact with have dictionary ids
/ between 0x24 and 0x43 but in all the lists etc the objects are numbered
/ 0x01 to 0x32.  So if the second word is a game object, subtract 0x23 
/ from it to get the real object id from the dictionary id

/ Branch if the second word is less than dictionary id 0x24 
/ (which means it isn't an object so print "please be more specific")
0x050a (0x0cea): (0x1a) If var[0x14] < (constant) 0x24 then Goto 0x01b9

/ Branch if the second word is greater than dictionary id 0x43
/ (which means it isn't an object so print "please be more specific")
0x050f (0x0cef): (0x1b) If var[0x14] > (constant) 0x43 then Goto 0x01b9

/ Second word is a valid object

/ Set the amount to subtract from the dictionary id to get to the object id
0x0514 (0x0cf4): (0x08) Set var[0x04] = (constant) 0x23

/ Subtract 0x23 from the dictionary id to get the object id
0x0517 (0x0cf7): (0x0b) Set var[0x14] -= var[0x04].

/ Object id calculated
0x051a (0x0cfa): (0x02) Return

**************************************************************************
* Command: drop/release/discard/free
**************************************************************************

/ Check the second word is a valid object and calculate the real object id
/ from the object's dictionary id.  Return it in the second word var[0x14]
0x051b (0x0cfb): (0x01) Gosub 0x050a

/ Get the current location of the object
0x051d (0x0cfd): (0xa3) Set var[0x04] = list#3[var[0x14]] (list address 0x0860)

/ Branch if the location of the object to drop is in the inventory (0xff)
/ var[0x03] is the constant 0xff 
0x0520 (0x0d00): (0x10) If var[0x04] == var[0x03] then Goto 0x052f

/ Object is NOT in the player's inventory

/ Print message  "You don't have it "
0x0524 (0x0d04): (0x05) Print message (constant) 0x09

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0526 (0x0d06): (0x00) Goto 0x017d

/ Allow the drop and move the object to the player's location

/ Set the location of the object to the player's current location
0x0529 (0x0d09): (0xe3) Set list#3[var[0x14]] = var[0x0d] (list address 0x0860)

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x052c (0x0d0c): (0x00) Goto 0x017d

**************************************************************************

/ Branch if the spider is NOT following the player's pentacle (0xff)
/ and perform location specific checks
/ var[0x03] is the constant 0xff
0x052f (0x0d0f): (0x11) If var[0x0c] != var[0x03] then Goto 0x0538

/ Spider IS following the player's pentacle

/ Branch if the player is "at the top of a high stone pinnacle surround by clouds..."
0x0533 (0x0d13): (0x18) If var[0x0d] == (constant) 0xd1 then Goto 0x0e74

/ NOT "at the top of a high stone pinnacle surround by clouds..."

/ Branch if the second word object id is NOT the bird (0x07)
0x0538 (0x0d18): (0x19) If var[0x14] != (constant) 0x07 then Goto 0x055d

/ Player is dropping the bird 

/ Set the status of the bird to free (0x00)
/ var[0x00] is the constant 0x00
0x053c (0x0d1c): (0x09) Set var[0x29] = var[0x06]

/ Branch if the player is "at the junction between the south end 
/ of a secret north-south canyon" (0x44) where the dragon is
0x053f (0x0d1f): (0x18) If var[0x0d] == (constant) 0x44 then Goto 0x054e

/ Branch if the player is NOT "in the Hall of the Mountain Kings" (0x34) where the 
/ snake is
0x0543 (0x0d23): (0x19) If var[0x0d] != (constant) 0x34 then Goto 0x0529

/ Player is "in the Hall of the Mountain Kings,"

/ Print message  "The bird attacks the snake and in a flurry of feathers drives it off! "
0x0547 (0x0d27): (0x05) Print message (constant) 0x22

/ Change the door status of the current location to open/unblocked (0x01)
/ as the snake is no longer blocking the exits
/ var[0x01] is the constant 0x01
0x0549 (0x0d29): (0x81) Set list#1[0x34] = var[0x01]

/ Set the location of the bird to the player's current location 
/ and continue - bird is now with the player
0x054c (0x0d2c): (0x00) Goto 0x0529

**************************************************************************

/ Get the "door status" of the player's current location
0x054e (0x0d2e): (0xa1) Set var[0x04] = list#1[var[0x0d]] (list address 0x07e0)

/ Note - this will NEVER be true, list#1 values are either 0x00 or 0x01
/ Branch if the door status is 0xff (never can happen!)
/ var[0x03] is the constant 0xff
0x0551 (0x0d31): (0x10) If var[0x04] == var[0x03] then Goto 0x0529

/ Print message  "The bird attacks the dragon and in a flurry of feathers 
/ is eaten! The dragon licks its lips and returns to sleep "
0x0555 (0x0d35): (0x05) Print message (constant) 0x27

/ Remove the bird (0x07) from the game by setting its location to 0x00
/ var[0x06] is the constant 0x00
0x0557 (0x0d37): (0x83) Set list#3[0x07] = var[0x06]

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x055a (0x0d3a): (0x00) Goto 0x017d

**************************************************************************

/ Branch if the second word's object id is NOT the bear (0x0c)
0x055d (0x0d3d): (0x19) If var[0x14] != (constant) 0x0c then Goto 0x0576

/ Player is dropping the bear

/ Branch if the player's current location is NOT " on the north-east side 
/ of a deep chasm crossed by a rickety bridge." (0x20) where the bear is
0x0561 (0x0d41): (0x19) If var[0x0d] != (constant) 0x20 then Goto 0x0529

/ Branch if the bear has already chased off the troll (0x02) and 
/ set the location of the bear to the player's current location and contiue
0x0565 (0x0d45): (0x1b) If var[0x23] > (constant) 0x01 then Goto 0x0529

/ Print message  "The bear shambles towards the troll and rears up on its hind legs.
/ The troll gives a loud shriek and runs away in panic. The bear follows 
/ it for a short distance and then returns "(0x32)
0x0569 (0x0d49): (0x05) Print message (constant) 0x32


/ Note - this should be changing the status to 0x01 not 0x00 as the troll
/ has been chased off but it's never checked... inconsistent with the rest of the A-code
/ Change the door status of location "north west side of a chasm" (0x20) to blocked (0x00)
/ as the troll is no longer blocking the exits
/ var[0x06] is the constant 0x00
0x056b (0x0d4b): (0x81) Set list#1[0x20] = var[0x06]

/ Note - this should be changing the status to 0x01 not 0x00 as the troll
/ has been chased off but it's never checked... inconsistent with the rest of the A-code
/ Change the door status of location 0x5d to blocked (0x00)
/ as the troll is no longer blocking the exits
0x056e (0x0d4e): (0x81) Set list#1[0x5d] = var[0x06]

/ Set the status of the troll as "killed by bear" (0x03)
0x0571 (0x0d51): (0x08) Set var[0x23] = (constant) 0x03

/ Set the location of the bear to the player's current location
/ and continue
0x0574 (0x0d54): (0x00) Goto 0x0529

**************************************************************************

/ Branch if the second word is NOT the vase (0x11)
0x0576 (0x0d56): (0x19) If var[0x14] != (constant) 0x11 then Goto 0x058d

/ Player is dropping the vase

/ Get the current location of the cushion (0x10)
0x057a (0x0d5a): (0xc3) Set var[0x04] = list#3[0x10]

/ Branch if the cushion is in the player's current location 
/ (allows the vase to be dropped)
0x057d (0x0d5d): (0x10) If var[0x04] == var[0x0d] then Goto 0x0529

/ Branch if the player's location is "...the soft room..." (0x54)
/ (allows the vase to be dropped)
0x0581 (0x0d61): (0x18) If var[0x0d] == (constant) 0x54 then Goto 0x0529

/ Vase breaks

/ Print message  "The precious vase shatters into a million tiny pieces on the hard ground! "
0x0585 (0x0d65): (0x05) Print message (constant) 0x2d

/ Set the location of the vase to destroyed / out of game (0x00)
/ var[0x06] is the constant 0x00
0x0587 (0x0d67): (0x83) Set list#3[0x11] = var[0x06]

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x058a (0x0d6a): (0x00) Goto 0x017d

**************************************************************************

/ Branch if the object in the second word is NOT the money/coins (0x15)
0x058d (0x0d6d): (0x19) If var[0x14] != (constant) 0x15 then Goto 0x05a1

/ Branch if the location is NOT in the maze where the vending machine is (0x91)
0x0591 (0x0d71): (0x19) If var[0x0d] != (constant) 0x91 then Goto 0x0529

/ Set the lamp status to unlimited charge (0xff)
/ Lamp is recharged 
/ var[0x03] is the constant 0xff
0x0595 (0x0d75): (0x09) Set var[0x2a] = var[0x03]

/ Remove the coins/money from the game by setting the location to 0x00
/ var[0x06] is the constant 0x00
0x0598 (0x0d78): (0x83) Set list#3[0x15] = var[0x06]

/ Print message  "The machine grabs the money and replaces your batteries. It then whirs, clicks brokenly and stops. A sign lights up saying 'MACHINE EMPTY' "
0x059b (0x0d7b): (0x05) Print message (constant) 0x28a

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x059e (0x0d7e): (0x00) Goto 0x017d

**************************************************************************

/ Branch if the object in the second word is NOT the cage (0x05)
0x05a1 (0x0d81): (0x19) If var[0x14] != (constant) 0x05 then Goto 0x05af

/ Object is the cage 

/ Branch if the status of the bird is free (0x00)
/ var[0x06] is the constant 0x00
0x05a5 (0x0d85): (0x10) If var[0x29] == var[0x06] then Goto 0x05af

/ Bird is in the cage 

/ Set the location of the bird (0x07) to the current location 
0x05a9 (0x0d89): (0x83) Set list#3[0x07] = var[0x0d]

/ Set the location of the cage to the player's current location
0x05ac (0x0d8c): (0x00) Goto 0x0529

**************************************************************************

/ Branch if the object is NOT the Elixir (0x1d)
0x05af (0x0d8f): (0x19) If var[0x14] != (constant) 0x1d then Goto 0x05c8

/ Player has dropped the elixir

/ Branch if location is NOT "...at a dead end..." (0xbf)
0x05b3 (0x0d93): (0x19) If var[0x0d] != (constant) 0xbf then Goto 0x05c3

/ Print message  "The skeletons regenerate back into handsome elves, and you notice a few humans amongst them (possibly former adventurers). All the resurrected folk cluster round you, proclaiming their thanks. Then, as if at some secret signal, they dance off singing joyfully, leaving you alone "
0x05b7 (0x0d97): (0x05) Print message (constant) 0x296

/ Set the status of the skeletons to "regenerated" (0x01)
/ var[0x01] is the constant 0x01
0x05ba (0x0d9a): (0x09) Set var[0x28] = var[0x01]

/ Set the location of elixir (0x1d) to out of game (0x00)
/ var[0x06] is the constant 0x00
0x05bd (0x0d9d): (0x83) Set list#3[0x1d] = var[0x06]

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x05c0 (0x0da0): (0x00) Goto 0x017d

**************************************************************************

/ Player dropped the elixir in any other location than "...at a dead end..."

/ Print message  "The rocks on the floor come to life and dance about for a while. Then, seemingly tired, they lie back down for a rest "
0x05c3 (0x0da3): (0x05) Print message (constant) 0x295

/ Set the Exilir to out of the game
0x05c6 (0x0da6): (0x00) Goto 0x05bd

**************************************************************************

/ Branch if the location is NOT "at a picnic spot littered with small tables..." 0x0d
0x05c8 (0x0da8): (0x19) If var[0x0d] != (constant) 0x0d then Goto 0x0529

/ At the picnic spot - kill the player for littering

/ Print message  "A lightning bolt smites you, litter bug! "
0x05cd (0x0dad): (0x05) Print message (constant) 0x2ab

/ Kill the player
0x05d0 (0x0db0): (0x00) Goto 0x01cd

**************************************************************************
* Command: lob/hurl/throw
**************************************************************************

/ Check the second word is a valid object and calculate the real object id
/ from the object's dictionary id.  Return it in the second word var[0x14]
0x05d3 (0x0db3): (0x01) Gosub 0x050a

/ Set the temporary variable to the referenced object 
0x05d6 (0x0db6): (0x09) Set var[0x2b] = var[0x14]

/ Check if the object is in the player's inventory
0x05d9 (0x0db9): (0x01) Gosub 0x0ab2

/ Check to see if the dynamite explodes and kills the player 
/ (typing these commands explodes the dynamite if the player is in the
/ north-west or south-east part of the vast hall)
0x05dc (0x0dbc): (0x01) Gosub 0x0ef8

/ Branch if the object that's being given is the pentacle (0x1c)
0x05df (0x0dbf): (0x18) If var[0x2b] == (constant) 0x1c then Goto 0x0e5f

/ Branch if the player's current location is "on the south west side of a 
/ chasm crossed by a rickety bridge" (0x5d)
0x05e4 (0x0dc4): (0x18) If var[0x0d] == (constant) 0x5d then Goto 0x061b

/ Branch if the player's current location is "on the north-east side of a 
/ deep chasm crossed by a rickety bridge" (0x20)
0x05e8 (0x0dc8): (0x18) If var[0x0d] == (constant) 0x20 then Goto 0x061b

/ Branch if the player's current location is  at the junction between 
the south end of a secret north-south canyon " (0x44)
0x05ec (0x0dcc): (0x18) If var[0x0d] == (constant) 0x44 then Goto 0x064a

/ Branch if the object is NOT the axe (0x1a) and process the dropping
/ of the item
0x05f0 (0x0dd0): (0x19) If var[0x14] != (constant) 0x1a then Goto 0x052f

/ Branch if there are NO dwarves here and process the dropping 
/ of the item
0x05f5 (0x0dd5): (0x10) If var[0x11] == var[0x06] then Goto 0x052f

/ Generate a random number
0x05fa (0x0dda): (0x06) Function - Random - Set var[0x04]=<random number>

/ Branch if the random number is greater than 30 (0x1e) as the axe hits a dwarf
0x05fd (0x0ddd): (0x1b) If var[0x04] > (constant) 0x1e then Goto 0x0606

/ Axe missed

/ Print message  "Missed! The axe clatters to the ground "
0x0601 (0x0de1): (0x05) Print message (constant) 0x41

/ Process the dropping of the item
0x0603 (0x0de3): (0x00) Goto 0x052f

**************************************************************************

/ Player hits a dwarf with the axe 

/ Set the message id to "A hit! The dwarf vanishes in a puff of foul smelling, greasy smoke" (0x42)
0x0606 (0x0de6): (0x08) Set var[0x04] = (constant) 0x42

/ Branch if there is only one dwarf
0x0609 (0x0de9): (0x10) If var[0x11] == var[0x01] then Goto 0x0610

/ More than one dwarf so...
/ Set the message id to "One dwarf vanishes in a puff of greasy smoke" (0x43)
0x060d (0x0ded): (0x08) Set var[0x04] = (constant) 0x43

/ Print the single or multiple dwarf message 
0x0610 (0x0df0): (0x04) Print message var[0x04]

/ Reduce the number of dwarves by one
0x0612 (0x0df2): (0x0b) Set var[0x11] -= var[0x01].

/ Set the status of the dwarves to "successfully killed at 
/ least one" (0x01)
/ var[0x01] is the constatn 0x01
0x0615 (0x0df5): (0x09) Set var[0x0a] = var[0x01]

/ Process dropping of the item
0x0618 (0x0df8): (0x00) Goto 0x052f

**************************************************************************

/ Branch if the troll has NOT "appeared and asked for treasure (0x01)
/ var[0x01] is the constant 0x01
0x061b (0x0dfb): (0x11) If var[0x23] != var[0x01] then Goto 0x05f5

/ Troll has appeared and asked for treasure

/ Branch if the second word IS "bear" (0x0c) as the player is dropping the 
/ bear to frighten off the troll
0x061f (0x0dff): (0x18) If var[0x14] == (constant) 0x0c then Goto 0x055d

/ Branch if the second word is NOT the axe/hatcher (0x1a)
0x0624 (0x0e04): (0x19) If var[0x14] != (constant) 0x1a then Goto 0x062d

/ Print message  "The troll catches the axe, snorts 'Not even sharp!', 
/ and tosses it back. You just manage to catch it without getting cut "
0x0628 (0x0e08): (0x05) Print message (constant) 0x40

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x062a (0x0e0a): (0x00) Goto 0x017d

**************************************************************************

/ Set the temporary variable to see if the object is a treasure
0x062d (0x0e0d): (0xa4) Set var[0x04] = list#4[var[0x14]] (list address 0x07b5)

/ Branch if the object is NOT a treasure
0x0630 (0x0e10): (0x10) If var[0x04] == var[0x06] then Goto 0x0645

/ Object is a treasure - the troll will take it

/ Set the location of the treasure to out of the game (0x00)
/ var[0x06] is the constant 0x00
0x0634 (0x0e14): (0xe3) Set list#3[var[0x14]] = var[0x06] (list address 0x0860)

/ Print message  "The troll takes the treasure and leaves, chortling "
0x0637 (0x0e17): (0x05) Print message (constant) 0x59

/ Change the status of the troll to "taken treasure and left chortling" (0x02)
0x0639 (0x0e19): (0x08) Set var[0x23] = (constant) 0x02

/ Player can now move between locations " south west side of a chasm" (0x20d) and 
/ " north west side of a chasm (0x5d)

/ Note - this should be changing the status to 0x01 not 0x00 as the troll
/ has been chased off but it's never checked... inconsistent with the rest of the A-code
/ Change the door status of location "south west side of a chasm" (0x5d) to blocked (0x00)
/ as the troll is no longer blocking the exits
0x063c (0x0e1c): (0x81) Set list#1[0x5d] = var[0x06]

/ Note - this should be changing the status to 0x01 not 0x00 as the troll
/ has been chased off but it's never checked... inconsistent with the rest of the A-code
/ Change the door status of location "north west side of a chasm" (0x20) to blocked (0x00)
/ as the troll is no longer blocking the exits
/ var[0x06] is the constant 0x00
0x063f (0x0e1f): (0x81) Set list#1[0x20] = var[0x06]

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0642 (0x0e22): (0x00) Goto 0x017d

**************************************************************************

/ Object is NOT a treasure - troll will not take it

/ Print message  "The troll snaps 'Worthless' and tosses it back "
0x0645 (0x0e25): (0x05) Print message (constant) 0x58

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0647 (0x0e27): (0x00) Goto 0x017d

**************************************************************************

/ Player is already known to be in the default location of the dragon (see 0x05ec)

/ Branch if the player is NOT throwing/dropping the axe (object id 0x1a)
/ and process the dropping of the item
0x064a (0x0e2a): (0x19) If var[0x14] != (constant) 0x1a then Goto 0x052f

/ Get the door status of the player's current location
0x064f (0x0e2f): (0xa1) Set var[0x04] = list#1[var[0x0d]] (list address 0x07e0)

/ Branch if the door status IS Open (0x01) as the dragon is dead
/ and process the dropping of the item
0x0652 (0x0e32): (0x11) If var[0x04] != var[0x06] then Goto 0x052f

/ Door status is closed so the dragon is blocking the exits

/ Print message  "It bounces off the dragon's scales. The dragon opens 
/ an eye and glares at you "
0x0657 (0x0e37): (0x05) Print message (constant) 0x28

/ Put the axe in the player's current location
0x0659 (0x0e39): (0x00) Goto 0x0529

**************************************************************************
* Command: unlock/open
**************************************************************************

/ Branch if the second word IS the orb (dictionary id 0x41) and check to see
/ if the dynamite explodes 
0x065c (0x0e3c): (0x18) If var[0x14] == (constant) 0x41 then Goto 0x0b78

/ Branch if the player's current location is "in a dingy dungeon cell 
/ with an entrance to the south" (0xc1)
0x0661 (0x0e41): (0x18) If var[0x0d] == (constant) 0xc1 then Goto 0x06eb

/ Branch if the player's current location is "in a dingy dungeon cell 
/ with an entrance to the north" (0xc2)
0x0666 (0x0e46): (0x18) If var[0x0d] == (constant) 0xc2 then Goto 0x06f9


**************************************************************************
* Check if the player is opening the grate
**************************************************************************

/ Branch if the second word is NOT the grate (dictionary id 0x23)
0x066b (0x0e4b): (0x19) If var[0x14] != (constant) 0x23 then Goto 0x0691

/ Second word is the grate 

/ Branch to process the grate if the location is either " in a 20-foot 
/ depression in a deep, narrow valley sloping down to the south" (0x04)
0x066f (0x0e4f): (0x18) If var[0x0d] == (constant) 0x04 then Goto 0x067a

/ Branch to process the grate if the location is either "in a tiny rocky 
/ cave below a grate to the surface" (0x11)
0x0673 (0x0e53): (0x18) If var[0x0d] == (constant) 0x11 then Goto 0x067a


/ Print "Please be more specific"
0x0677 (0x0e57): (0x00) Goto 0x01b9

**************************************************************************

/ Get the current location of the keys (object id 0x01)
0x067a (0x0e5a): (0xa3) Set var[0x04] = list#3[var[0x01]] (list address 0x0860)

/ Branch if the keys are in the player's inventory
0x067d (0x0e5d): (0x10) If var[0x04] == var[0x03] then Goto 0x0686

/ No keys...

/ Print message  "You have no keys, or hairpins "
0x0681 (0x0e61): (0x05) Print message (constant) 0x13

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0683 (0x0e63): (0x00) Goto 0x017d

**************************************************************************

/ Set the "door status" to open (0x01) as the player open the grate  " in a 20-foot 
/ depression in a deep, narrow valley sloping down to the south" (0x04) 
0x0686 (0x0e66): (0x81) Set list#1[0x04] = var[0x01]

/ Set the "door status" to open (0x01) as the player open the grate "in a tiny rocky 
/ cave below a grate to the surface" (0x11)
0x0689 (0x0e69): (0x81) Set list#1[0x11] = var[0x01]
/ Print message  "The grate is unlocked "
0x068c (0x0e6c): (0x05) Print message (constant) 0x11

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x068e (0x0e6e): (0x00) Goto 0x017d

**************************************************************************
* Check if the player is opening the bear's chain
**************************************************************************

/ Branch if the second word IS the bear (0x2f)
0x0691 (0x0e71): (0x18) If var[0x14] == (constant) 0x2f then Goto 0x0699

/ Branch if the second word is NOT the chain (0x39)
0x0695 (0x0e75): (0x19) If var[0x14] != (constant) 0x39 then Goto 0x06bb

/ Branch if the second word is NOT the cage (0x28)
0x0699 (0x0e79): (0x19) If var[0x0d] != (constant) 0x28 then Goto 0x06bb

/ Get the current location of the keys (0x01)
/ var[0x01] is the constant 0x01
0x069d (0x0e7d): (0xa3) Set var[0x04] = list#3[var[0x01]] (list address 0x0860)

/ Branch if the keys are NOT in the player's inventory and print "you have 
/ no keys or hairpins"
/ var[0x03] is the constant 0xff
0x06a0 (0x0e80): (0x11) If var[0x04] != var[0x03] then Goto 0x0681

/ Branch if the bear has not yet been fed (0x01)
0x06a4 (0x0e84): (0x11) If var[0x08] != var[0x02] then Goto 0x06ad

/ Bear is unfed

/ Print message  "The bear snaps dangerously, forcing you to back away to the 
/ far side of the room "
0x06a8 (0x0e88): (0x05) Print message (constant) 0x2f

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x06aa (0x0e8a): (0x00) Goto 0x017d

**************************************************************************

/ Set the bear status to released (0x00)
0x06ad (0x0e8d): (0x09) Set var[0x08] = var[0x06]

/ Set the temporary variable to the location id (0x28) for "the bear room"
0x06b0 (0x0e90): (0x08) Set var[0x04] = (constant) 0x28

/ Set the location of the bear to in the bear room
0x06b3 (0x0e93): (0x83) Set list#3[0x16] = var[0x04]

/ Print message  "The chain clicks open and falls to the floor. The bear is
/ free and stretches joyfully "
0x06b6 (0x0e96): (0x05) Print message (constant) 0x30

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x06b8 (0x0e98): (0x00) Goto 0x017d

**************************************************************************
* Check if the player is opening the clam / oyster
**************************************************************************

/ Branch if the player is NOT opening the clam/oyster (0x55)
0x06bb (0x0e9b): (0x19) If var[0x14] != (constant) 0x55 then Goto 0x01b9

/ Player is opening the clam/oyster

/ Branch if the player is NOT in the cul-de-sac (0x67)
0x06c0 (0x0ea0): (0x19) If var[0x0d] != (constant) 0x67 then Goto 0x01c1

/ Set the temporary variable to the door status of the location
/ which represents if the clam is opened or closed
0x06c5 (0x0ea5): (0xc1) Set var[0x04] = list#1[0x67]

/ Branch if the clam is currently closed (0x00)
/ var[0x06] is the constant 0x00
0x06c8 (0x0ea8): (0x10) If var[0x04] == var[0x06] then Goto 0x06d1

/ Print message  "It's already open "
0x06cc (0x0eac): (0x05) Print message (constant) 0x44

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x06ce (0x0eae): (0x00) Goto 0x017d

**************************************************************************

/ Get the current location of the trident (0x12)
0x06d1 (0x0eb1): (0xc3) Set var[0x04] = list#3[0x12]

/ Branch if the trident is in the player's inventory (0xff)
/ var[0x03] is the constant 0xff
0x06d4 (0x0eb4): (0x10) If var[0x04] == var[0x03] then Goto 0x06dd

/ Print message  "The clam won't open "
0x06d8 (0x0eb8): (0x05) Print message (constant) 0x29

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x06da (0x0eba): (0x00) Goto 0x017d

**************************************************************************

/ Player has the trident in their inventory

/ Print message  "The clam opens and you realise that it is really an oyster. 
/ A gleaming pearl springs out and rolls away downhill out of sight. "
0x06dd (0x0ebd): (0x05) Print message (constant) 0x2a

/ Set the temprorary variable to location id 0x51, "...cul-de-sac..."
0x06df (0x0ebf): (0x08) Set var[0x04] = (constant) 0x51

/ Set the current location of the pearl (0x13) to the "cul-de-sac" (0x51)
0x06e2 (0x0ec2): (0x83) Set list#3[0x13] = var[0x04]

/ Set the "door status" to unblocked/open for this location
/ "room decorated with millions of shells" (0x67) 
0x06e5 (0x0ec5): (0x81) Set list#1[0x67] = var[0x01]

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x06e8 (0x0ec8): (0x00) Goto 0x017d

**************************************************************************
* Check if the player is freeing the first set of elves 
**************************************************************************

/ Branch if the first set of elves have already been released (0x01)
/ var[0x01] is the constant 0x01
0x06eb (0x0ecb): (0x10) If var[0x2c] == var[0x01] then Goto 0x017d

/ Elves have not been released

/ Print message  "You free a few elves and they unlock the rest. 
/ They all dance off, singing your praises "
0x06f0 (0x0ed0): (0x05) Print message (constant) 0x2b1

/ Set the status of the first set of elves to released (0x01)
/ var[0x01] is the constant 0x01
0x06f3 (0x0ed3): (0x09) Set var[0x2c] = var[0x01]

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x06f6 (0x0ed6): (0x00) Goto 0x017d

**************************************************************************
* Check if the player is freeing the second set of elves 
**************************************************************************

/ Branch if the second set of elves have already been released (0x01)
/ var[0x01] is the constant 0x01
0x06f9 (0x0ed9): (0x10) If var[0x2d] == var[0x01] then Goto 0x017d

/ Print message  "You free a few elves and they unlock the rest.
/ They all dance off, singing your praises "
0x06fe (0x0ede): (0x05) Print message (constant) 0x2b1

/ Set the status of the second set of elves to released (0x01)
/ var[0x01] is the constant 0x01
0x0701 (0x0ee1): (0x09) Set var[0x2d] = var[0x01]

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0704 (0x0ee4): (0x00) Goto 0x017d

**************************************************************************
* Command: on/light
**************************************************************************
/ Set the object to check to the lamp (0x02)
/ var[0x02] is the constant 0x02
0x0707 (0x0ee7): (0x09) Set var[0x2b] = var[0x02]

/ Check if the player has the lamp - won't return if the player doesn't have it
0x070a (0x0eea): (0x01) Gosub 0x0ab2

/ Player has the lamp

/ Branch if the lamp status is out of power (0xfe) 
/ and print "Please be more specific"
0x070d (0x0eed): (0x18) If var[0x2a] == (constant) 0xfe then Goto 0x01b9

/ Set the status of the lamp to on (0x01)
/ var[0x01] is the constant 0x01
0x0712 (0x0ef2): (0x09) Set var[0x2e] = var[0x01]

/ Print message  "The lamp is on "
0x0715 (0x0ef5): (0x05) Print message (constant) 0x0e

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0717 (0x0ef7): (0x00) Goto 0x017d

**************************************************************************
* Command: off
**************************************************************************

/ Set the object to check to the lamp (0x02)
/ var[0x02] is the constant 0x02
0x071a (0x0efa): (0x09) Set var[0x2b] = var[0x02]

/ Check if the player has the lamp - won't return if the player doesn't have it
0x071d (0x0efd): (0x01) Gosub 0x0ab2

/ Set the lamp status to off (0x00)
/ var[0x06] is the constant 0x00
0x0720 (0x0f00): (0x09) Set var[0x2e] = var[0x06]

/ Print message  "The lamp is off "
0x0723 (0x0f03): (0x05) Print message (constant) 0x0f

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0725 (0x0f05): (0x00) Goto 0x017d

**************************************************************************
* Command: fill
**************************************************************************

/ Check the second word is a valid object and calculate the real object id
/ from the object's dictionary id.  Return it in the second word var[0x14]
0x0728 (0x0f08): (0x01) Gosub 0x050a

/ Set the object to check to the bottle (0x04)
0x072b (0x0f0b): (0x08) Set var[0x2b] = (constant) 0x04

/ Branch if the second word is NOT the object "bottle" and 
/ print "I don't understand"
0x072e (0x0f0e): (0x11) If var[0x14] != var[0x2b] then Goto 0x01b5

/ Check if the player has the bottle - won't return if the player doesn't have it
0x0733 (0x0f13): (0x01) Gosub 0x0ab2

/ Branch if the player is at the following first 3 locations, all of which have water:
/ 0x01 - "...beside a small brick building at the end of a road from the north. A river flows south."
/ 0x02 - "...in a valley beside a stream which cascades along a rocky bed"
/ 0x03 - "...in a tree-lined valley beside a stream which seeps away"
0x0736 (0x0f16): (0x1a) If var[0x0d] < (constant) 0x04 then Goto 0x074f

/ Branch if the player is at the following location, which has water:
/ 0x46 - "...on the edge of a massive underground reservoir"
0x073a (0x0f1a): (0x18) If var[0x0d] == (constant) 0x46 then Goto 0x074f

/ Branch if the player is at the following location, which has water:
/ 0x49 - "...at the bottom of a pit, standing in about 6 inches of icy water"
0x073e (0x0f1e): (0x18) If var[0x0d] == (constant) 0x49 then Goto 0x074f

/ Branch if the player is at the following location, which has water:
/ 0x47 - "...in a magnificent cavern with a rushing stream"
0x0742 (0x0f22): (0x18) If var[0x0d] == (constant) 0x47 then Goto 0x074f

/ Branch if the player is at the following location, which has oil (not water):
/ 0x5a - "...in the east pit beside an oil well"
0x0746 (0x0f26): (0x18) If var[0x0d] == (constant) 0x5a then Goto 0x0755

/ Print message  "There's no liquid here to fill it with "
0x074a (0x0f2a): (0x05) Print message (constant) 0x45

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x074c (0x0f2c): (0x00) Goto 0x017d

/ Set the contents of the bottle to water (0x01)
/ var[0x01] is the constant 0x01
0x074f (0x0f2f): (0x09) Set var[0x2f] = var[0x01]

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0752 (0x0f32): (0x00) Goto 0x017d

/ Set the contents of the bottle to oil (0x02)
/ var[0x02] is the constant 0x02
0x0755 (0x0f35): (0x09) Set var[0x2f] = var[0x02]

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0758 (0x0f38): (0x00) Goto 0x017d

**************************************************************************
* Command: empty
**************************************************************************

/ Check the second word is a valid object and calculate the real object id
/ from the object's dictionary id.  Return it in the second word var[0x14]
0x075b (0x0f3b): (0x01) Gosub 0x050a

/ Set the object to check to the bottle (0x04)
0x075e (0x0f3e): (0x08) Set var[0x2b] = (constant) 0x04

/ Branch if the second word is NOT the object "bottle" and 
/ print "I don't understand"
0x0761 (0x0f41): (0x11) If var[0x2b] != var[0x14] then Goto 0x01b5

/ Check if the player has the bottle - won't return if the player doesn't have it
0x0766 (0x0f46): (0x01) Gosub 0x0ab2

/ Branch if the bottle contents is water (0x01)
/ var[0x01] is the constant 0x01
0x0769 (0x0f49): (0x10) If var[0x2f] == var[0x01] then Goto 0x0776

/ Branch if the bottle contents is oil (0x02)
/ var[0x02] is the constant 0x02
0x076d (0x0f4d): (0x10) If var[0x2f] == var[0x02] then Goto 0x07a9

/ Bottle is empty

/ Print message  "Your bottle is already empty "
0x0771 (0x0f51): (0x05) Print message (constant) 0x46

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0773 (0x0f53): (0x00) Goto 0x017d

**************************************************************************
* Command: water (also continuation from "empty" above)
**************************************************************************

/ Branch if the bottle contents is NOT water (0x01) and print
/ a message that the "you have none" [water]
0x0776 (0x0f56): (0x11) If var[0x2f] != var[0x01] then Goto 0x07ce

/ Branch if the player's location is NOT "...at the bottom of the west pit"
/ and print the "water soaks away into the ground"
0x077a (0x0f5a): (0x19) If var[0x0d] != (constant) 0x5c then Goto 0x07a1

/ Branch if the plant has not been watered previously (0x00)
/ var[0x06] is the constant 0x00
0x077e (0x0f5e): (0x10) If var[0x26] == var[0x06] then Goto 0x0790

/ Branch if the plant has been watered once (0x01)
/ var[0x01] is the constant 0x01
0x0782 (0x0f62): (0x10) If var[0x26] == var[0x01] then Goto 0x0797

/ Plant has been watered a third time, return to the initial state

/ Print message  "You have OVER-WATERED it! The beanstalk flails about and collapses, falling in a mass to the floor of the pit where it shrivels up. All that remains is a tiny plant whispering 'water, water' "
0x0786 (0x0f66): (0x05) Print message (constant) 0x4a

/ Reset the state of the plant to the initial state (0x0)
0x0788 (0x0f68): (0x09) Set var[0x26] = var[0x06]

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
/ var[0x06] is the constant 0x00
0x078b (0x0f6b): (0x81) Set list#1[0x5c] = var[0x06]

/ Empty the bottle 
0x078e (0x0f6e): (0x00) Goto 0x07a3

**************************************************************************

/ Print message  "The plant bursts into incredible growth, reaching upwards into the air and throwing out enormous leaves. Eventually it stops, towering over your head and yelling 'WATER! WATER!' in your ear "
0x0790 (0x0f70): (0x05) Print message (constant) 0x48

/ Set the state of the plant to initial growth
0x0792 (0x0f72): (0x09) Set var[0x26] = var[0x01]

/ Empty the bottle
0x0795 (0x0f75): (0x00) Goto 0x07a3

**************************************************************************

/ Print message  "The beanstalk grows even larger than before, almost filling the pit and stretching high into the air. The tip reaches into an opening in the wall above! "
0x0797 (0x0f77): (0x05) Print message (constant) 0x49

/ Set the state of the plant to fully grown (0x02)
0x0799 (0x0f79): (0x09) Set var[0x26] = var[0x02]

/ Set the "door status" of the location to unblocked / open (0x01)
/ as the player can now climb the beansteak
/ var[0x01] is the constant 0x01
0x079c (0x0f7c): (0x81) Set list#1[0x5c] = var[0x01]

/ Empty the bottle
0x079f (0x0f7f): (0x00) Goto 0x07a3

**************************************************************************

/ Print message  "The water soaks away into the ground "
0x07a1 (0x0f81): (0x05) Print message (constant) 0x15

/ Set the bottle state to empty (0x00)
/ var[0x06] is the constant 0x00
0x07a3 (0x0f83): (0x09) Set var[0x2f] = var[0x06]

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x07a6 (0x0f86): (0x00) Goto 0x017d

**************************************************************************
* Command: oil
**************************************************************************

/ Branch if the bottle contents is NOT oil (0x02) and print
/ a message that the "you have none" [oil]
/ var[0x02] is the constant 0x02 and 
0x07a9 (0x0f89): (0x11) If var[0x2f] != var[0x02] then Goto 0x07ce

/ Branch if the player's location is NOT "...in a gigantic north-south passage"
0x07ad (0x0f8d): (0x19) If var[0x0d] != (constant) 0x6b then Goto 0x07bb

/ Player is "...in a gigantic north-south passage"

/ Print message  "The gate creaks open, dislodging a shower of rusty flakes "
0x07b1 (0x0f91): (0x05) Print message (constant) 0x4b

/ Change the door status in location 0x6b to open (0x01)
/ var[0x01] is the constant 0x01
0x07b3 (0x0f93): (0x81) Set list#1[0x6b] = var[0x01]

/ Change the door status in location 0x47 to open (0x01)
/ var[0x01] is the constant 0x01
0x07b6 (0x0f96): (0x81) Set list#1[0x47] = var[0x1]

/ Empty the bottle
0x07b9 (0x0f99): (0x00) Goto 0x07a3

**************************************************************************

/ Branch if the player's location is NOT "...at the bottom of the west pit"
0x07bb (0x0f9b): (0x19) If var[0x0d] != (constant) 0x5c then Goto 0x07c3

/ Player is pouring oil on the plant

/ Print message  "The plant shakes the oil from its leaves in fury "
0x07bf (0x0f9f): (0x05) Print message (constant) 0x4c

/ Empty the bottle
0x07c1 (0x0fa1): (0x00) Goto 0x07a3

**************************************************************************

/ Print message  "The oil splashes on the ground "
0x07c3 (0x0fa3): (0x05) Print message (constant) 0x16

/ Empty the bottle
0x07c5 (0x0fa5): (0x00) Goto 0x07a3

**************************************************************************
* Command: pour
**************************************************************************

/ Get the location of the bottle (0x04)
0x07c7 (0x0fa7): (0xc3) Set var[0x04] = list#3[0x04]

/ Branch if the bottle is in the player's inventory
0x07ca (0x0faa): (0x10) If var[0x04] == var[0x03] then Goto 0x07d3

/ Player does not have the bottle

/ Print message  "You have none "
0x07ce (0x0fae): (0x05) Print message (constant) 0x47

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x07d0 (0x0fb0): (0x00) Goto 0x017d

**************************************************************************

/ Branch if the second word is "water" (0x1d)
0x07d3 (0x0fb3): (0x18) If var[0x14] == (constant) 0x1d then Goto 0x07e2

/ Second word is NOT water

/ Branch if the second word is NOT "oil" (0x1c)
0x07d7 (0x0fb7): (0x19) If var[0x14] != (constant) 0x1c then Goto 0x01b5

/ Branch if the bottle does NOT contain oil (0x02)
/ var[0x02] is the constant 0x02
0x07dc (0x0fbc): (0x11) If var[0x2f] != var[0x02] then Goto 0x07ce

/ Bottle contains oil

/ Pour the oil
0x07e0 (0x0fc0): (0x00) Goto 0x07a9

**************************************************************************

/ Branch if the bottle does NOT contain water (0x01)
/ var[0x01] is the constant 0x01
0x07e2 (0x0fc2): (0x11) If var[0x2f] != var[0x01] then Goto 0x07ce

/ Bottle contains water

/ Pour the water
0x07e6 (0x0fc6): (0x00) Goto 0x0776

**************************************************************************
* Command: fight/attack/kill/hit
**************************************************************************

/ Check to see if the dynamite explodes and kills the player 
/ (typing these commands explodes the dynamite if the player is in the
/ north-west or south-east part of the vast hall)
0x07e8 (0x0fc8): (0x01) Gosub 0x0ef8

/ Branch if the player is NOT attacking the bird (dictionary id 0x2a)
/ NOTE this is a dictionary id comparison here not an object id 
0x07eb (0x0fcb): (0x19) If var[0x14] != (constant) 0x2a then Goto 0x07ff

/ Get the location of the bird (object id 0x07)
0x07ef (0x0fcf): (0xc3) Set var[0x04] = list#3[0x07]

/ Branch if the bird is NOT in the player's current location 
0x07f2 (0x0fd2): (0x11) If var[0x04] != var[0x0d] then Goto 0x01c9

/ Bird is in the player's current location

/ Print message  "The bird is dead and its body vanishes "
0x07f7 (0x0fd7): (0x05) Print message (constant) 0x1a

/ Remove the bird from the game by setting it's location to 0x00
/ var[0x06] is the constant 0x00
0x07f9 (0x0fd9): (0x83) Set list#3[0x07] = var[0x6]

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x07fc (0x0fdc): (0x00) Goto 0x017d

**************************************************************************
* Process attacking the snake
**************************************************************************

/ Branch if the player is NOT attacking the snake (dictionary id 0x49)
/ NOTE this is a dictionary id comparison here not an object id 
0x07ff (0x0fdf): (0x19) If var[0x14] != (constant) 0x49 then Goto 0x0815

/ Branch if the player's current location is NOT "in the Hall of the Mountain Kings"
0x0803 (0x0fe3): (0x19) If var[0x0d] != (constant) 0x34 then Goto 0x01c9

/ Player is "in the Hall of the Mountain Kings"

/ Get the "door" status at the player's current location  - indicates 
/ if the snake is dead (can move from here) or alive (cannot move from here)
0x0808 (0x0fe8): (0xa1) Set var[0x04] = list#1[var[0x0d]] (list address 0x07e0)

/ Branch if the snake is still present / alive to print 
/ "Are you mad?...."
0x080b (0x0feb): (0x11) If var[0x04] != var[0x06] then Goto 0x01c9

/ Snake is no longer here so print something else

/ Print message  "No way! "
0x0810 (0x0ff0): (0x05) Print message (constant) 0x21

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0812 (0x0ff2): (0x00) Goto 0x017d

**************************************************************************
* Process attacking the dragon
**************************************************************************

/ Branch if the player is NOT attacking the dragon (dictionary id 0x48)
/ NOTE this is a dictionary id comparison here not an object id 
0x0815 (0x0ff5): (0x19) If var[0x14] != (constant) 0x48 then Goto 0x0831

/ Branch if the player's current location is NOT " at the junction between 
/ the south end of a secret north-south canyon" (0x044)
0x0819 (0x0ff9): (0x19) If var[0x0d] != (constant) 0x44 then Goto 0x01c9

/ Get the virtual door status of the player's current location - used 
/ to determine if the dragon is still alive or dead as it blocks the 
/ exit from this location
0x081e (0x0ffe): (0xa1) Set var[0x04] = list#1[var[0x0d]] (list address 0x07e0)

/ Branch if the dragon is NOT blocking the exit 
/ var[0x06] is the constant 0x00
0x0821 (0x1001): (0x11) If var[0x04] != var[0x06] then Goto 0x01c9

/ Print message  "You attack the dragon with your bare hands and with an 
/ incredible display of martial arts prowess you win! Who would have thought it possible? "
0x0826 (0x1006): (0x05) Print message (constant) 0x26

/ The dragon is dead and no longer blocking the exit - set the 
/ "door status" of this location to open (0x01)
/ var[0x01] is the constant 0x01
0x0828 (0x1008): (0xe1) Set list#1[var[0x0d]] = var[0x01] (list address 0x07e0)

/ Remove the dragon from the game by setting it's location to 0x00
/ var[0x06] is the constant 0x00
0x082b (0x100b): (0x83) Set list#3[0x17] = var[0xd]

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x082e (0x100e): (0x00) Goto 0x017d

**************************************************************************
* Process attacking the bear
**************************************************************************

/ Branch if the player is NOT attacking the bear (dictionary id 0x2f)
/ NOTE this is a dictionary id comparison here not an object id 
0x0831 (0x1011): (0x19) If var[0x14] != (constant) 0x2f then Goto 0x0846

/ Player is attaching the bear

/ Get the current location of the bear (object 0x0c)
0x0835 (0x1015): (0xc3) Set var[0x04] = list#3[0x0c]

/ Branch if the bear IS in the player's inventory (0xff) to say the bear dodges
/ var[0x03] is the constant 0xff    
0x0838 (0x1018): (0x10) If var[0x04] == var[0x03] then Goto 0x0841

/ Branch if the bear is NOT in the player's current location
0x083c (0x101c): (0x11) If var[0x04] != var[0x0d] then Goto 0x01c9

/ Player can't kill the bear

/ Print message  "The bear dodges, sadly, and you miss "
0x0841 (0x1021): (0x05) Print message (constant) 0x31

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0843 (0x1023): (0x00) Goto 0x017d

**************************************************************************
* Process attacking a dwarf/dwarves
**************************************************************************

/ Branch if the player is NOT attacking a dwarf (dictionary id 0x45)
/ NOTE this is a dictionary id comparison here not an object id 
0x0846 (0x1026): (0x19) If var[0x14] != (constant) 0x45 then Goto 0x0857

/ Branch if no dwarves are currently spawned
0x084a (0x102a): (0x10) If var[0x11] == var[0x06] then Goto 0x01c9

/ Player can't kill the dwarves (well only with the axe)

/ Print message  "Dwarves are too agile for YOU to catch. You only succeed in getting out of breath "
0x084f (0x102f): (0x05) Print message (constant) 0x4e

/ Set the dwarf status to killed or attempted to kill (0x01)
0x0851 (0x1031): (0x09) Set var[0x0a] = var[0x01]

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0854 (0x1034): (0x00) Goto 0x017d

**************************************************************************

/ Branch if the second word is NOT specified as nothing to attack 
/ and print "please be more specific"
/ var[0x06] is the constant 0x00
0x0857 (0x1037): (0x11) If var[0x14] != var[0x06] then Goto 0x01b9

/ Branch if the current location IS "in the Hall of the Mountain Kings" (0x34)
/ where the snake is and process fighting the snake
0x085c (0x103c): (0x18) If var[0x0d] == (constant) 0x34 then Goto 0x0808

/ Branch if the current location IS "at the junction between the south
/ end of a secret north-south canyon" (0x44) where the dragon is and
/ process fighting the dragon
0x0860 (0x1040): (0x18) If var[0x0d] == (constant) 0x44 then Goto 0x081e

/ Branch if there are NO dwarves here (0x00)
/ var[0x06] is the constant 0x00
0x0864 (0x1044): (0x11) If var[0x11] != var[0x06] then Goto 0x084f

/ Print "Are you mad?..."
0x0868 (0x1048): (0x00) Goto 0x01c9

**************************************************************************
* Command: read
**************************************************************************

/ Branch if the second word is not the dicitonary id of the gazette/magazine (0x37) and 
/ print "please be more specific"
0x086b (0x104b): (0x19) If var[0x14] != (constant) 0x37 then Goto 0x01b9

/ Get the location of the magazine/gazette using the object id (0x14)
0x0870 (0x1050): (0xc3) Set var[0x04] = list#3[0x14]

/ Branch if the object is NOT in the player's inventory (0xff)
/ var[0x03] is the constant 0xff
0x0873 (0x1053): (0x11) If var[0x04] != var[0x03] then Goto 0x01c5

/ Player has the gazette in their inventory

/ Print message  "The main headline is 'Don't go West'. The lead story is
/ about the success of the Dwarven King who has added the heads of 
/ another two elves to his collection. The editorial denounces the 
/ perverted ways of 'Elvies' and page 3 features a female dwarf whose 
/ long grey beard has been positioned ingeniously. The rest is 
/ adverts, mainly for Witt Construction Plc (dungeons a speciality) 
/ and Acorn Forestry (oaks take a long time to grow - order now 
/ for your grandchildren) "
0x0878 (0x1058): (0x05) Print message (constant) 0x4f

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x087a (0x105a): (0x00) Goto 0x017d

**************************************************************************
* Print the score
**************************************************************************

/ Print message  "Your score is "
0x087d (0x105d): (0x05) Print message (constant) 0x50

/ Calculate the score 
0x087f (0x105f): (0x01) Gosub 0x0888

/ Print the score
0x0881 (0x1061): (0x03) Print Number var[0x1c]

/ Print message  "out of 1100\n "
0x0883 (0x1063): (0x05) Print message (constant) 0x51

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0885 (0x1065): (0x00) Goto 0x017d

**************************************************************************
* Calculate the score
*
* 1. Start at 30
* 2. Subtract 0, 10 or 20 based on the number of times the player has died
* 3. Add 30 if they have reached "the east end of the Hall of Mists"
* 4. Add 9 points if the player is NOT quitting right now
* 5. Add 50 if the player has picked up the gleaming pearl
* 6. Add 5 if the player dropped the magazine/gazette at Witt's End
* 7. Add 1 if the player has NOT saved the game
* 8. Add a score increment for using the dynamite:
*    0x00 (0)   - Dynamite not used
*    0x14 (20)  - Dynamite detonated (+20)
*    0x64 (100) - Dynamite detonated (+20), woke up the dwarves, and roof collapses killing...dwarves (+80) but the player dies
*    0xc8 (200) - Dynamite detonated (+20) and blast collapses the celing.. killing (+180), player lives
* z. Add 5 points for each of the 15 treasures with an id of less than 0x1d if discovered/seen (75 points max):
*    0x08 - Gold nugget
*    0x09 - Silver bars
*    0x0a - jewelry
*    0x0b - diamonds 
*    0x0d - platinum
*    0x0e - emerald
*    0x0f - eggs 
*    0x11 - vase
*    0x12 - trident
*    0x13 - pearl
*    0x15 - coins
*    0x16 - chain 
*    0x17 - rug
*    0x18 - treasure chest
*    0x19 - spices
* z. Add 10 points for each of the 15 treasures with an id of less than 0x1e are in the small building (150 points max):
*    0x08 - Gold nugget
*    0x09 - Silver bars
*    0x0a - jewelry
*    0x0b - diamonds 
*    0x0d - platinum
*    0x0e - emerald
*    0x0f - eggs 
*    0x11 - vase
*    0x12 - trident
*    0x13 - pearl
*    0x15 - coins
*    0x16 - chain 
*    0x17 - rug
*    0x18 - treasure chest
*    0x19 - spices
* z. Add 50 points for each of the 3 treasures with an id of greater than 0x1d are in the small building (150 points max):
*    0x1e - orb
*    0x1f - sceptre
*    0x20 - crown
* z. Add 100 if the player dropped the elixir and regenerated the elves
* z. Add 100 if the player unchained the first set of elves
* z. Add 100 if the player unchained the second set of elves
* z. Add 100 if the player completed the game 
**************************************************************************

/ Set the minimum score to 30 (0x1e)
0x0888 (0x1068): (0x08) Set var[0x1c] = (constant) 0x1e

/ Complicated way of reducing the player's score by an amount each time they die
/ 0 deaths - no reduction in score
/ 1 death  - reduce score by 10
/ 2 deaths - reduce score by
/  
/ Algorithm: Score reduction = deaths^4 + deaths^2
/ 
/ Cannot die more than twice

/ Get the number of deaths
0x088b (0x106b): (0x09) Set var[0x04] = var[0x1b]

/ Square it
0x088e (0x106e): (0x0a) Set var[0x04] += var[0x04]

/ Set another variable to the value
0x0891 (0x1071): (0x09) Set var[0x05] = var[0x04]

/ Double it
0x0894 (0x1074): (0x0a) Set var[0x05] += var[0x05]

/ Double it again
0x0897 (0x1077): (0x0a) Set var[0x05] += var[0x05]

/ Add on the number of deaths x 2 
0x089a (0x107a): (0x0a) Set var[0x05] += var[0x04]

/ Reduce the score by either 0 (no deaths) or 10 (one death) 
/ or 20 (two deaths)
0x089d (0x107d): (0x0b) Set var[0x1c] -= var[0x05].

/ When the player reaches "the east end of the Hall of Mists"
/ they are entitled to another 30 (0x1e) points for making progress this far
0x08a0 (0x1080): (0x11) If var[0x10] != var[0x01] then Goto 0x08aa

/ Player has progressed to "the east end of the Hall of Mists"

/ Set the score increment to 30 (0x1e)
0x08a4 (0x1084): (0x08) Set var[0x04] = (constant) 0x1e

/ Add the score increment to the running total
0x08a7 (0x1087): (0x0a) Set var[0x1c] += var[0x04]

/ Is the player quitting the game right now (0x01) they get a 9 point penalty
/ as its addition is skipped
/ var[0x06] is the constant 0x00
0x08aa (0x108a): (0x11) If var[0x30] != var[0x06] then Goto 0x08b4

/ Set the score increment to 9
0x08ae (0x108e): (0x08) Set var[0x04] = (constant) 0x09

/ Add 9 to the score as the player is not quitting
0x08b1 (0x1091): (0x0a) Set var[0x1c] += var[0x04]

/ Branch if the endgame has not started (initiated by picking up the 
/ glistening pearl)
/ var[0x06] is the constant 0x00
0x08b4 (0x1094): (0x10) If var[0x1a] == var[0x06] then Goto 0x08be

/ Set the score increment to 50
0x08b8 (0x1098): (0x08) Set var[0x04] = (constant) 0x32

/ Add 50 to the score as the player picked up the pearl
0x08bb (0x109b): (0x0a) Set var[0x1c] += var[0x04]

/ Get the location of magazine/gazette (0x14)
0x08be (0x109e): (0xc3) Set var[0x04] = list#3[0x14]

/ Branch if the player did not drop it at Witt's End (0x4d)
0x08c1 (0x10a1): (0x19) If var[0x04] != (constant) 0x4d then Goto 0x08cb

/ Set the score increment to 5
0x08c5 (0x10a5): (0x08) Set var[0x04] = (constant) 0x05

/ Add 5 to the score as the player dropped the magazine at Witt's End
0x08c8 (0x10a8): (0x0a) Set var[0x1c] += var[0x04]

/ Add on one point if the player hasn't saved or zero if they have
0x08cb (0x10ab): (0x0a) Set var[0x1c] += var[0x0b]

/ Add the score increment for using dynamite
/ 0x00 (0)   - Dynamite not used
/ 0x14 (20)  - Dynamite detonated (+20)
/ 0x64 (100) - Dynamite detonated (+20), woke up the dwarves, and roof collapses killing...dwarves (+80) but the player dies
/ 0xc8 (200) - Dynamite detonated (+20) and blast collapses the celing.. killing (+180), player lives
0x08ce (0x10ae): (0x0a) Set var[0x1c] += var[0x31]

/ Set the temporary variable to the first object id (0x01)
/ var[0x01] is the constant 0x01
0x08d1 (0x10b1): (0x09) Set var[0x04] = var[0x01]

/ Work out if the object is a treasure by inspecting list#4
0x08d4 (0x10b4): (0xa4) Set var[0x05] = list#4[var[0x04]] (list address 0x07b5)

/ Branch if the object is NOT a treasure (0x00)
/ var[0x06] is the constant 0x00
0x08d7 (0x10b7): (0x10) If var[0x05] == var[0x06] then Goto 0x0904

/ Work out if the object has been seen/discovered by inspecting list#5
0x08db (0x10bb): (0xa5) Set var[0x05] = list#5[var[0x04]] (list address 0x08b0)

/ Branch if the object has NOT been seen/discovered (0x00)
/ var[0x06] is the constant 0x00
0x08de (0x10be): (0x10) If var[0x05] == var[0x06] then Goto 0x0904

/ Branch if the object id is after the pentacle (0x1c)
0x08e2 (0x10c2): (0x1b) If var[0x04] > (constant) 0x1c then Goto 0x08ec

/ The following items will count as treasures if seen/discovered and 
/ are worth 5 points each:
/ 0x08 - Gold nugget
/ 0x09 - Silver bars
/ 0x0a - jewelry
/ 0x0b - diamonds 
/ 0x0d - platinum
/ 0x0e - emerald
/ 0x0f - eggs 
/ 0x11 - vase
/ 0x12 - trident
/ 0x13 - pearl
/ 0x15 - coins
/ 0x16 - chain 
/ 0x17 - rug
/ 0x18 - treasure chest
/ 0x19 - spices

/ Set the score increment to 5
0x08e6 (0x10c6): (0x08) Set var[0x32] = (constant) 0x05

/ Add 5 points if the object is a treasure, has been seen/discovered
0x08e9 (0x10c9): (0x0a) Set var[0x1c] += var[0x32]

/ Get the current location of the treasure
0x08ec (0x10cc): (0xa3) Set var[0x05] = list#3[var[0x04]] (list address 0x0860)

/ Branch if the object is in the player's inventory (0xff)
/ var[0x03] is the constant 0xff
0x08ef (0x10cf): (0x10) If var[0x05] == var[0x03] then Goto 0x08f7

/ Branch if the location is NOT "a small building with a well in the 
/ middle of the only room" (0x0e)
0x08f3 (0x10d3): (0x19) If var[0x05] != (constant) 0x0e then Goto 0x0904

/ Object is in the player's inventory or it's in the small building

/ Set the score increment to 10
0x08f7 (0x10d7): (0x08) Set var[0x32] = (constant) 0x0a

/ Branch if the object id is less than 0x1e and only use the 10 point increment
0x08fa (0x10da): (0x1a) If var[0x04] < (constant) 0x1e then Goto 0x0901

/ Object is one of the following so increase the score increment to 50
/ 1e - orb
/ 1f - sceptre
/ 20 - crown
0x08fe (0x10de): (0x08) Set var[0x32] = (constant) 0x32

/ Add the increment - either 10 if the object id is less than 0x1e i.e.
/ 0x08 - Gold nugget
/ 0x09 - Silver bars
/ 0x0a - jewelry
/ 0x0b - diamonds 
/ 0x0d - platinum
/ 0x0e - emerald
/ 0x0f - eggs 
/ 0x11 - vase
/ 0x12 - trident
/ 0x13 - pearl
/ 0x15 - coins
/ 0x16 - chain 
/ 0x17 - rug
/ 0x18 - treasure chest
/ 0x19 - spices
/ 
/ OR add 50 if the object id is:
/ 1e - orb
/ 1f - sceptre
/ 20 - crown
0x0901 (0x10e1): (0x0a) Set var[0x1c] += var[0x32]

/ Move to the next object id
0x0904 (0x10e4): (0x0a) Set var[0x04] += var[0x01]

/ Keep looping through the objects until all are processed 
0x0907 (0x10e7): (0x1a) If var[0x04] < (constant) 0x21 then Goto 0x08d4

/ Set the score increment to 100 (0x64)
0x090b (0x10eb): (0x08) Set var[0x32] = (constant) 0x64

/ Skip ahead if the player did NOT drop the elixir to regenerate the elves
/ from the skeletons (0x00)
/ var[0x06] is the constant 0x00
0x090e (0x10ee): (0x10) If var[0x28] == var[0x06] then Goto 0x0915

/ Add 100 as the player did drop the elixir to regenerate the elves
/ from the skeletons
0x0912 (0x10f2): (0x0a) Set var[0x1c] += var[0x32]

/ Skip ahead if the player did NOT unchain the first set of elves (0x00)
/ var[0x06] is the constant 0x00
0x0915 (0x10f5): (0x10) If var[0x2c] == var[0x06] then Goto 0x091c

/ Add 100 as the player did unchain the first set of elves
0x0919 (0x10f9): (0x0a) Set var[0x1c] += var[0x32]

/ Skip ahead if the player did NOT unchain the second set of elves (0x00)
/ var[0x06] is the constant 0x00
0x091c (0x10fc): (0x10) If var[0x2d] == var[0x06] then Goto 0x0923

/ Add 100 as the player did unchain the second set of elves
0x0920 (0x1100): (0x0a) Set var[0x1c] += var[0x32]

/ Skip ahead if the player did not complete the game (escape from the cave)
0x0923 (0x1103): (0x10) If var[0x24] == var[0x06] then Goto 0x092a

/ Add 100 as the player did complete the game
0x0927 (0x1107): (0x0a) Set var[0x1c] += var[0x32]

/ Determine the message to print based on the score
0x092a (0x110a): (0x01) Gosub 0x0eba

/ Scoring complete
0x092d (0x110d): (0x02) Return

**************************************************************************
* Command: quit/stop
**************************************************************************

/ Print message  "Do you really want to stop?\n "
0x092e (0x110e): (0x05) Print message (constant) 0x53

/ Get the player's response to the question
0x0930 (0x1110): (0x07) Input - results in word1 var[0x13], word2 var[0x14], word3 var[0x15], count var[0x16]

/ Parse the response and put the outcome into var[0x1c]
0x0935 (0x1115): (0x01) Gosub 0x0c41

/ Branch if the reponse was not understood (0x02)
/ var[0x02] is the constant 0x02
0x0938 (0x1118): (0x10) If var[0x1c] == var[0x02] then Goto 0x0930

/ Branch if the reponse was no (0x00)
/ var[0x06] is the constant 0x00
0x093c (0x111c): (0x10) If var[0x1c] == var[0x06] then Goto 0x017d

/ Response was yes (0x01)

/ Set the "player is quitting" (0x01) status 
0x0941 (0x1121): (0x09) Set var[0x30] = var[0x01]

/ Print the score and ask if they want another game
0x0944 (0x1124): (0x00) Goto 0x0213

**************************************************************************
* Command: plugh
**************************************************************************

/ Check to see if the dynamite explodes and kills the player 
/ (typing these commands explodes the dynamite if the player is in the
/ north-west or south-east part of the vast hall)
0x0947 (0x1127): (0x01) Gosub 0x0ef8

/ Branch if the end game has started (initiated by the player picking up the
/ glistening pearl). Plugh no longer works after the end game starts
/ var[0x06] is the constant 0x00
0x094a (0x112a): (0x13) If var[0x1a] > var[0x06] then Goto 0x0961

/ Branch if the player's current location is NOT "in a small building
/ with a well in the middle of the only room" (0x0e) 
0x094e (0x112e): (0x19) If var[0x0d] != (constant) 0x0e then Goto 0x0958

/ Player is "in a small building with a well in 
/ the middle of the only room" (0x0e)

/ Set the player's location to "in a huge room....
/ 'Y2' is carved on a rock in the very centre of the room" (0x37)
0x0952 (0x1132): (0x08) Set var[0x0d] = (constant) 0x37

/ Check to see if it's light / dark in the new location and print a 
/ description or "it's dark"
0x0955 (0x1135): (0x00) Goto 0x03ed

**************************************************************************

/ Branch if the player's current location  is NOT "in a huge room....
/ 'Y2' is carved on a rock in the very centre of the room" (0x37)
/ and say nothing happens
0x0958 (0x1138): (0x19) If var[0x0d] != (constant) 0x37 then Goto 0x0961

/ Player's current location IS  "in a huge room....
/ 'Y2' is carved on a rock in the very centre of the room" (0x37)

/ Set the player's current location to "in a small building with a well in 
/ the middle of the only room" (0x0e)
0x095c (0x113c): (0x08) Set var[0x0d] = (constant) 0x0e

/ Describe the new location
0x095f (0x113f): (0x00) Goto 0x0955

**************************************************************************
* Generic "nothing happens" message called from a few places
**************************************************************************

/ Print message  "Nothing happens "
0x0961 (0x1141): (0x05) Print message (constant) 0x17

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0963 (0x1143): (0x00) Goto 0x017d

**************************************************************************
* Command: xyzzy
**************************************************************************

/ Check to see if the dynamite explodes and kills the player 
/ (typing these commands explodes the dynamite if the player is in the
/ north-west or south-east part of the vast hall)
0x0966 (0x1146): (0x01) Gosub 0x0ef8

/ Branch if the end game has started (initiated by the player picking up the
/ glistening pearl). Xyzzy no longer works after the end game starts
/ var[0x06] is the constant 0x00
0x0969 (0x1149): (0x13) If var[0x1a] > var[0x06] then Goto 0x0961

/ Branch if the player's current location is NOT "in a small building with a well in 
/ the middle of the only room" (0x0e)
0x096d (0x114d): (0x19) If var[0x0d] != (constant) 0x0e then Goto 0x0976

/ Player's current location IS "in a small building with a well in 
/ the middle of the only room" (0x0e) so the magic word will work

/ Set the player's current location to "a room filled with debris ...
/ XYZZY' is scratched on the wall" (0x1c)
0x0971 (0x1151): (0x08) Set var[0x0d] = (constant) 0x1c

/ Describe the new location
0x0974 (0x1154): (0x00) Goto 0x0955

**************************************************************************

/ Branch if the player's current location is NOT  "a room filled with debris ...
/ XYZZY' is scratched on the wall" (0x1c)
0x0976 (0x1156): (0x19) If var[0x0d] != (constant) 0x1c then Goto 0x0961

/ Player's current location IS "a room filled with debris ...
/ XYZZY' is scratched on the wall" (0x1c)

/ Set the player's current location to "in a small building with a well in 
/ the middle of the only room" (0x0e)
0x097a (0x115a): (0x08) Set var[0x0d] = (constant) 0x0e

/ Describe the new location
0x097d (0x115d): (0x00) Goto 0x0955

**************************************************************************
* Command: plover
**************************************************************************

/ Check to see if the dynamite explodes and kills the player 
/ (typing these commands explodes the dynamite if the player is in the
/ north-west or south-east part of the vast hall)
0x097f (0x115f): (0x01) Gosub 0x0ef8

/ Branch if the end game has started (initiated by the player picking up the
/ glistening pearl). Plover no longer works after the end game starts
/ var[0x06] is the constant 0x00
0x0982 (0x1162): (0x13) If var[0x1a] > var[0x06] then Goto 0x0961

/ Endgame has not started 

/ Cache the player's current location
0x0986 (0x1166): (0x09) Set var[0x18] = var[0x0d]

/ Branch if the player's current location is NOT  "in a huge room....
/ 'Y2' is carved on a rock in the very centre of the room" (0x37)
0x0989 (0x1169): (0x19) If var[0x0d] != (constant) 0x37 then Goto 0x0992

/ Set the player's current location to "in the Plover room" (0x12)
0x098d (0x116d): (0x08) Set var[0x0d] = (constant) 0x12

/ Move non-treasures to the inventory, and all treasures to 
/ the Y2 room(current location) apart from the pyramid,
/ that's allowed to be transported
0x0990 (0x1170): (0x00) Goto 0x0999

**************************************************************************

/ Branch if the player's current location is NOT "in the Plover room" (0x12)
/ and print "nothing happens"
0x0992 (0x1172): (0x19) If var[0x0d] != (constant) 0x12 then Goto 0x0961

/ Player's current location IS "in the Plover room" (0x12)

/ Set the player's current location to "in a huge room....
/ 'Y2' is carved on a rock in the very centre of the room" (0x37)
0x0996 (0x1176): (0x08) Set var[0x0d] = (constant) 0x37

/ Set the location to move the non-treasure items to to the inventory (0xff)
/ var[0x03] is the constant 0xff
0x0999 (0x1179): (0x09) Set var[0x17] = var[0x03]

/ Cache the current location of the pyramid
0x099c (0x117c): (0xc3) Set var[0x2b] = list#3[0x0d]

/ var[0x18] has been set here to the plover room on the huge room with passages
/ only non-treasure items and the platinu pyramid treasure will move with "plover"
/ Count the treasure, non-treasure and total number of items in the player's inventory
/ and move the items to the locations specified above
0x099f (0x117f): (0x01) Gosub 0x09b3

/ Reset the location of the pyramid to where it was, in the player's inventory
/ or wherever dropped
0x09a1 (0x1181): (0x83) Set list#3[0x0d] = var[0x2b]

/ Describe the new location
0x09a4 (0x1184): (0x00) Goto 0x0955

**************************************************************************
* Never executed - set the constants
**************************************************************************

0x09a6 (0x1186): (0x08) Set var[0x01] = (constant) 0x01
0x09a9 (0x1189): (0x08) Set var[0x02] = (constant) 0x02
0x09ac (0x118c): (0x08) Set var[0x03] = (constant) 0xff
0x09af (0x118f): (0x08) Set var[0x06] = (constant) 0x00
0x09b2 (0x1192): (0x02) Return

**************************************************************************
* Move treasures and non-treasure and count the treasures and non-treasures
* and set the number of items in the inventory. This is used for e.g. the pirate
* stealing the player's treasures, resurrection moving the items to the same
* location
*
* On entry: 
* var[0x17] contains the location id to set for non-treasures
* var[0x18] contains the location id to set for treasures
*
* On exit:
* var[0x19] contains the count of treasure items processed (may or may not now
*           be in the player's inventory depending on value of var[0x18])
* var[0x33] contains the count of non-treasure items processed (may or may now
*           be in the player's inventory depending on value of var[0x18])
* var[0x21] total objects procesed that were originally in the player's inventory.
*           Useful for e.g. counting total items in the inventory - nothing will
*           change if var[0x17/18] are both set to 0xff (the location id for the inventory)
**************************************************************************

/ Set to the first object id (0x01) the keys
/ var[0x01] is the constant 0x01
0x09b3 (0x1193): (0x09) Set var[0x04] = var[0x01]

/ Set the count of treasure objects to zero
0x09b6 (0x1196): (0x09) Set var[0x19] = var[0x06]

/ Set the count of non treasure objects to zero
0x09b9 (0x1199): (0x09) Set var[0x33] = var[0x06]

/ Branch if the object is the bird (0x07) and skip this object (doesn't count
/ as an inventory item as the only way the player has it is when it's in the cage)
0x09bc (0x119c): (0x18) If var[0x04] == (constant) 0x07 then Goto 0x09dc

/ Object is NOT the bird 

/ Get the current location of the object
0x09c0 (0x11a0): (0xa3) Set var[0x05] = list#3[var[0x04]] (list address 0x0860)

/ Branch if the location is NOT in the inventory (0xff) to move to the next object
/ and run these checks again on the next object
/ var[0x03] is the constant 0xff
0x09c3 (0x11a3): (0x11) If var[0x05] != var[0x03] then Goto 0x09dc

/ Object IS in the inventory (0xff)

/ Set the temporary variable to see if the object is a treasure
0x09c7 (0x11a7): (0xa4) Set var[0x05] = list#4[var[0x04]] (list address 0x07b5)

/ Branch if the object is NOT a treasure (0x00)
/ var[0x06] is the constant 0x00
0x09ca (0x11aa): (0x10) If var[0x05] == var[0x06] then Goto 0x09d6

/ Object is a treasure (0x01) - add it to the count of treasure items
0x09ce (0x11ae): (0x0a) Set var[0x19] += var[0x01]

/ Set the current location of the treasure object to location id passed in var[0x18]
0x09d1 (0x11b1): (0xe3) Set list#3[var[0x04]] = var[0x18] (list address 0x0860)

/ Move to the next object id
0x09d4 (0x11b4): (0x00) Goto 0x09dc

**************************************************************************

/ Object is NOT a treasure (0x00) - add it to the count of non-treasure items
0x09d6 (0x11b6): (0x0a) Set var[0x33] += var[0x01]

/ Set the current location of the non-treasure object to location id passed in var[0x17]
0x09d9 (0x11b9): (0xe3) Set list#3[var[0x04]] = var[0x17] (list address 0x0860)

/ Move to the next object id
0x09dc (0x11bc): (0x0a) Set var[0x04] += var[0x01]

/ If there are still objects (that a player can carry) to process
/ loop back around and check them
0x09df (0x11bf): (0x1a) If var[0x04] < (constant) 0x21 then Goto 0x09bc

/ Add the count of treasure items to the inventory count
0x09e3 (0x11c3): (0x09) Set var[0x21] = var[0x19]

/ Add the count of non treasure items to the inventory count
0x09e6 (0x11c6): (0x0a) Set var[0x21] += var[0x33]

/ Finished
0x09e9 (0x11c9): (0x02) Return

**************************************************************************
* Check to see if it's light and dark in the current and target locations
* On entry:
*    var[0x0d] contains the current location
*    var[0x17] contains the target location
* On exit:
*    var[0x1e] contains the light (0x01) or dark (0x00) status of the current location
*    var[0x1f] contains the light (0x01) or dark (0x00) status of the target location
**************************************************************************

/ Set the temporary variable to the player's current location
0x09ea (0x11ca): (0x09) Set var[0x18] = var[0x0d]

/ Check to see if the player is in a light or dark location. If dark,
/ check to see if they have the pentacle or lamp which both provide light. 
/ If they have both the lamp must be off for there to be light. 
/ On call:
/    var[0x18] holds the player's current location
/ On exit:
/    var[0x34] holds the if it's light (0x01) or dark (0x00) status
0x09ed (0x11cd): (0x01) Gosub 0x09fb

/ Cache the result of if the current location is light or dark
0x09ef (0x11cf): (0x09) Set var[0x1e] = var[0x34]

/ Set the temporary variable to the target location where the player 
/ is trying to move to
0x09f2 (0x11d2): (0x09) Set var[0x18] = var[0x17]

/ Check to see if the player's target location is light or dark. If dark,
/ check to see if they have the pentacle or lamp which both provide light. 
/ If they have both the lamp must be off for there to be light. 
/ On call:
/    var[0x18] holds the player's target location
/ On exit:
/    var[0x34] holds the if it's light (0x01) or dark (0x00) status
0x09f5 (0x11d5): (0x01) Gosub 0x09fb

/ Cache the result of if the target location is light or dark
0x09f7 (0x11d7): (0x09) Set var[0x1f] = var[0x34]

0x09fa (0x11da): (0x02) Return

**************************************************************************
* Check to see if it's light and dark in the current and target locations
* Does this by:
* 1. Seeing if it's outside location
* 2. Seeing if the player has the lamp in their inventory or in the location
*    and checking the lamp is switched on 
* 3. Seeing if the player has the pentacle in their inventory (has to be in the inv)
*
* On entry:
*    var[0x18] contains the player's current or target location
* On exit:
*    var[0x34] contains the light (0x01) or dark (0x00) status of the current or target location
**************************************************************************

/ Light locations: 0x01 - 0x19,              0xa6 - 0xa8,             0xe2 - 0xe3
/ Dark locations:               0x1a - 0xa5,              0xa9 - 0xe1

/ Branch if the location is outside i.e. before "in a room with matt black walls. 
/ A plaque reads 'Congratulations on bringing light to the dark room!'."
/ (0x1a)
/ Branch if so as it's light
0x09fb (0x11db): (0x1a) If var[0x18] < (constant) 0x1a then Goto 0x0a25

/ Branch if the location is outside i.e. after "at a dead end" (0xe1)
0x09ff (0x11df): (0x1b) If var[0x18] > (constant) 0xe1 then Goto 0x0a25

/ Branch if the location is between "in a room with matt black walls. 
/ A plaque reads 'Congratulations on bringing light to the dark room!'."
/ (0x1a) and "on a steep hillside rising up through the wood" (0xa6)
/ Branch if so as it's dark so needs a lamp/light check
0x0a03 (0x11e3): (0x1a) If var[0x18] < (constant) 0xa6 then Goto 0x0a0b

/ Branch if the location is outside between "on a steep hillside rising up
/ through the wood" (0xa6) and "The trees thin out and an unclimable 
/ spire of polished rock"
/ Branch if so as it's light
0x0a07 (0x11e7): (0x1a) If var[0x18] < (constant) 0xa9 then Goto 0x0a25

/ It's dark

/ Get the location of the lamp (0x02)
0x0a0b (0x11eb): (0xa3) Set var[0x34] = list#3[var[0x02]] (list address 0x0860)

/ Branch if the lamp is in the player's inventory (0xff)    
/ var[0x03] is the constant 0xff
0x0a0e (0x11ee): (0x10) If var[0x34] == var[0x03] then Goto 0x0a21

/ Branch if the lamp is in the player's current or target location 
0x0a12 (0x11f2): (0x10) If var[0x34] == var[0x18] then Goto 0x0a21

/ Get the location of the pentacle (0x1c)
0x0a16 (0x11f6): (0xc3) Set var[0x34] = list#3[0x1c]

/ Branch if the pentacle (0x1c) IS in the player's inventory (0xff)
0x0a19 (0x11f9): (0x10) If var[0x34] == var[0x03] then Goto 0x0a2c

/ Pentacle is not in the inventory

/ Set the location daylight status to dark (0x00)
/ var[0x06] is the constant 0x00
0x0a1d (0x11fd): (0x09) Set var[0x34] = var[0x06]

/ Return the daylight status
0x0a20 (0x1200): (0x02) Return

**************************************************************************

/ Branch if the lamp is switched off (0x00) and check the pentacle
/ var[0x06] is the constant 0x00
0x0a21 (0x1201): (0x10) If var[0x2e] == var[0x06] then Goto 0x0a16

/ Get the location of the pentacle (0x1c)
0x0a25 (0x1205): (0xc3) Set var[0x34] = list#3[0x1c]

/ Branch if the pentacle is in the player's inventory (0xff)
/ var[0x03] is the constant 0xff
0x0a28 (0x1208): (0x10) If var[0x34] == var[0x03] then Goto 0x0a1d

/ Set the location daylight status to light (0x01)
0x0a2c (0x120c): (0x09) Set var[0x34] = var[0x01]

/ Return the daylight status
0x0a2f (0x120f): (0x02) Return

**************************************************************************
* Set objects to seen or discovered if they are in the player's current location
* Only called from 0x0466
**************************************************************************

/ Get the current location of the object
0x0a30 (0x1210): (0xa3) Set var[0x17] = list#3[var[0x04]] (list address 0x0860)

/ Branch if the object IS in the player's currenct location
0x0a33 (0x1213): (0x10) If var[0x17] == var[0x18] then Goto 0x0a38

/ Object is NOT in the player's current location so don't need to mark
/ it as discovered/seen
0x0a37 (0x1217): (0x02) Return

/ Set the object status to discovered (0x01) in the list
0x0a38 (0x1218): (0xe5) Set list#5[var[0x04]] = var[0x01] (list address 0x08b0)

/ Branch if the bird is free (0x00) and not in the cage
/ var[0x06] is the constant 0x00
0x0a3b (0x121b): (0x10) If var[0x29] == var[0x06] then Goto 0x0a56

/ Branch if the current object is the bird (0x07)
0x0a3f (0x121f): (0x18) If var[0x04] == (constant) 0x07 then Goto 0x0a48

/ Branch if the current object is NOT the cage (0x05)
0x0a43 (0x1223): (0x19) If var[0x04] != (constant) 0x05 then Goto 0x0a56

/ Object is the cage 

/ Done
0x0a47 (0x1227): (0x02) Return

**************************************************************************
* Object above was the bird (0x0a48) - get the right description
**************************************************************************

/ Set the description message to "There is a caged bird here" (0x277)
0x0a48 (0x1228): (0x08) Set var[0x27] = (constant) 0x277

/ Branch if the location of the cage is NOT in the player's inventory (0xff)
/ var[0x03] is the constant 0xff
0x0a4c (0x122c): (0x11) If var[0x18] != var[0x03] then Goto 0x0a54

/ Change the description message to "a bird in a gilded cage" (0x276)
0x0a50 (0x1230): (0x08) Set var[0x27] = (constant) 0x276

/ Print the description message
0x0a54 (0x1234): (0x00) Goto 0x0aad

**************************************************************************
* Object above was NOT the cage (0x0a43)
* Determine the bear description
**************************************************************************

/ Branch if the object is NOT the bear (0x0c)
0x0a56 (0x1236): (0x19) If var[0x04] != (constant) 0x0c then Goto 0x0a67

/ Object is the bear (0x0c)

/ Branch if the bear is fed and released from chains (0x00)
/ var[0x06] is the constant 0x00
0x0a5a (0x123a): (0x10) If var[0x08] == var[0x06] then Goto 0x0a9e

/ Set the description message to a base message id 
/ 0x278 is never printed here - the bear's non-zero state is added
/ to get to the right message 
0x0a5e (0x123e): (0x08) Set var[0x27] = (constant) 0x278

/ Add the bear's state to the message id - it'll either be 0x01 or 0x02
/ to get to:
/ 0x279 - A chained bear lies peacefully on the ground
/ 0x27a - A bear strains at its chain, trying to get at you
0x0a62 (0x1242): (0x0a) Set var[0x27] += var[0x08]

/ Print the description message
0x0a65 (0x1245): (0x00) Goto 0x0aad

**************************************************************************
* Determine the vase description if outside of the inventory
**************************************************************************

/ Branch if the object IS the vase (0x11)
0x0a67 (0x1247): (0x18) If var[0x04] == (constant) 0x11 then Goto 0x0a71

/ Branch if the object IS the pillow/cushion (0x10)
0x0a6b (0x124b): (0x18) If var[0x04] == (constant) 0x10 then Goto 0x0a71

/ Jump over the vase / cushion descriptive messasge processing
0x0a6f (0x124f): (0x00) Goto 0x0a89

/ Get the current location of the vase (0x11)
0x0a71 (0x1251): (0xc3) Set var[0x05] = list#3[0x11]

/ Get the current location of the cushion (0x10)
0x0a74 (0x1254): (0xc3) Set var[0x32] = list#3[0x10]

/ Branch if the vase and the cushion are NOT in the same location
0x0a77 (0x1257): (0x11) If var[0x05] != var[0x32] then Goto 0x0a9e

/ Vase and cushion are in the same location 

/ Branch if the vase is in the player's inventory (0x03)
/ var[0x03] is the constant 0xff
0x0a7b (0x125b): (0x10) If var[0x05] == var[0x03] then Goto 0x0a9e

/ Branch if the object IS the cushion - don't print a description
0x0a7f (0x125f): (0x18) If var[0x04] == (constant) 0x10 then Goto 0x0ab1

/ Vase and cushion are in the same location and NOT in the player's inventory

/ Set the descriptive message to "A ming vase rests gently 
/ on a patchwork pillow" (0x27b) 
0x0a83 (0x1263): (0x08) Set var[0x27] = (constant) 0x27b

/ Print the description message
0x0a87 (0x1267): (0x00) Goto 0x0aad

**************************************************************************
* Determine the bottle description
**************************************************************************

/ Branch if the object is NOT the bottle (0x04)
0x0a89 (0x1269): (0x19) If var[0x04] != (constant) 0x04 then Goto 0x0a9e

/ Set the descriptive message to "an empty bottle" (0x27c)
0x0a8d (0x126d): (0x08) Set var[0x27] = (constant) 0x27c

/ Branch if the vase is in the player's inventory (0x03)
/ var[0x03] is the constant 0xff
0x0a91 (0x1271): (0x10) If var[0x17] == var[0x03] then Goto 0x0a99

/ Bottle is NOT in the player's inventory

/ Set the base message id to 0x27f - bottle state is added 
/ to this to get to the right message. Empty (+0), water (+1)
/ oil (+2)
0x0a95 (0x1275): (0x08) Set var[0x27] = (constant) 0x27f

/ Add the bottle state to get to one of the following messages:
/
/ If in the inventory:
/ 0x27c - an empty bottle
/ 0x27d - a bottle of water
/ 0x27e - a bottle of oil
/
/ If NOT in the inventory:
/ 0x27f - There is an empty bottle here
/ 0x280 - There is a bottle of water here
/ 0x281 - There is a bottle of oil here
0x0a99 (0x1279): (0x0a) Set var[0x27] += var[0x2f]

/ Print the description message
0x0a9c (0x127c): (0x00) Goto 0x0aad

**************************************************************************
* Determine the message for a plain old object
**************************************************************************

/ Sets the base message id for either in inventory or out of inventory
/ and adds the object id to get to the right message description

/ Set the base message id for an object's description when in the inventory
0x0a9e (0x127e): (0x08) Set var[0x27] = (constant) 0x226

/ Branch if the object is in the player's inventory - this is the right
/ base message id
0x0aa2 (0x1282): (0x10) If var[0x18] == var[0x03] then Goto 0x0aaa

/ Object is NOT in the inventory 

/ Set the base message id for the object's description when NOT in the inventory
0x0aa6 (0x1286): (0x08) Set var[0x27] = (constant) 0x249

/ Add the object id to the base message id to get the right description
/ This is done for objects in the inventory and NOT in the inventory
0x0aaa (0x128a): (0x0a) Set var[0x27] += var[0x04]

**************************************************************************
* Print the description message (called from multiple places not just a 
* continuation of above)
**************************************************************************

/ Print the description message 
0x0aad (0x128d): (0x04) Print message var[0x27]

/ Print message  "\n "
0x0aaf (0x128f): (0x05) Print message (constant) 0x0c

/ Message printed
0x0ab1 (0x1291): (0x02) Return

**************************************************************************
* Check if the object is in the player's inventory
**************************************************************************

/ Get the location of the object in var[0x2b]
0x0ab2 (0x1292): (0xa3) Set var[0x35] = list#3[var[0x2b]] (list address 0x0860)

/ Branch if the object is NOT in the player's inventory (0xff) and print
/ "you don't have it" and don't return
/ var[0x03] is the constant 0xff
0x0ab5 (0x1295): (0x11) If var[0x35] != var[0x03] then Goto 0x01c5

/ Object is in the player's inventory
0x0aba (0x129a): (0x02) Return

**************************************************************************
* Command: feed
**************************************************************************

/ Get the current location of the sandwiches / food (0x03)
0x0abb (0x129b): (0xc3) Set var[0x04] = list#3[0x03]

/ Branch if the sandwiches / food are in the player's inventory (0xff)
/ var[0x03] is the constant 0xff
0x0abe (0x129e): (0x10) If var[0x04] == var[0x03] then Goto 0x0ac7

/ Sandwiches are NOT in the player's inventory

/ Print message  "You have none "
0x0ac2 (0x12a2): (0x05) Print message (constant) 0x47

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0ac4 (0x12a4): (0x00) Goto 0x017d

/ Sandwiches ARE in the player's inventory

/ Branch if the second word is the dragon (0x48)
0x0ac7 (0x12a7): (0x18) If var[0x14] == (constant) 0x48 then Goto 0x0adf

/ Branch if the second word is the snake (0x49)
0x0acb (0x12ab): (0x18) If var[0x14] == (constant) 0x49 then Goto 0x0af1

/ Branch if the second word is the bird (0x2a)
0x0acf (0x12af): (0x18) If var[0x14] == (constant) 0x2a then Goto 0x0afb

/ Branch if the second word is the bear (0x2f)
0x0ad3 (0x12b3): (0x18) If var[0x14] == (constant) 0x2f then Goto 0x0b08

/ Branch if the second word is NOT empty (0x00)
/ var[0x06] is the constant 0x00
0x0ad7 (0x12b7): (0x11) If var[0x14] != var[0x06] then Goto 0x01b9

/ Print "I don't understand"
0x0adc (0x12bc): (0x00) Goto 0x01b5

**************************************************************************
* Process feeding the dragon
**************************************************************************

/ Check the "door" status at the "junction between the south end
/ of a secret north-south canyon and the west end of a secret east-west canyon" (0x44)
/ Really it's the dragon blocking the player but it's treated like an invisible / virtual door
/ that gets opened once the dragon has been killed
0x0adf (0x12bf): (0xc1) Set var[0x04] = list#1[0x44]

/ Branch if the current location is NOT the "junction between the south end
/ of a secret north-south canyon and the west end of a secret east-west canyon" (0x44)
/ where the dragon resides
0x0ae2 (0x12c2): (0x19) If var[0x0d] != (constant) 0x44 then Goto 0x01c1

/ Player IS at the "junction between the south end of a secret north-south 
/ canyon and the west end of a secret east-west canyon" (0x44)

/ Branch if the dragon has been killed (player can move in the direction)
/ (It actually checks if the virutal door is open) and print
/ "You can't see it"
/ Also used to check if the snake is dead (calls back here)
/ var[0x01] is the constant 0x01
0x0ae7 (0x12c7): (0x10) If var[0x04] == var[0x01] then Goto 0x01c1

/ Dragon is still alive (virtual door is closed 0x00)

/ Print message  "Its a carnivore, so there's nothing here that it wants to
/ eat (except you of course) "
0x0aec (0x12cc): (0x05) Print message (constant) 0x25

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0aee (0x12ce): (0x00) Goto 0x017d
**************************************************************************
* Process feeding the snake
**************************************************************************

/ Check the "door" status "in the Hall of the Mountain King" (0x34)
/ Really it's the snake blocking the player but it's treated like an invisible / virtual door
/ that gets opened once the snake has been killed
0x0af1 (0x12d1): (0xc1) Set var[0x04] = list#1[0x34]

/ Branch if the player is NOT "in the Hall of the Mountain King"
0x0af4 (0x12d4): (0x19) If var[0x0d] != (constant) 0x34 then Goto 0x01c1

/ Player IS "in the Hall of the Mountain King"

/ Check if the snake is dead and print an appropriate message
0x0af9 (0x12d9): (0x00) Goto 0x0ae7

**************************************************************************
* Process feeding the bird
**************************************************************************

/ Check the "door" status "in the Hall of the Mountain King" (0x34)
/ Really it's the snake blocking the player but it's treated like an invisible / virtual door
/ that gets opened once the snake has been killed

/ Get the location of the bird (0x07)
0x0afb (0x12db): (0xc3) Set var[0x04] = list#3[0x07]

/ Branch if the bird is NOT in the player's current location 
0x0afe (0x12de): (0x11) If var[0x04] != var[0x0d] then Goto 0x01c1

/ Print message  "It's not hungry, just pining for the fjords "
0x0b03 (0x12e3): (0x05) Print message (constant) 0x1b

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0b05 (0x12e5): (0x00) Goto 0x017d

**************************************************************************
* Process feeding the bear - right place to use the sandwiches
**************************************************************************

/ Branch if the player's current location is NOT "inside the bear room" (0x28)
/ and print "you can't see it"
0x0b08 (0x12e8): (0x19) If var[0x0d] != (constant) 0x28 then Goto 0x01c1

/ Remove the sandwiches from the game by setting the location to 0x00
/ var[0x06] is the constant 0x00
0x0b0d (0x12ed): (0x83) Set list#3[0x03] = var[0x06]

/ Set the status of the bear to "fed but still in chains" (0x01)
0x0b10 (0x12f0): (0x09) Set var[0x08] = var[0x01]

/ Print message  "The bear gobbles the food hungrily, and licks your face in thanks. It seems quite placid "
0x0b13 (0x12f3): (0x05) Print message (constant) 0x54

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0b15 (0x12f5): (0x00) Goto 0x017d

**************************************************************************
* Command: wave/shake
**************************************************************************

/ Branch if the second word IS the rod (0x29)
0x0b18 (0x12f8): (0x18) If var[0x14] == (constant) 0x29 then Goto 0x0b2e

/ Branch if the second word is NOT provided and print "please be more specific"
0x0b1c (0x12fc): (0x11) If var[0x14] != var[0x06] then Goto 0x01b9

/ Branch if the player's location IS on  "at a window overlooking 
/ a huge canyon" (0x38)
0x0b21 (0x1301): (0x18) If var[0x0d] == (constant) 0x38 then Goto 0x0b73

/ Branch if the player's location IS "at a window overlooking 
/ a huge canyon" on the opposite side to the one above (0x38)
0x0b25 (0x1305): (0x18) If var[0x0d] == (constant) 0x6c then Goto 0x0b73

/ Print message  "Nothing happens "
0x0b29 (0x1309): (0x05) Print message (constant) 0x17

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0b2b (0x130b): (0x00) Goto 0x017d

**************************************************************************
* Process waving the rod
**************************************************************************

/ Set the item to check to the rod (0x06)
0x0b2e (0x130e): (0x08) Set var[0x2b] = (constant) 0x06

/ Check if the object is in the player's inventory (won't return if it's not)
0x0b31 (0x1311): (0x01) Gosub 0x0ab2

/ Branch if the player IS "on the east bank of a wide fissure
/ which cuts completely across the dungeon walkway" (0xc3)
0x0b33 (0x1313): (0x18) If var[0x0d] == (constant) 0xc3 then Goto 0x0b5f

/ Branch if the player IS "on the west bank of a wide fissure
/ which cuts completely across the dungeon walkway" (0xc5)
0x0b37 (0x1317): (0x18) If var[0x0d] == (constant) 0xc5 then Goto 0x0b5f

/ Branch if the player IS "on the east bank of a wide fissure slicing 
/ completely across the Hall of Mist" (0x3a)
0x0b3b (0x131b): (0x18) If var[0x0d] == (constant) 0x3a then Goto 0x0b43

/ Branch if the player IS "on the west bank of a wide fissure slicing 
/ completely across the Hall of Mist" (0x3b)
0x0b3f (0x131f): (0x19) If var[0x0d] != (constant) 0x3b then Goto 0x0b29

/ Check the "door" status "on the east bank of a wide fissure slicing 
/ completely across the Hall of Mist" (0x3a). The virtual door is open
/ when the crystal bridge is spanning the chasm
0x0b43 (0x1323): (0xc1) Set var[0x04] = list#1[0x3a]

/ Branch if the door status is closed (0x00) as the bridge already isn't there
/ var[0x06] is the constant 0x00
0x0b46 (0x1326): (0x10) If var[0x04] == var[0x06] then Goto 0x0b58

/ Door status is open (0x01) - bridge is there

/ Set the bridge as not there by setting the door status to closed (0x00)
/ var[0x06] is the constant 0x00
0x0b4a (0x132a): (0x09) Set var[0x04] = var[0x06]

/ Print message  "The bridge vanishes "
0x0b4d (0x132d): (0x05) Print message (constant) 0x1f

/ Set the door status to open (0x01) or closed (0x00) to indicate the bridge 
/ is there on not for "on the east bank of a wide fissure slicing 
/ completely across the Hall of Mist" (0x3a)
0x0b4f (0x132f): (0x81) Set list#1[0x3a] = var[0x04]

/ Set the door status to open (0x01) or closed (0x00) to indicate the bridge 
/ is there on not for "on the west bank of a wide fissure slicing 
/ completely across the Hall of Mist" (0x3b)
0x0b52 (0x1332): (0x81) Set list#1[0x3b] = var[0x04]

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0b55 (0x1335): (0x00) Goto 0x017d

**************************************************************************

/ Set the temporary variable to door open status (0x01)
0x0b58 (0x1338): (0x09) Set var[0x04] = var[0x01]

/ Print message  "Zingg! A crystal bridge appears spanning the chasm "
0x0b5b (0x133b): (0x05) Print message (constant) 0x1e

/ Set the door status to open (0x01) for both locations to indicate the 
/ crystal bridge is there
0x0b5d (0x133d): (0x00) Goto 0x0b4f

**************************************************************************

/ Player IS either "on the east bank of a wide fissure which cuts 
/ completely across the dungeon walkway" (0xc3) or
/ "on the west bank of a wide fissure which cuts completely
/  across the dungeon walkway" (0xc5)

/ Branch if the bridge is not spanning the chasm - weird check, why not 
/ use the status in list#1 rather than the presence of a supplementary message
/ NOTE it looks like var[0x27] was originally used as the status of this bridge
/ (but doesn't need to be given list#1) but changed to use this variable.  Unfortunately
/ this variable is used for general purpose message processing too so it'll never 
/ be 0x00
/ var[0x06] is the cnostant 0x00
0x0b5f (0x133f): (0x10) If var[0x27] == var[0x06] then Goto 0x0b6b

/ Set the status to "bridge is not there" 0x00 (this will get overwritten though
/ by a supplementary descriptive message id!)
/ Note - bug, will always be a positive message id later in the code so the 
/ bridge is always there
/ var[0x06] is the constant 0x00
0x0b63 (0x1343): (0x09) Set var[0x27] = var[0x06]

/ Print message  "The bridge vanishes "
0x0b66 (0x1346): (0x05) Print message (constant) 0x1f

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0b68 (0x1348): (0x00) Goto 0x017d

**************************************************************************

/ Set the status of the crystal bridge to spanning the "fissure... across
/ the dungeon walkway" 
/ Note - bug this will be overwritten by a message id shortly after
0x0b6b (0x134b): (0x09) Set var[0x27] = var[0x01]

/ Print message  "Zingg! A crystal bridge appears spanning the chasm "
0x0b6e (0x134e): (0x05) Print message (constant) 0x1e

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0b70 (0x1350): (0x00) Goto 0x017d

**************************************************************************

/ Player is looking across the canyon from one of the two windows and can 
/ see a shadowy figure

/ Print message  "The shadowy figure waves back "
0x0b73 (0x1353): (0x05) Print message (constant) 0x24

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0b75 (0x1355): (0x00) Goto 0x017d

**************************************************************************
* Command: shazam/sesame/hocus
**************************************************************************

/ Check to see if the dynamite explodes and kills the player 
/ (typing these commands explodes the dynamite if the player is in the
/ north-west or south-east part of the vast hall)
0x0b78 (0x1358): (0x01) Gosub 0x0ef8

/ Dynamite didn't explode

/ Print message  "Nothing happens "
0x0b7b (0x135b): (0x05) Print message (constant) 0x17

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0b7d (0x135d): (0x00) Goto 0x017d

**************************************************************************
* Command: break/smash
**************************************************************************

/ Check to see if the dynamite explodes and kills the player 
/ (typing these commands explodes the dynamite if the player is in the
/ north-west or south-east part of the vast hall)
0x0b80 (0x1360): (0x01) Gosub 0x0ef8

/ Branch if the second word is NOT the mirror (0x56) the print "Please be more specific"
0x0b83 (0x1363): (0x19) If var[0x14] != (constant) 0x56 then Goto 0x01b9

/ Print message  "You can't reach the mirror "
0x0b88 (0x1368): (0x05) Print message (constant) 0x55

/ TOOD
0x0b8a (0x136a): (0x00) Goto 0x017d

**************************************************************************
* Command: eat
**************************************************************************

/ Branch if the second word is NOT the sandwiches/food (dictionary id 0x26)
0x0b8d (0x136d): (0x19) If var[0x14] != (constant) 0x26 then Goto 0x01b9

/ Second word IS the sandwiches

/ Get the current location of the sandwiches/food (object id 0x03)
0x0b92 (0x1372): (0xc3) Set var[0x04] = list#3[0x03]

/ Branch if the sandwiches are NOT in the player's inventory (0xff)
/ and print "You have none "
/ var[0x03] is the constant 0xff
0x0b95 (0x1375): (0x11) If var[0x04] != var[0x03] then Goto 0x0ba8

/ Player has the sandwiches

/ Remove the sandwiches from the game by setting their location to 0x00
/ var[0x06] is the constant 0x00
0x0b99 (0x1379): (0x83) Set list#3[0x3] = var[0x06]

/ Print message  "That was just what you needed! "
0x0b9c (0x137c): (0x05) Print message (constant) 0x03

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0b9e (0x137e): (0x00) Goto 0x017d

**************************************************************************
* Command: drink
**************************************************************************

/ Get the location of the bottle (0x04)
0x0ba1 (0x1381): (0xc3) Set var[0x04] = list#3[0x04]

/ Branch if the bottle is in they player's inventory (0xff)
/ var[0x03] is the constant 0xff
0x0ba4 (0x1384): (0x10) If var[0x04] == var[0x03] then Goto 0x0bad

/ Bottle is NOT in the player's inventory

/ Print message  "You have none "
0x0ba8 (0x1388): (0x05) Print message (constant) 0x47

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0baa (0x138a): (0x00) Goto 0x017d

**************************************************************************

/ Bottle is int he player's inventory

/ Branch if the bottle is empty (0x00)
/ var[0x06] is the constant 0x00
0x0bad (0x138d): (0x10) If var[0x2f] == var[0x06] then Goto 0x0ba8

/ Branch if the bottle does NOT containe water (0x01)
/ var[0x01] is the constant 0x01
0x0bb1 (0x1391): (0x11) If var[0x2f] != var[0x01] then Goto 0x0bbe

/ Branch if the second word is NOT water (0x1d)
0x0bb5 (0x1395): (0x19) If var[0x14] != (constant) 0x1d then Goto 0x0ba8

/ Set the bottle to empty (0x00)
/ var[0x06] is the constant 0x00
0x0bb9 (0x1399): (0x09) Set var[0x2f] = var[0x06]

/ Print message  "That was just what you needed! "
0x0bbc (0x139c): (0x00) Goto 0x0b9c

**************************************************************************

/ Branch if the second word is NOT oil (0x1c) and print "you have none"
0x0bbe (0x139e): (0x19) If var[0x14] != (constant) 0x1c then Goto 0x0ba8

/ Player is trying to drink the oil

/ Print message  "Ugh! No thank you! "
0x0bc2 (0x13a2): (0x05) Print message (constant) 0x56

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0bc4 (0x13a4): (0x00) Goto 0x017d

**************************************************************************
* Command: fee/fie/foe/foo
**************************************************************************

/ Increment the next expected word in the sequence given a valid word was 
/ detected in the right sequence so far
0x0bc7 (0x13a7): (0x0a) Set var[0x36] += var[0x01]

/ Branch if the full sequence has not yet been entered
0x0bca (0x13aa): (0x1a) If var[0x36] < (constant) 0x04 then Goto 0x017d

/ Full sequence entered in the right order <any of the 4>, FIE, FOE, FOO
0x0bcf (0x13af): (0x09) Set var[0x36] = var[0x06]

/ Get the current location of the eggs (0x0f)
0x0bd2 (0x13b2): (0xc3) Set var[0x04] = list#3[0x0f]

/ Branch if the eggs are in the player's inventory (0xff)
/ var[0x03] is the constant 0xff 
0x0bd5 (0x13b5): (0x10) If var[0x04] == var[0x03] then Goto 0x0bdd

/ Branch if the eggs are NOT in the player's current location
0x0bd9 (0x13b9): (0x11) If var[0x04] != var[0x0d] then Goto 0x0be0

/ Eggs are in the player's inventory of current location

/ Print message  "The eggs vanish! "
0x0bdd (0x13bd): (0x05) Print message (constant) 0x287

/ Set the temporary variable to the "...in the Giant Room filled with enormous furniture" location
0x0be0 (0x13c0): (0x08) Set var[0x04] = (constant) 0x5f

/ Set the location of the eggs (0x0f) to "...in the Giant Room filled with enormous furniture"
0x0be3 (0x13c3): (0x83) Set list#3[0x0f] = var[0x4]

/ Branch if the player is NOT "in the Giant Room filled with enormous furniture" 
0x0be6 (0x13c6): (0x11) If var[0x04] != var[0x0d] then Goto 0x0bed

/ Print message  "The eggs reappear! "
0x0bea (0x13ca): (0x05) Print message (constant) 0x286

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0bed (0x13cd): (0x00) Goto 0x017d

**************************************************************************
* Command: give
**************************************************************************

/ Branch if the player's current location is " on the south west side of 
/ a chasm crossed by a rickety bridge" (0x5d), where the troll is
0x0bf0 (0x13d0): (0x18) If var[0x0d] == (constant) 0x5d then Goto 0x05d3

/ Branch if the player's current location is " on the north-east side of 
/ a deep chasm crossed by a rickety bridge" (0x5d), where the troll is   
0x0bf5 (0x13d5): (0x18) If var[0x0d] == (constant) 0x20 then Goto 0x05d3

/ No one to give anything to... (you have to feed bear)

/ Print message  "To whom? "
0x0bfa (0x13da): (0x05) Print message (constant) 0x57

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0bfc (0x13dc): (0x00) Goto 0x017d

**************************************************************************
* Process player trying to get the bird
**************************************************************************

/ Branch if the second word object id is NOT the bird (0x07)
0x0bff (0x13df): (0x19) If var[0x14] != (constant) 0x07 then Goto 0x0c1f

/ Get the location of the cage (0x05)
0x0c03 (0x13e3): (0xc3) Set var[0x04] = list#3[0x05]

/ Branch if the location of the cage is NOT in the player's inventory (0xff)
/ var[0x03] is the player's inventory
0x0c06 (0x13e6): (0x10) If var[0x04] == var[0x03] then Goto 0x0c0f

/ Print message  "You can almost catch the bird, but it keeps fluttering away just as you are about to close your hand on it "
0x0c0a (0x13ea): (0x05) Print message (constant) 0x18

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0c0c (0x13ec): (0x00) Goto 0x017d

**************************************************************************

/ Cage (0x05) is in the player's inventory

/ Get the location of the "black rod" (0x04)
0x0c0f (0x13ef): (0xc3) Set var[0x04] = list#3[0x06]

/ Branch if the black rod is in the player's inventory (0xff) as it panics the bird
/ var[0x03] is the constant 0xff
0x0c12 (0x13f2): (0x10) If var[0x04] == var[0x03] then Goto 0x0c1a

/ Black rod is NOT in the inventory

/ Set the bird's status to caged (0x01)
/ var[0x01] is the constant 0x01
0x0c16 (0x13f6): (0x09) Set var[0x29] = var[0x01]

/ Bird caged - return to allow it to be picked up
0x0c19 (0x13f9): (0x02) Return

**************************************************************************

/ Player had the black rod which scares the bird so cannot be caught

/ Print message  "When you entered the bird was singing happily. Now it flies away in total panic and flutters against the ceiling "
0x0c1a (0x13fa): (0x05) Print message (constant) 0x19

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0c1c (0x13fc): (0x00) Goto 0x017d

**************************************************************************
* Process player trying to get the bear
**************************************************************************

/ Branch if the second word object id is NOT the bear (0x0c)
0x0c1f (0x13ff): (0x19) If var[0x14] != (constant) 0x0c then Goto 0x0c35

/ Branch if the status of the bear is NOT unfed and still in chains (0x02)
/ var[0x02] is the constant 0x02
0x0c23 (0x1403): (0x11) If var[0x08] != var[0x02] then Goto 0x0c2c

/ Bear is unfed and in still in chains

/ Print message  "The bear snaps dangerously, forcing you to back away to the far side of the room "
0x0c27 (0x1407): (0x05) Print message (constant) 0x2f

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0c29 (0x1409): (0x00) Goto 0x017d

**************************************************************************

/ Branch if the status of the bear is NOT fed but still in chains (0x01)
/ var[0x01] is the constant 0x01
0x0c2c (0x140c): (0x11) If var[0x08] != var[0x01] then Goto 0x0c35

/ Bear cannot be taken, it's still chained

/ Print message  "The chain is locked "
0x0c30 (0x1410): (0x05) Print message (constant) 0x33

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0c32 (0x1412): (0x00) Goto 0x017d

**************************************************************************
* Process player trying to get the bird (continued)
**************************************************************************

/ Branch if the second word object id is NOT the cage (0x05)
0x0c35 (0x1415): (0x19) If var[0x14] != (constant) 0x05 then Goto 0x0c40

/ Branch if the status of the bird is free (0x00) and allow the cage to be 
/ taken by the player
/ var[0x06] is the constant 0x00
0x0c39 (0x1419): (0x10) If var[0x29] == var[0x06] then Goto 0x0c40

/ Bird is caged so it also needs to be added to the inventory

/ Set the location of the bird (0x07) to in the player's inventory (0xff)
/ var[0x03] is the constant 0xff
0x0c3d (0x141d): (0x83) Set list#3[0x07] = var[0x03]

/ Bird caged - return to allow it to be picked up
0x0c40 (0x1420): (0x02) Return

**************************************************************************
* Determine if the player said yes or no or a garbage response
**************************************************************************

/ Default the response to "no" (0x00)
/ var[0x06] is the constant 0x00
0x0c41 (0x1421): (0x09) Set var[0x1c] = var[0x06]

/ Print message  "\n "
0x0c44 (0x1424): (0x05) Print message (constant) 0x0c

/ Branch if the first word is yes/yeah/please (0x4b)
0x0c46 (0x1426): (0x18) If var[0x13] == (constant) 0x4b then Goto 0x0c58

/ Branch if the first word is no(n)/nein/niet (0x4c)
0x0c4a (0x142a): (0x18) If var[0x13] == (constant) 0x4c then Goto 0x0c5b

/ Branch if the first word is N(orth) (0x01) and treat it like "no"
0x0c4e (0x142e): (0x10) If var[0x13] == var[0x01] then Goto 0x0c5b

/ Print message  "I don't understand\n "
0x0c52 (0x1432): (0x05) Print message (constant) 0x05

/ Set the response to "not understood" (0x02)
/ var[0x02] is the constant 0x02
0x0c54 (0x1434): (0x09) Set var[0x1c] = var[0x02]

/ Return to allow the response to tbe processed
0x0c57 (0x1437): (0x02) Return

**************************************************************************

/ Set the response to "yes" (0x01)
/ var[0x01] is the constant 0x01
0x0c58 (0x1438): (0x09) Set var[0x1c] = var[0x01]

/ Return to allow the response to tbe processed
0x0c5b (0x143b): (0x02) Return

**************************************************************************
* Command: rub
**************************************************************************

/ Branch if the second word is NOT the lamp (0x25 dictionary id)
0x0c5c (0x143c): (0x19) If var[0x14] != (constant) 0x25 then Goto 0x01b9

/ Object is the lamp

/ Set the object to check if it's in the inventory to the lamp (object id 0x02)
0x0c61 (0x1441): (0x09) Set var[0x2b] = var[0x02]

/ Check if the lamp is in the player's inventory (won't return)
0x0c64 (0x1444): (0x01) Gosub 0x0ab2

/ Lamp is in the player's inventory

/ Print message  "Rubbing the electric lamp is unexciting. Anyway, 
/ nothing happens except that you polish the lamp to a fine finish "
0x0c67 (0x1447): (0x05) Print message (constant) 0x02

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0c69 (0x1449): (0x00) Goto 0x017d

**************************************************************************
* Command: detonate/blast
**************************************************************************

/ Branch if the end game has started (initiated by the player picking up the
/ glistening pearl). Cannot blast the dynamite until then
/ var[0x06] is the constant 0x00
0x0c6c (0x144c): (0x13) If var[0x1a] > var[0x06] then Goto 0x0c75

/ Print message  "Nothing happens "
0x0c70 (0x1450): (0x05) Print message (constant) 0x17

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0c72 (0x1452): (0x00) Goto 0x017d

**************************************************************************

/ Branch if the dynamite has already been blasted and print "nothing happens"
0x0c75 (0x1455): (0x10) If var[0x22] == var[0x01] then Goto 0x0c70

/ Give the player 0x14 (20) points for exploding the dynamite
0x0c79 (0x1459): (0x08) Set var[0x31] = (constant) 0x14

/ Print message  "The dynamite explodes. "
0x0c7c (0x145c): (0x05) Print message (constant) 0x28b

/ Get the current location of the dynamite
0x0c7f (0x145f): (0xc3) Set var[0x17] = list#3[0x1b]

/ If the player is in the same location as the dynamite when it explodes
/ or its in their inventory, the dwarves wake up, throw their knives and
/ kill the player. That's what the next two checks do.

/ Branch if the dynamite IS in the player's current location
0x0c82 (0x1462): (0x10) If var[0x17] == var[0x0d] then Goto 0x0cb2

/ Branch if the dynamite IS in the player's inventory (0xff)
/ var[0x03] is the constant 0xff
0x0c86 (0x1466): (0x10) If var[0x17] == var[0x03] then Goto 0x0cb2

/ Dynamite is NOT in the current location or the inventory

/ Branch if the dynamite is NOT "at the south-west end of a vast hall filled with a loud snoring"
0x0c8a (0x146a): (0x19) If var[0x17] != (constant) 0xaa then Goto 0x0c9d

/ Dynamite is "at the south-west end of a vast hall filled with a loud snoring" - it wakes up the dwarves

/ Print message  "The dwarves all wake up. They all throw their sharp little knives, every one of which hits you!\n "
0x0c8e (0x146e): (0x05) Print message (constant) 0x28c

/ Print message  "The roof collapses, killing all of the dwarves. "
0x0c91 (0x1471): (0x05) Print message (constant) 0x28d

/ Set the dynamite score increment to 80 (0x50)
0x0c94 (0x1474): (0x08) Set var[0x04] = (constant) 0x50

/ Add the score increment for killing the dwarves even though you die
0x0c97 (0x1477): (0x0a) Set var[0x31] += var[0x04]

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0c9a (0x147a): (0x00) Goto 0x0dd9

**************************************************************************

/ Set the status of the blast making the huge hole to the west (0x01)
/ var[0x01] is the constant 0x01
0x0c9d (0x147d): (0x09) Set var[0x22] = var[0x01]

/ Set the score increment for using the dynamite to 180 (0xb4) 
/ This is in addition to the 20 (0x14) for just uing the dynamite above
0x0ca0 (0x1480): (0x08) Set var[0x04] = (constant) 0xb4

/ Add the dynamite score increment
0x0ca3 (0x1483): (0x0a) Set var[0x31] += var[0x04]

/ Print message  "The blast collapses the ceiling at the north-west end 
/ of the cavern, killing all of the evil dwarves. The vibration from the 
/ collapse causes a huge hole to appear in the western wall through 
/ which you can see a corridor "
0x0ca6 (0x1486): (0x05) Print message (constant) 0x28e

/ Set the flood water's location to "north-east end of a vast cave..." (0xa9)
0x0ca9 (0x1489): (0x08) Set var[0x37] = (constant) 0xa9

/ Set the water movement counter to 0x01 - it moves once every two commands/turns
/ so won't move until two more turns/commands now
/ var[0x01] is the constant 0x01
0x0cac (0x148c): (0x09) Set var[0x38] = var[0x01]

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0caf (0x148f): (0x00) Goto 0x017d

**************************************************************************

/ Player was in the same location as the dynamite or it was in their inventory

/ Print message  "The dwarves all wake up. They all throw their sharp little knives, every one of which hits you!\n "
0x0cb2 (0x1492): (0x05) Print message (constant) 0x28c

/ Print message  "The roof collapses, killing all of the dwarves. "
0x0cb5 (0x1495): (0x05) Print message (constant) 0x28d

/ Kill the player
0x0cb8 (0x1498): (0x00) Goto 0x0dd9

**************************************************************************

/ Branch if the player has already picked up the gleaming pearl and initiated
/ the end game (which means the number of commands/turns since picking it up will be
/ non-zero)
/ var[0x06] is the constant 0x00
0x0cbb (0x149b): (0x13) If var[0x1a] > var[0x06] then Goto 0x0cc0

/ Player has not picked up the gleaming pearl so nothing to do with its status
0x0cbf (0x149f): (0x02) Return

**************************************************************************

/ Increment by 1 the number of turns/commands since picking up the pearl
0x0cc0 (0x14a0): (0x0a) Set var[0x1a] += var[0x01]

/ Branch if it's NOT the 6th turn/command since picking up the 
/ gleaming pearl
0x0cc3 (0x14a3): (0x19) If var[0x1a] != (constant) 0x06 then Goto 0x0ccb

/ Sixth command/turn since picking up the pearl

/ Print message  "\n'CLICK. The cave is closing. Please leave by the main door. Thank you. CLICK.'\n "
0x0cc7 (0x14a7): (0x05) Print message (constant) 0x278

/ Finished
0x0cca (0x14aa): (0x02) Return

**************************************************************************
* Player has had the pearl for 20 turns - the elf will appear and 
* offer the quest to save the elves
**************************************************************************

/ Branch if it's NOT the 20th turn/command since picking up the 
/ gleaming pearl and perform the next checks
0x0ccb (0x14ab): (0x19) If var[0x1a] != (constant) 0x14 then Goto 0x0d3a

/ It's the 20th turn since picking up the pearl

/ Print message  "\nAn elf appears - you recognise him as the warrior who
/ gave you the map to Colossal Cavern. He congratulates you on your success 
/ and then says 'Please free my people, for their plight is an abomination. 
/ Will you do this?'\n "
0x0ccf (0x14af): (0x05) Print message (constant) 0x29b

/ Get the player's response to the question
0x0cd2 (0x14b2): (0x07) Input - results in word1 var[0x13], word2 var[0x14], word3 var[0x15], count var[0x16]

/ Parse the response and put the outcome into var[0x1c]
0x0cd7 (0x14b7): (0x01) Gosub 0x0c41

/ Branch if the reponse was yes (0x01)
/ var[0x01] is the constant 0x01
0x0cda (0x14ba): (0x10) If var[0x1c] == var[0x01] then Goto 0x0cea

/ Branch if the reponse was no (0x00)
/ var[0x06] is the constant 0x00
0x0cde (0x14be): (0x10) If var[0x1c] == var[0x06] then Goto 0x0ce4

/ Response was misunderstood, ask the question again
0x0ce2 (0x14c2): (0x00) Goto 0x0cd2

**************************************************************************
* Player said "no" to freeing the elves
**************************************************************************

/ Print message  "Coward! The elves will long remember your name with hatred "
0x0ce4 (0x14c4): (0x05) Print message (constant) 0x29c

/ End the game and print the score
0x0ce7 (0x14c7): (0x00) Goto 0x0213

**************************************************************************
* Player said "yes" to freeing the elves
* Process their objects:
* 1. Move all non-treasures to where they player will teleport 
* 2. Move all treasures in the inventory to the small building
* 3. Remove all non-treasures from the game if they are not in the small
*    building or in the player's inventory
* 4. Leave the gazette/magazine wherever it is (hopefully at Witt's End)
**************************************************************************

/ Print message  "Good luck! Be careful, and make sure to rescue ALL the elves\n "
0x0cea (0x14ca): (0x05) Print message (constant) 0x29d

/ Set the temporary variable to the first object id
0x0ced (0x14cd): (0x09) Set var[0x04] = var[0x01]

/ Get the treasure status of the object from list#4
0x0cf0 (0x14d0): (0xa4) Set var[0x05] = list#4[var[0x04]] (list address 0x07b5)

/ Branch if the object is a treasure 
0x0cf3 (0x14d3): (0x10) If var[0x05] == var[0x01] then Goto 0x0d03

/ Object is NOT a treasure

/ Branch if the object is the magazine/gazette (0x14)
0x0cf7 (0x14d7): (0x18) If var[0x04] == (constant) 0x14 then Goto 0x0d18

/ Object is NOT the magazine/gazette

/ Set the temporary variable to location "at the south-west end of a 
/ vast hall filled with a loud snoring emerging from a large heap
/ at the other side." (0xaa)
0x0cfb (0x14db): (0x08) Set var[0x05] = (constant) 0xaa

/ Set the current location of this object to this location (0xaa)
0x0cfe (0x14de): (0xe3) Set list#3[var[0x04]] = var[0x05] (list address 0x0860)

/ Move to the next object and loop back if still objects to process
0x0d01 (0x14e1): (0x00) Goto 0x0d18

**************************************************************************

/ Object is a treasure

/ Get the current location of the object
0x0d03 (0x14e3): (0xa3) Set var[0x05] = list#3[var[0x04]] (list address 0x0860)

/ Branch if the object is NOT in the player's inventory (0xff)
/ var[0x03] is the constant 0xff
0x0d06 (0x14e6): (0x11) If var[0x05] != var[0x03] then Goto 0x0d0f

/ Object is in the player's inventory so move it to the small bulding

/ Set the location to move the object to to the "small bulding" (0x0e)
0x0d0a (0x14ea): (0x08) Set var[0x05] = (constant) 0x0e

/ Move the object to the small building
0x0d0d (0x14ed): (0x00) Goto 0x0cfe

**************************************************************************

/ Object is NOT in the player's inventory

/ Branch if the object IS in the "small building" (0x0e)
0x0d0f (0x14ef): (0x18) If var[0x05] == (constant) 0x0e then Goto 0x0d18

/ If a treasure object is NOT in the player's inventory and NOT 
/ in the small building at this point it is removed from the game by 
/ setting its location to 0x00
/ var[0x06] is the constant 0x00
0x0d13 (0x14f3): (0x09) Set var[0x05] = var[0x06]

/ Set the object's location to 0x00 and remove from the game
0x0d16 (0x14f6): (0x00) Goto 0x0cfe

**************************************************************************

/ Move to the next object id
0x0d18 (0x14f8): (0x0a) Set var[0x04] += var[0x01]

/ Loop back around for the next object id until the pentacle (0x1c) is
/ reached
0x0d1b (0x14fb): (0x1a) If var[0x04] < (constant) 0x1c then Goto 0x0cf0

/ Pentacle (0x1c) reached

/ Remove the bird (0x07) from the game by setting its current location to 0x00
/ var[0x06] is the constant 0x00
0x0d1f (0x14ff): (0x83) Set list#3[0x07] = var[0x06]

/ Remove the cage (0x06) from the game by setting its current location to 0x00
/ var[0x06] is the constant 0x00
0x0d22 (0x1502): (0x83) Set list#3[0x05] = var[0x06]

/ Remove the bear (0x0c) from the game by setting its current location to 0x00
/ var[0x06] is the constant 0x00
0x0d25 (0x1505): (0x83) Set list#3[0x0c] = var[0x06]

/ Remove the bottle (0x04) from the game by setting its current location to 0x00
/ var[0x06] is the constant 0x00
0x0d28 (0x1508): (0x83) Set list#3[0x04] = var[0x06]

/ Set the player's current location to  "at the south-west end of a 
/ vast hall filled with a loud snoring emerging from a large heap
/ at the other side." (0xaa)
0x0d2b (0x150b): (0x08) Set var[0x0d] = (constant) 0xaa

/ Print message  "The elf waves his cloak over you and your surroundings 
/ shimmer and fade. All is dark, but then the darkness grows less and you 
/ realise that you are at one end of a huge room "
0x0d2e (0x150e): (0x05) Print message (constant) 0x284

/ Set the battery status of the lamp to infinite power (0xff)
/ var[0x03] is the constant 0xff
0x0d31 (0x1511): (0x09) Set var[0x2a] = var[0x03]

/ Set the lamp status to on (0x01)
/ var[0x01] is the constant 0x01
0x0d34 (0x1514): (0x09) Set var[0x2e] = var[0x01]

/ Figure out the dwarf status etc 
0x0d37 (0x1517): (0x00) Goto 0x0180

**************************************************************************
* Check if the cavern has been blown up and killed the dwarves
**************************************************************************

/ Branch if the blast has NOT collapsed the cavern and killed the dwarves
0x0d3a (0x151a): (0x10) If var[0x22] == var[0x06] then Goto 0x0cca

/ Dynamite has correctly collapsed the cavern and killed the dwarves

/ Perform a flood level check
/ Previous turn/command's flood level is cached in var[0x0e] and this
/ sets the current turn/command's flood level in var[0x0f]
/ If it's been over a player's head for 2 turns e.g. they went from location A
/ to location B and the location id for B < location id for A, they will drown
/ as it'll be flooded 
0x0d3e (0x151e): (0x01) Gosub 0x0da7

/ Branch if the flood level is just waist high now
0x0d40 (0x1520): (0x10) If var[0x0f] == var[0x06] then Goto 0x0d4e

/ It's over the player's head right now

/ Branch if it previously was also over their head
0x0d44 (0x1524): (0x10) If var[0x0e] == var[0x06] then Goto 0x0d4e

/ Water has been over the player's head for two turns now

/ Print message  "\nUnfortunately, you have failed to escape from the flood. You drown in the water\n "
0x0d48 (0x1528): (0x05) Print message (constant) 0x292

/ Player is killed

/ Print the score and ask if the player wants to play again
0x0d4b (0x152b): (0x00) Goto 0x0dd9

**************************************************************************
* Move the flood after the explosion and see if it's reached the player
**************************************************************************

/ Branch if the water is " on the west bank of a wide fissure which cuts 
/ right across the dungeon walkway." (0xc5) as it reached the fissure (0xc4)
/ and caused the lava to explode and it shouldn't advance any more
0x0d4e (0x152e): (0x18) If var[0x37] == (constant) 0xc5 then Goto 0x0d86

/ Increment the water movement counter (cycles, through 1,2,3 and gets reset to
/ 1 when it becomes 3)
0x0d52 (0x1532): (0x0a) Set var[0x38] += var[0x01]

/ The water moves every two turns/commands and var[0x38] cycles
/ through 1, 2, 3 - when it reaches 3 it's reset to 1 on this turn
/ and the water is moved forward a location, chasing the player

/ Branch if the water doesn't need to advance this turn/command
0x0d55 (0x1535): (0x1a) If var[0x38] < (constant) 0x03 then Goto 0x0d5f

/ Move the water to the next location, chasing the player
0x0d59 (0x1539): (0x0a) Set var[0x37] += var[0x01]

/ Reset the water movement counter
0x0d5c (0x153c): (0x09) Set var[0x38] = var[0x01]

/ This location has no description (0xc4) and the player cannot get there 
/ from any location.  It's used as a check to see if the water reached 
/ the fissure (the water can get there, not the player) as it's between the east and west
/ banks of the fissure. If the water reaches here the player will be killed
 
/ If the water has rearched the fissure (0xc4), explode when it touches the lava
/ and kill the player if they didn't lock the heavy dungeon door
0x0d5f (0x153f): (0x18) If var[0x37] == (constant) 0xc4 then Goto 0x0ddc

/ Water is somewhere before the fissure (0xc4)

/ Branch if the water moved just now to the next location to see how
/ deep it is in its current location (and if with the player)
0x0d63 (0x1543): (0x11) If var[0x38] != var[0x02] then Goto 0x0d75

/ Water didn't move, it's been in the same location for two turns/commands now

/ Set the temporary variable to the player's current location
0x0d67 (0x1547): (0x09) Set var[0x04] = var[0x0d]

/ Set the temporary variable to the location before the player's current location
0x0d6a (0x154a): (0x0b) Set var[0x04] -= var[0x01].

/ Branch if the water is NOT in the previous location to the player's current location
0x0d6d (0x154d): (0x11) If var[0x04] != var[0x37] then Goto 0x0d75

/ Water has reached the previous location (one away) from the player

/ Print message  "\nWater is trickling in from nearby "
0x0d71 (0x1551): (0x05) Print message (constant) 0x28f

/ Message printed
0x0d74 (0x1554): (0x02) Return

**************************************************************************

/ Water just moved OR it hasn't and it's not in the location one behind the player

/ Only reach here if the flood indicator (var[0x38]) is 1 and location of 
/ the flood is not 0xc4 or 0xc5 (it's somewhere before the fissure)

/ OR 

/ flood indicator (var[0x38]) is 2 and location of 
/ the flood is not in the previous location

/ Get the flood level (in var[0x0f]) - it's either waist high (0x00) or 
/ over the player's head (0x01). Will be waist high if the water is NOT
/ in the player's current location 
/ OR 
/ over the player's head if the water is in the player's location and the water
/ has been in that same location for a second turn/command
0x0d75 (0x1555): (0x01) Gosub 0x0da7

/ Branch if the flood level is waist high in its current location
/ This also checks if the flood water is in the player's current location
/ and doesn't print a message if it isn't
/ var[0x06] is the constant 0x00
0x0d77 (0x1557): (0x10) If var[0x0f] == var[0x06] then Goto 0x0d7f

/ At this point it's known that the water is in the player's current location
/ as 0x0daa checked for that before allowing a check to see if the level should
/ be set (0x0dae) to over the player's head (0x01)

/ Print message  "The water is over your head! "
0x0d7b (0x155b): (0x05) Print message (constant) 0x290

/ Message printed
0x0d7e (0x155e): (0x02) Return

**************************************************************************

/ Branch and return if the water hasn't reached the player's location yet
0x0d7f (0x155f): (0x12) If var[0x37] < var[0x0d] then Goto 0x0d86

/ Print message  "The water is up to your waist "
0x0d83 (0x1563): (0x05) Print message (constant) 0x291

/ Message printed
0x0d86 (0x1566): (0x02) Return

**************************************************************************
* Check if the player has discovered all the minor treasures, if so
* then the end game can start if it hasn't aleady
**************************************************************************

/ Branch if the end game has started (initiated by the player picking up the
/ glistening pearl).
/ var[0x06] is the constant 0x00
0x0d87 (0x1567): (0x11) If var[0x1a] != var[0x06] then Goto 0x0da6

/ End game has not started yet - check if it should, player has to have
/ discovered all the minor treasures

/ Loop to go around objects from the keys to the pentacle (0x1c)
0x0d8b (0x156b): (0x09) Set var[0x04] = var[0x01]

/ Determine if the object is a treasure (0x01) or not (0x00) by looking
/ up the object id in the "treasure or not" list#4
0x0d8e (0x156e): (0xa4) Set var[0x05] = list#4[var[0x04]] (list address 0x07b5)

/ Branch if the object is NOT a treasure (0x00) and move to the next object
/ var[0x06] is the constant 0x00
0x0d91 (0x1571): (0x10) If var[0x05] == var[0x06] then Goto 0x0d9c

/ Object is a treasure (0x01)

/ Get the object discovered/seen status
0x0d95 (0x1575): (0xa5) Set var[0x05] = list#5[var[0x04]] (list address 0x08b0)

/ Branch if the object has NOT been seen/discovered
/ var[0x06] is the constant 0x00
0x0d98 (0x1578): (0x10) If var[0x05] == var[0x06] then Goto 0x0da6

/ Move to the next object id
0x0d9c (0x157c): (0x0a) Set var[0x04] += var[0x01]

/ If the object id has not reached the pentacle (0x1c) loop back
/ around and check the next object
0x0d9f (0x157f): (0x1a) If var[0x04] < (constant) 0x1c then Goto 0x0d8e
/ end loop

/ Set the status of the pearl to 0x01 and let the end game start - the
/ player has discovered ALL the minor treasures
0x0da3 (0x1583): (0x09) Set var[0x1a] = var[0x01]

/ Processing complete
0x0da6 (0x1586): (0x02) Return

**************************************************************************
* Flood level check
**************************************************************************

/ Will be waist high if the water is NOT in the player's current location 
/ OR 
/ over the player's head if the water is in the player's location and the water
/ has been in that same location for a second turn/command

/ Reset the flood level indicator to "up to your waist" (0x00)
/ var[0x06] is the constant 0x00
0x0da7 (0x1587): (0x09) Set var[0x0f] = var[0x06]

/ If the flood location hasn't reached the player yet, return
/ there is logic in the caller to not print a message 
/ if the flood has arrived at the player's location and the
/ flood level indicator is set to "up to your waist" (0x00)
0x0daa (0x158a): (0x12) If var[0x37] < var[0x0d] then Goto 0x0db5

/ Flood has reached the player's location

/ The player can randomly have a reprieve from the level 
/ if the water movement counter hasn't reached it's "about to move
/ to the next location next move" state
/ var[0x02] is the constant 0x02
0x0dae (0x158e): (0x11) If var[0x38] != var[0x02] then Goto 0x0db5

/ Water movement counter is 0x02 (water has been there for one turn/command)

/ Set the flood level indicator to "over your head" (0x00)
0x0db2 (0x1592): (0x09) Set var[0x0f] = var[0x01]

/ Flood level check
0x0db5 (0x1595): (0x02) Return

**************************************************************************
* Command: close/lock/shut
**************************************************************************

/ Branch if the heavy dungeon door at the spiral staircase is locked (0x01)
/ var[0x01] is the constant 0x01
0x0db6 (0x1596): (0x10) If var[0x25] == var[0x01] then Goto 0x01b9

/ Door is unlocked

/ Keys are the object with id 0x01 so look up the current location of the keys
/ var[0x01] is the constant 0x01
0x0dbb (0x159b): (0xa3) Set var[0x04] = list#3[var[0x01]] (list address 0x0860)

/ Check to see if the location of the keys is in the inventory
0x0dbe (0x159e): (0x10) If var[0x04] == var[0x03] then Goto 0x0dc7

/ No keys... in the inventory

/ Print message  "You have no keys, or hairpins "
0x0dc2 (0x15a2): (0x05) Print message (constant) 0x13

0x0dc4 (0x15a4): (0x00) Goto 0x017d

/ Branch if the second word is NOT the object door (0x5b)
0x0dc7 (0x15a7): (0x19) If var[0x14] != (constant) 0x5b then Goto 0x01b9

/ Branch if the user is NOT at the first of the "spiral stone staircase" locations
0x0dcc (0x15ac): (0x19) If var[0x0d] != (constant) 0xc7 then Goto 0x01c1

/ Set the heavy dungeon door to locked (0x01)
/ var[0x01] is the constant 0x01
0x0dd1 (0x15b1): (0x09) Set var[0x25] = var[0x01]

/ Print message  "It clangs shut "
0x0dd4 (0x15b4): (0x05) Print message (constant) 0x12

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0dd6 (0x15b6): (0x00) Goto 0x017d

**************************************************************************

/ Call the routine to print the score and ask if the player wants to play 
/ again (they are killed)
0x0dd9 (0x15b9): (0x00) Goto 0x0213

**************************************************************************

/ Make the water move ahead on the next turn 
0x0ddc (0x15bc): (0x09) Set var[0x38] = var[0x02]

/ Branch if the heavy dungeon door is locked - the player is not killed
0x0ddf (0x15bf): (0x10) If var[0x25] == var[0x01] then Goto 0x0de8

/ Print message  "You are killed by an enormous explosion as water meets lava "
0x0de3 (0x15c3): (0x05) Print message (constant) 0x294

/ End the game for the player - with no hope of resurrection
0x0de6 (0x15c6): (0x00) Goto 0x0dd9

**************************************************************************

/ Player had locked the dungeon door - so they are not killed

/ Print message  "\nAn enormous blast rocks the dungeon as water meets lava "
0x0de8 (0x15c8): (0x05) Print message (constant) 0x293

/ Figure out the dwarf status etc 
0x0deb (0x15cb): (0x00) Goto 0x0180

**************************************************************************

/ Print message  "The combined weight of you and the spider together
/ is too much for the web. It rips across, hurling you to the 
/ floor of the cave far below "
0x0dee (0x15ce): (0x05) Print message (constant) 0x2a2

/ Call the routine to print the score and ask if the player wants to play 
/ again (they are killed)
0x0df1 (0x15d1): (0x00) Goto 0x0dd9

**************************************************************************
* Check rules for blocking player movement in a direction 
* 1. Going West over the fissure
* 2. Going East over the fissure
* 3. Going East from the sprial staircase to the dungeon walkway
**************************************************************************

/ Branch if the crystal bridge is NOT spanning the chasm (0x00)
0x0df3 (0x15d3): (0x10) If var[0x27] == var[0x06] then Goto 0x0e17

/ Crystal bridge is spanning the chasm

/ Branch if the player's current location is NOT "on the west bank of a wide
/ fissure which cuts right across the dungeon walkway"  (0xc5)
0x0df7 (0x15d7): (0x19) If var[0x0d] != (constant) 0xc5 then Goto 0x0e07

/ Player's current location IS "on the west bank of a wide fissure which 
/ cuts right across the dungeon walkway"

/ Branch if the first direction word is cross/across/over (0x0f)
0x0dfb (0x15db): (0x18) If var[0x13] == (constant) 0x0f then Goto 0x0e03

/ Branch if the first direction word is NOT east (0x03)
0x0dff (0x15df): (0x19) If var[0x13] != (constant) 0x03 then Goto 0x0e17

/ Player is trying to move east across the fissure 

/ Set the target location to the "on the east bank of a wide fissure" (0xc3)
0x0e03 (0x15e3): (0x08) Set var[0x17] = (constant) 0xc3

/ West to east of the fissure processed
0x0e06 (0x15e6): (0x02) Return

**************************************************************************

/ Branch if the player's current location is NOT " on the east bank of 
/ a wide fissure" (0xc3)
0x0e07 (0x15e7): (0x19) If var[0x0d] != (constant) 0xc3 then Goto 0x0e17

/ Branch if the first direction word is sw/swest/southwest (0x0f)
0x0e0b (0x15eb): (0x18) If var[0x13] == (constant) 0x07 then Goto 0x0e13

/ Branch if the first direction word is NOT cross/across/over (0x0f)
0x0e0f (0x15ef): (0x19) If var[0x13] != (constant) 0x0f then Goto 0x0e17

/ Set the target location to the "on the west bank of a wide fissure" (0xc5)
0x0e13 (0x15f3): (0x08) Set var[0x17] = (constant) 0xc5

/ West to east of the fissure processed
0x0e16 (0x15f6): (0x02) Return

**************************************************************************

/ Branch if the player's current location is NOT "on a spiral stone 
/ staircase" - the first one (0xc7)
0x0e17 (0x15f7): (0x19) If var[0x0d] != (constant) 0xc7 then Goto 0x0e24

/ Branch if the player's target location is NOT back to the "east-west dungeon
/ walkway near the dungeon entrance" (0xc6)
0x0e1b (0x15fb): (0x19) If var[0x17] != (constant) 0xc6 then Goto 0x0e24

/ Player is trying to move back to to the "east-west dungeon
/ walkway near the dungeon entrance" (0xc6) so check if the door is locked

/ Branch if the heavy dungeon door is locked (0x01) and print that 
/ the player can't move in that direction
/ var[0x01] is the constant 0x01
0x0e1f (0x15ff): (0x10) If var[0x25] == var[0x01] then Goto 0x027a

/ Door is unlocked (0x00)

/ Player can move in that direction
0x0e24 (0x1604): (0x02) Return

**************************************************************************
* Command: gold/nugget
**************************************************************************

/ Set the first word to the second word
0x0e25 (0x1605): (0x09) Set var[0x13] = var[0x14]

/ Set the second word to the third word
0x0e28 (0x1608): (0x09) Set var[0x14] = var[0x15]

/ Set the third word to "jewelry" (0x2d)
0x0e2b (0x160b): (0x08) Set var[0x15] = (constant) 0x2d

/ Call the jump table and process the command
0x0e2e (0x160e): (0x00) Goto 0x009a

**************************************************************************
* Command: say
**************************************************************************

/ Check to see if the dynamite explodes and kills the player 
/ (saying anything explodes the dynamite if the player is in the
/ north-west or south-east part of the vast hall)
0x0e31 (0x1611): (0x01) Gosub 0x0ef8

/ Branch if the second word is "plugh" (0x20)
0x0e34 (0x1614): (0x18) If var[0x14] == (constant) 0x20 then Goto 0x0947

/ Branch if the second word is "xyzzy" (0x21)
0x0e39 (0x1619): (0x18) If var[0x14] == (constant) 0x21 then Goto 0x0966

/ Branch if the second word is "plover" (0x22)
0x0e3e (0x161e): (0x18) If var[0x14] == (constant) 0x22 then Goto 0x097f

/ No other words mean anything

/ Print message  "Nothing happens "
0x0e43 (0x1623): (0x05) Print message (constant) 0x17

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0e45 (0x1625): (0x00) Goto 0x017d

**************************************************************************
* Process the spider's actions
**************************************************************************

/ Branch if the player's current location is NOT " in amongst the strands 
/ of a huge web that rises to the roof" (0xd8)
0x0e48 (0x1628): (0x19) If var[0x0d] != (constant) 0xd8 then Goto 0x0e5e

/ Branch if the spider is dead (0x00)
/ var[0x06] is the constant 0x00
0x0e4c (0x162c): (0x10) If var[0x0c] == var[0x06] then Goto 0x0e5e

/ Spider is alive and not following the pentacle

/ If the player's target location is NOT "clinging to thick strands of
/ sticky grey web in the middle of a huge cavern" (0xdb)
0x0e50 (0x1630): (0x19) If var[0x17] != (constant) 0xdb then Goto 0x0e5e

/ Branch if the spider is following the player's pentacle
/ to say the combined weight of the player and the spider is too much for the web
/ and kill the player
0x0e54 (0x1634): (0x10) If var[0x0c] == var[0x03] then Goto 0x0dee

/ Print message  "The spider blocks your way, glaring at you in an evil manner "
0x0e58 (0x1638): (0x05) Print message (constant) 0x2ac

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0e5b (0x163b): (0x00) Goto 0x017d

0x0e5e (0x163e): (0x02) Return

**************************************************************************

/ Branch if the spider is NOT following the player (0xff)
/ var[0x03] is the constant 0xff
0x0e5f (0x163f): (0x11) If var[0x0c] != var[0x03] then Goto 0x05e4

/ Spider is following the player

/ Branch if the location is NOT "at the top of a high stone pinnacle 
/ surrounded by clouds" (0xd1)
0x0e64 (0x1644): (0x19) If var[0x0d] != (constant) 0xd1 then Goto 0x0e74

/ Player is "at the top of a high stone pinnacle surrounded by clouds"
/ and the spider is following the player

/ Remove the pentacle from the game by setting its location to 0x00
/ var[0x06] is the constant 0x00
0x0e68 (0x1648): (0x83) Set list#3[0x1c] = var[0x06]

/ Set the spider's status to dead (0x00)
0x0e6b (0x164b): (0x09) Set var[0x0c] = var[0x06]

/ Print message  "You hurl the pentacle into space and the spider follows "
0x0e6e (0x164e): (0x05) Print message (constant) 0x2ad

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0e71 (0x1651): (0x00) Goto 0x017d

************************************************************************** 

/ Player is NOT at the "top of a high stone pinnacle" but is throwing the 
/ pentacle

/ Print message  "The spider grabs the pentacle and eats you "
0x0e74 (0x1654): (0x05) Print message (constant) 0x2ae

/ Kill  the player
0x0e77 (0x1657): (0x00) Goto 0x0dd9

**************************************************************************

/ Branch if the spider is following (0xff) the player and say the spider
/ is staring at the pentacle
/ var[0x03] is the constant 0xff
0x0e7a (0x165a): (0x10) If var[0x0c] == var[0x03] then Goto 0x0e83

/ Branch if the player's location is the same as the spider's location
/ and check to see if the spider is on its web
0x0e7e (0x165e): (0x10) If var[0x0d] == var[0x0c] then Goto 0x0e87

/ Nothing to say
0x0e82 (0x1662): (0x02) Return

**************************************************************************

/ Print message  "A huge spider is staring at the pentacle "
0x0e83 (0x1663): (0x05) Print message (constant) 0x2a3

/ Finished
0x0e86 (0x1666): (0x02) Return

**************************************************************************
* Check to see if the FIRST set of elves are chained to the wall
**************************************************************************

/ Get the location of the pentacle (0x1c)
0x0e87 (0x1667): (0xc3) Set var[0x04] = list#3[0x1c]

/ Branch if the location of the pentacle is NOT in the player's inventory (0xff)
/ var[0s03] is the constant 0xff
0x0e8a (0x166a): (0x11) If var[0x04] != var[0x03] then Goto 0x0e91

/ Set the status of the spider to following the player's pentacle (0xff)
/ var[0s03] is the constant 0xff
0x0e8e (0x166e): (0x09) Set var[0x0c] = var[0x03]

/ Print message  "A giant spider lurks on the web "
0x0e91 (0x1671): (0x05) Print message (constant) 0x29f

/ Finished
0x0e94 (0x1674): (0x02) Return

**************************************************************************
* Check to see if the SECOND set of elves are chained to the wall
**************************************************************************

/ Branch if the player is NOT "in a dingy dungeon cell with an entrance to the south" (0xc1)
/ and move to the next location/message check
0x0e95 (0x1675): (0x19) If var[0x0d] != (constant) 0xc1 then Goto 0x0ea1

/ Branch if the FIRST set of elves have been released from their chains
/ var[0x01] is the constant 0x01
0x0e99 (0x1679): (0x10) If var[0x2c] == var[0x01] then Goto 0x0ea0

/ Print message  "A hundred elves are chained to the wall "
0x0e9d (0x167d): (0x05) Print message (constant) 0x2b0

/ Return
0x0ea0 (0x1680): (0x02) Return

**************************************************************************

/ Branch if the player is NOT "in a dingy dungeon cell with an entrance to the north" (0xc2)
0x0ea1 (0x1681): (0x19) If var[0x0d] != (constant) 0xc2 then Goto 0x0ea0

/ Branch if the SECOND set of elves have been released from their chains
/ var[0x01] is the constant 0x01
0x0ea5 (0x1685): (0x10) If var[0x2d] == var[0x01] then Goto 0x0ea0

/ Print message  "A hundred elves are chained to the wall "
0x0ea9 (0x1689): (0x05) Print message (constant) 0x2b0

/ Finished
0x0eac (0x168c): (0x02) Return

**************************************************************************
* Command: save
**************************************************************************

/ Deduct a point from the total at the first save by setting the number
/ of points to add to the score to 0x00
/ var[0x06] is the constant 0x00
0x0ead (0x168d): (0x09) Set var[0x0b] = var[0x06]

/ Call the platform to function to perform the save
0x0eb0 (0x1690): (0x06) Function - Save (0x03)

/ Check location events, check status of the lamp and if a hollow voice 
/ says "Plugh" and get the next user input
0x0eb2 (0x1692): (0x00) Goto 0x017d

**************************************************************************
* Command: restore
**************************************************************************

/ Call the platform function to perform the restore
0x0eb5 (0x1695): (0x06) Function - Restore (0x04)

/ Check to see if it's light / dark in the new location and print a 
/ description or "it's dark"
0x0eb7 (0x1697): (0x00) Goto 0x03ed

**************************************************************************
* Determine score message e.g. "A puny effort!"
*   0  to  60  - "A puny effort!"
*  61  to 120  - "Not bad.. for a novice and a bumpkin!"
* 121  to 200  - "A reasonable score."
* 201  to 350  - "A good score indeed!"
* 350  to 750  - "You are now an Adventurer"
* 750  to 1099 - "You are now a Master Adventurer..."
* 1100 to 1100 - "...the elves are waiting.... raise you on high"
**************************************************************************

/ Branch if the score is greater than 60
0x0eba (0x169a): (0x1b) If var[0x1c] > (constant) 0x3c then Goto 0x0ec3

/ Score is between 0-60 
/ Set the message to "A puny effort!" (0x2a4)
0x0ebe (0x169e): (0x08) Set var[0x1d] = (constant) 0x2a4

/ Return the message id to display
0x0ec2 (0x16a2): (0x02) Return

**************************************************************************

/ Branch if the score is greater than 120
0x0ec3 (0x16a3): (0x1b) If var[0x1c] > (constant) 0x78 then Goto 0x0ecc

/ Score is between 61-120
/ Set the message to "Not bad.. for a novice and a bumpkin!" (0x2a5)
0x0ec7 (0x16a7): (0x08) Set var[0x1d] = (constant) 0x2a5

/ Return the message id to display
0x0ecb (0x16ab): (0x02) Return

**************************************************************************

/ Branch if the score is greater than 200
0x0ecc (0x16ac): (0x1b) If var[0x1c] > (constant) 0xc8 then Goto 0x0ed5

/ Score is between 121-200
/ Set the message to "A reasonable score." (0x2a6)
0x0ed0 (0x16b0): (0x08) Set var[0x1d] = (constant) 0x2a6

/ Return the message id to display
0x0ed4 (0x16b4): (0x02) Return

**************************************************************************

/ Branch if the score is greater than 350
0x0ed5 (0x16b5): (0x1b) If var[0x1c] > (constant) 0x15e then Goto 0x0edf


/ Set the message to "A good score indeed!" (0x2a7)
0x0eda (0x16ba): (0x08) Set var[0x1d] = (constant) 0x2a7

/ Return the message id to display
0x0ede (0x16be): (0x02) Return

**************************************************************************

/ Branch if the score is greater than 750
0x0edf (0x16bf): (0x1b) If var[0x1c] > (constant) 0x2ee then Goto 0x0ee9

/ Set the message to "You are now an Adventurer" (0x2a8)
0x0ee4 (0x16c4): (0x08) Set var[0x1d] = (constant) 0x2a8

/ Return the message id to display
0x0ee8 (0x16c8): (0x02) Return

**************************************************************************

/ Branch if the player scored 1100 the full score
0x0ee9 (0x16c9): (0x1b) If var[0x1c] > (constant) 0x44b then Goto 0x0ef3

/ Score is between 751 and 1099
/ Set the message to "You are now a Master Adventurer..." (0x2a9)
0x0eee (0x16ce): (0x08) Set var[0x1d] = (constant) 0x2a9

/ Return the message id to display
0x0ef2 (0x16d2): (0x02) Return

**************************************************************************

/ Score is greater than 1099 (well it's 1100) - select the best message
/ "...the elves are waiting.... raise you on high" (0x2aa)
0x0ef3 (0x16d3): (0x08) Set var[0x1d] = (constant) 0x2aa

/ Return the message id to display
0x0ef7 (0x16d7): (0x02) Return

**************************************************************************
* Check to see if the player's action made the dynamite explode
**************************************************************************

/ Branch if the dynamite has already exploded (do nothing) - you 
/ cannot blast the dynamite twice
0x0ef8 (0x16d8): (0x1b) If var[0x37] > (constant) 0xa8 then Goto 0x0f04

/ Branch if the player is letting the dynamite off "at the north-east end of a
/ vast cave, surrounded by snoring dwarves." (0xaa)
0x0efc (0x16dc): (0x18) If var[0x0d] == (constant) 0xaa then Goto 0x0f05

/ Branch if the player is letting the dynamite off " at the south-west end 
/ of a vast hall filled with a loud snoring" (0xa9)
0x0f00 (0x16e0): (0x18) If var[0x0d] == (constant) 0xa9 then Goto 0x0f05

/ Nothing bad happened
0x0f04 (0x16e4): (0x02) Return

**************************************************************************

/ Print message  "The sound reverberates, waking the dwarves which look around
/ angrily and see you. Instantly, every single dwarf hurls a sharp little knife 
/ at you and every single one of these hits! Perhaps you made a little mistake there "
0x0f05 (0x16e5): (0x05) Print message (constant) 0x2b4

/ Kill the player with no option to resurrect
0x0f08 (0x16e8): (0x00) Goto 0x0213

**************************************************************************
* Process FEE FIE FOE FOO order
**************************************************************************

/ Branch if the player has not yet started the FEE FIE FOE FOO sequence 
/ and just return as when the words are processed in the JUMP table 
/ and therefore a 0x0bc7, this variable is incremented which will trigger
/ this check the next time around ("Get it right dummy" only 
/ printed on entry of the second word that's out of sequence)
/
/ NOTE that this missing some logic to check the first word is FEE - 
/ it can be any of those four words, just the last three that need to be
/ in sequence
/
/ var[0x06] is the constant 0x00
0x0f0b (0x16eb): (0x10) If var[0x36] == var[0x06] then Goto 0x0f24

/ Set the temporary variable to the first word value
0x0f0f (0x16ef): (0x09) Set var[0x04] = var[0x13]

/ Set a second variable to 0x4f which is the point in the dictionary 
/ where the FEE FIE FOE FOO words start e.g. FEE (0x4f), FIE (0x50)
/ FOE (0x51), FOO (0x52)
0x0f12 (0x16f2): (0x08) Set var[0x05] = (constant) 0x4f

/ Subtract the dictionary start point to baseline on 0-3
0x0f15 (0x16f5): (0x0b) Set var[0x04] -= var[0x05].

/ Branch if the word matches the next expected word in the sequence
/ FIE (0x01), FOE (0x02), FOO (0x03) - this will happen for any dictionary
/ word so if I player types "FIE" then "North" it won't match the expected sequence
0x0f18 (0x16f8): (0x10) If var[0x04] == var[0x36] then Goto 0x0f24

/ Print message  "Get it right, dummy\n "
0x0f1c (0x16fc): (0x05) Print message (constant) 0x2c

/ Reset the expected word sequence to 0x00 (so a player can do anything
/ now including restart the word sequence)
0x0f1e (0x16fe): (0x09) Set var[0x36] = var[0x06]

/ Set the input word count to zero
/ var[0x06] is the constant 0x00
0x0f21 (0x1701): (0x09) Set var[0x16] = var[0x06]

/ FEE, FIE, FOE, FOO processing complete
0x0f24 (0x1704): (0x02) Return

**************************************************************************
* See if the hollow voice says "PLUGH"
**************************************************************************

/ Branch if the player's location is NOT " in a huge room with passages....
/ ..'Y2' is carved on a rock..." (0x37)
0x0f25 (0x1705): (0x19) If var[0x0d] != (constant) 0x37 then Goto 0x0f32

/ Player is " in a huge room with passages...'Y2' is carved on a rock..."

/ Get a random number
0x0f29 (0x1709): (0x06) Function - Random - Set var[0x04]=<random number>

/ Branch if the random number is above 20 (0x14) - only a (roughly) 8%
/ chance of hearing the hollow voice in every turn in this location
0x0f2c (0x170c): (0x1b) If var[0x04] > (constant) 0x14 then Goto 0x0f32

/ Print message  "\nA hollow voice says 'PLUGH'\n "
0x0f30 (0x1710): (0x05) Print message (constant) 0x23

/ Hollow voice processing complete
0x0f32 (0x1712): (0x02) Return

**************************************************************************
* Check the status of the lamp
**************************************************************************

/ Get the current location of the lamp (0x02)
0x0f33 (0x1713): (0xa3) Set var[0x05] = list#3[var[0x02]] (list address 0x0860)

/ Branch ahead if the battery usage counter is not 0xfc
0x0f36 (0x1716): (0x19) If var[0x2a] != (constant) 0xfc then Goto 0x0f3e

/ Presumably at some point a single byte was used for the lamp status
/ with 0xfe / 0xff using as special values - but the lifetime of the batteries
/ was extended (maybe because colossal is bigger than adventure) and hence 
/ the code leapfrogs over the special values when the counter reaches 0xfc 
/ to continue counting at 0x100

/ Continue counting battery usage from 0x100
0x0f3a (0x171a): (0x08) Set var[0x2a] = (constant) 0x100

/ Branch and return if the lamps status is 0xff (never runs out of power)
/ This happens when the lamp has its batteries recharged at the vending 
/ machine in the maze
/ var[0x03] is the constant 0xff
0x0f3e (0x171e): (0x10) If var[0x2a] == var[0x03] then Goto 0x0f6a

/ Branch if the lamp is NOT switched on (0x01)
/ var[0x01] is the constant 0x01
0x0f42 (0x1722): (0x11) If var[0x2e] != var[0x01] then Goto 0x0f6a

/ Lamp is switched on 

/ Increment the battery usage counter
0x0f46 (0x1726): (0x0a) Set var[0x2a] += var[0x01]

/ Branch if the battery usage counter is NOT 0x109
0x0f49 (0x1729): (0x19) If var[0x2a] != (constant) 0x109 then Goto 0x0f55

/ Battery counter reached 0x109 - about to flickr and go dim

/ Branch if the lamp is NOT in the player's inventory (0xff)
/ NOTE The player won't see the flickering message if it's in the same location as them
/ but NOT in the player's inventory
/ var[0x03] is the constant 0xff
0x0f4e (0x172e): (0x11) If var[0x05] != var[0x03] then Goto 0x0f6a

/ Lamp is in the player's inventory

/ Print message  "\nYour lamp is flickering and growing dim: its batteries are running out. You would be advised to find the vending machine and buy some new batteries from it\n "
0x0f52 (0x1732): (0x05) Print message (constant) 0x2b2

/ Branch if the battery counter is NOT 0x12c
0x0f55 (0x1735): (0x19) If var[0x2a] != (constant) 0x12c then Goto 0x0f6a

/ Battery just ran out of power

/ Set the lamp status to off
0x0f5a (0x173a): (0x09) Set var[0x2e] = var[0x06]

/ Set the status to "battery died" (0xfe)
0x0f5d (0x173d): (0x08) Set var[0x2a] = (constant) 0xfe

/ Branch if the lamp is NOT in the player's inventory (0xff)
/ var[0x03] is the constant 0xff
0x0f60 (0x1740): (0x11) If var[0x05] != var[0x03] then Goto 0x0f6a

/ Player has the lamp

/ Print message  "\nYour lamp fades and goes out. It looks like the end of the game for you this time, but continue if you like\n "
0x0f64 (0x1744): (0x05) Print message (constant) 0x2b3

/ Ask the player "What now?"
0x0f67 (0x1747): (0x00) Goto 0x008a

/ Processing complete 
0x0f6a (0x174a): (0x02) Return

**************************************************************************

/ End of game file
0x0f6b (0x174b): (0x00) Goto 0xffff

**************************************************************************
* Level 9 A-Code game dissassembly complete
**************************************************************************
